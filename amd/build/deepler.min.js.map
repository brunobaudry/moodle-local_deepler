{"version":3,"file":"deepler.min.js","sources":["../src/deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from 'core/ajax';\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\nimport {get_string as getString} from \"core/str\";\nimport {escapeReplacementString, postprocess, preprocess} from \"./tokeniser\";\n\n\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\nlet usage = {};\nlet format = new Intl.NumberFormat();\nlet saveAllModal = {};\nconst escapePatterns = {};\nlet log = (...a) => {\n    return a;\n};\nlet warn = (...a) => {\n    return a;\n};\nlet info = (...a) => {\n    return a;\n};\nlet error = (...a) => {\n    return a;\n};\nconst debug = {\n    NONE: 0,\n    MINIMAL: 5,\n    NORMAL: 15,\n    ALL: 30719,\n    DEVELOPER: 32767\n};\n/**\n * Event factory.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('change', e => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            const allKeys = Array.from(selected).map((e) => e.dataset.key);\n            log(allKeys);\n            if (allKeys.length > 0) {\n                launchModal();\n                saveAllBtn.disabled = true;\n                saveTranslations(allKeys);\n            }\n        }\n    });\n\n};\n/**\n * Get the UIs.\n */\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => {\n            tempTranslations[node.dataset.key] = {};\n        });\n    } catch (e) {\n        if (config.debug) {\n            error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI.\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    log('init');\n    config = cfg;\n    usage = config.usage;\n    // Preparing the debugger.\n    if (config.debug === debug.MINIMAL) {\n        error = window.console.error.bind(window.console);\n    } else if (config.debug === debug.NORMAL) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n    } else if (config.debug === debug.ALL) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n        info = window.console.info.bind(window.console);\n    } else if (config.debug === debug.DEVELOPER) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n        info = window.console.info.bind(window.console);\n        log = window.console.log.bind(window.console);\n    }\n    info(\"DEEPLER loaded\");\n    log(config);\n    warn(\"Deepl's usage\", usage);\n    error(\"testing developper level (Your Moodle is set with dev debug level to the max)\");\n    mainEditorType = config.userPrefs;\n    // Setup.\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    saveAllBtn.disabled = true;\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            const key = _this.dataset.keyValidator;\n            const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n            let currentStatus = icon.getAttribute('data-status');\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                error(`Translation key \"${key}\" is undefined `);\n            } else if (currentStatus === Selectors.statuses.tosave) {\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n    showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n    showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n};\n/**\n * Display error message attached to the item's editor.\n * @param {String} key\n * @param {String} message\n */\nconst showErrorMessageForEditor = (key, message) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    const errorMsg = document.createElement('div');\n    errorMsg.id = 'local_deepler__errormsg';\n    errorMsg.classList = ['alert alert-danger'];\n    errorMsg.innerHTML = message;\n    parent.appendChild(errorMsg);\n};\n/**\n * Hides an item's error message.\n *\n * @param {String} key\n */\nconst hideErrorMessage = (key) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    let alertChild = parent.querySelector('.alert-danger');\n    if (alertChild) {\n        parent.removeChild(alertChild);\n    }\n};\n/**\n * Opens a modal infobox to warn user trunks of fields are saving.\n * @returns {Promise<void>}\n */\nconst launchModal = async() => {\n    saveAllModal = await Modal.create({\n        title: getString('saveallmodaltitle', 'local_deepler'),\n        body: getString('saveallmodalbody', 'local_deepler'),\n    });\n    await saveAllModal.show();\n};\n/**\n * Displays success message and icon.\n *\n * @param {String} key\n * @param {HTMLElement} element\n */\nconst successMessageItem = (key, element) => {\n    element.classList.add(\"local_deepler__success\");\n    // Add saved indicator\n    setIconStatus(key, Selectors.statuses.success);\n    // Remove success message after a few seconds\n    setTimeout(() => {\n        let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n        let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n        prevTransStatus.classList = \"badge badge-pill badge-success\";\n        if (multilangPill.classList.contains(\"disabled\")) {\n            multilangPill.classList.remove('disabled');\n        }\n        setIconStatus(key, Selectors.statuses.saved);\n    });\n};\n/**\n * Displays error message and icon.\n *\n * @param {String} key\n * @param {HTMLElement} editor\n * @param {String} message\n */\nconst errorMessageItem = (key, editor, message) => {\n    editor.classList.add(\"local_deepler__error\");\n    setIconStatus(key, Selectors.statuses.failed);\n    showErrorMessageForEditor(key, message);\n};\n/**\n * Editor's text content.\n *\n * @param {HTMLElement} editor\n * @returns {string}\n */\nconst getEditorText = (editor) => {\n    let text = editor.innerHTML;\n    if (mainEditorType === 'textarea') {\n        text = decodeHTML(text);\n    }\n    return text;\n};\n/**\n * Source text de-tokenised.\n *\n * @param {String} key\n * @returns {String}\n */\nconst getSourceText = (key) => {\n    const sourceTokenised = tempTranslations[key].source;\n    return postprocess(sourceTokenised, tempTranslations[key].tokens);\n};\n/**\n * Fetch field coordinates stored in custom attributes.\n *\n * @param {HTMLElement} element\n * @returns {{field: *, id: number, tid: *, table: *}}\n */\nconst getElementAttributes = (element) => {\n    return {\n        id: parseInt(element.getAttribute(\"data-id\")),\n        tid: element.getAttribute(\"data-tid\"),\n        table: element.getAttribute(\"data-table\"),\n        field: element.getAttribute(\"data-field\")\n    };\n};\n/**\n * External interface callback.\n *\n * @param {Array} data\n */\nconst handleAjaxUpdateDBResponse = (data) => {\n    data.forEach((item) => {\n        if (item.keyid === undefined) {\n            // Display generic error message.\n            getString('errordbtitle', 'local_deepler')\n                .then((s) => {\n                    Modal.create({\n                            title: s,\n                            body: item.error,\n                            type: 'ALERT',\n                            show: true,\n                            removeOnClose: true,\n                        }\n                    );\n                    return s;\n                }).catch((error)=>{\n                error('errordbtitle, could not get Moodle string!!!');\n            });\n        } else {\n            const key = keyidToKey(item.keyid);\n            const htmlElement = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n            const multilangTextarea = document.querySelector(replaceKey(Selectors.editors.multiples.textAreas, key));\n            if (item.error !== undefined) {\n                // Display granular error messages.\n                const indexOfSET = item.error.indexOf(\"SET\");// Probably a text too long for the field if not -1.\n                // Text too long.\n                if (indexOfSET > -1) {\n                    // eslint-disable-next-line promise/always-return\n                    getString('errortoolong', 'local_deepler').then((s) => {\n                        errorMessageItem(key, tempTranslations[key].editor, item.error.slice(0, indexOfSET) + '<br/>' + s);\n                    }).catch((error)=>{\n                        error('errortoolong, could not get Moodle string!!!');\n                    });\n                } else {\n                    errorMessageItem(key, tempTranslations[key].editor, item.error);\n                }\n            } else {\n                successMessageItem(key, htmlElement);\n                multilangTextarea.innerHTML = item.text;\n                // Deselect the checkbox.\n                document.querySelector(Selectors.editors.multiples.checkBoxesWithKey.replace('<KEY>', key))\n                    .checked = false;\n            }\n        }\n    });\n};\n/**\n * Save batch translations.\n *\n * @param {Array} keys\n */\nconst saveTranslations = (keys) => {\n\n    const data = [];\n    keys.forEach((key) => {\n            const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n            const currentStatus = icon.getAttribute('data-status');\n            if (currentStatus === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                data.push(prepareDbUpdatdeItem(key));\n            }\n        }\n    );\n    ajax.call([\n        {\n            methodname: \"local_deepler_update_translation\",\n            args: {\n                data: data,\n            },\n            done: (data) => {\n                info(data);\n                if (saveAllModal !== null && saveAllModal.isVisible) {\n                    saveAllModal.hide();\n                }\n                if (data.length > 0) {\n                    handleAjaxUpdateDBResponse(data);\n                } else {\n                    keys.forEach((key) => {\n                        errorMessageItem(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                    });\n                }\n            },\n            fail: (err) => {\n                warn(err);\n                // An error occurred\n                keys.forEach((key) => {\n                    errorMessageItem(key, tempTranslations[key].editor, err.toString());\n                });\n            },\n        }\n    ]);\n};\n/**\n * Save single translation.\n *\n * @param {string} key\n */\nconst saveTranslation = (key) => {\n    hideErrorMessage(key);\n    ajax.call([\n        {\n            methodname: \"local_deepler_update_translation\",\n            args: {\n                data: [prepareDbUpdatdeItem(key)],\n            },\n            done: (data) => {\n                info(data);\n                if (data.length > 0) {\n                    handleAjaxUpdateDBResponse(data);\n                } else {\n                    errorMessageItem(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                }\n            },\n            fail: (err) => {\n                warn(err);\n                // An error occurred\n                errorMessageItem(key, tempTranslations[key].editor, err.toString());\n            },\n        }\n    ]);\n};\n/**\n * Compile data to be sent to deepl.\n *\n * @param {String} key\n * @returns {{field: *, id: number, text: string, courseid, tid: *, table: *}}\n */\nconst prepareDbUpdatdeItem = (key) => {\n    const editor = tempTranslations[key].editor;\n    const textTranslated = getEditorText(editor);\n    const sourceText = getSourceText(key);\n    const fieldText = tempTranslations[key].fieldText;\n    const element = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n    const {id, tid, field, table} = getElementAttributes(element);\n    const textTosave = getupdatedtext(fieldText, textTranslated, sourceText, tempTranslations[key].sourceLang);\n    return {\n        courseid: config.courseid,\n        id: id,\n        tid: tid,\n        field: field,\n        table: table,\n        text: textTosave\n    };\n};\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database including all mlang tag if any.\n * @param {string} translation Translated Text to update.\n * @param {string} source Original text translated from.\n * @param {string} sourceItemLang The source language code\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n    const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n    const isSourceOther = sourceItemLang === sourceLang;\n    const tagPatterns = {\n        \"other\": \"({mlang other)(.*?){mlang}\",\n        \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n        \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n    };\n    const langsItems = {\n        \"fullContent\": fieldtext,\n        \"other\": `{mlang other}${source}{mlang}`,\n        \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n        \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n    };\n    if (isFirstTranslation) {\n        // No mlang tag : easy.\n        if (isSourceOther) {\n            return langsItems.other + langsItems.target;\n        } else {\n            return langsItems.other + langsItems.source + langsItems.target;\n        }\n    }\n    // Alreaddy mlang tag-s.\n    return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n};\n\n/**\n * Update Textarea when there was mlang tags.\n * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n * @param {boolean} isSourceOther\n * @param {string} tagPatterns\n * @param {string} langsItems\n * @returns {string} {string}\n */\nconst additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n    let manipulatedText = langsItems.fullContent;\n    // Do we have a TARGET tag already ?\n    const targetReg = new RegExp(tagPatterns.target, \"sg\");\n    const hasTagTarget = manipulatedText.match(targetReg);\n    if (hasTagTarget) {\n        // Yes replace it.\n        manipulatedText = manipulatedText.replace(targetReg, escapeReplacementString(langsItems.target));\n    } else {\n        // No, add it at the end.\n        const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n        manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n            langsItems.target,\n            manipulatedText.slice(lastMlangClosingTagEnd)\n        ].join('');\n    }\n    // Do we have a OTHER tag already ?\n    const otherReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagOther = manipulatedText.match(otherReg);\n    // Do we have a SOURCE tag already ?\n    const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagSource = manipulatedText.match(sourceReg);\n    if (isSourceOther) {\n        // Whatever was the {mlang other} tag language we need to replace it by this source.\n        manipulatedText = manipulatedText.replace(otherReg, escapeReplacementString(langsItems.other));\n        if (hasTagSource) {\n            // And remove the {mlang source} tag if found.\n            manipulatedText.replace(sourceReg, \"\");\n        }\n    } else {\n        if (!hasTagOther) {\n            // We still add this source as otherTag of the so that it can be replaced further.\n            const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n            manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                langsItems.other,\n                manipulatedText.slice(firstMlangClosingTagEnd)\n            ].join('');\n        }\n        if (!hasTagSource) {\n            // Add the {mlang source} tag if not found.\n            manipulatedText.replace(sourceReg, escapeReplacementString(langsItems.source));\n        }\n    }\n    return manipulatedText;\n};\n/**\n * Event listener for selection checkboxes.\n * @param {Event} e\n */\nconst onItemChecked = (e) => {\n    log(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n    const key = e.target.getAttribute('data-key');\n    if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n        toggleStatus(key, e.target.checked);\n        countWordAndChar();\n    } else {\n        initTempForKey(key, false);\n    }\n};\n/**\n * Initializing object storage before translation.\n *\n * @param {String} key\n * @param {Boolean} blank\n */\nconst initTempForKey = (key, blank) => {\n\n    // Get the source text\n    const sourceSelector = Selectors.sourcetexts.keys.replace(\"<KEY>\", key);\n    const sourceTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-sourcetext-raw\");\n    const multilangRawTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-filedtext-raw\");\n    const sourceText = fromBase64(sourceTextEncoded);\n    const fieldText = fromBase64(multilangRawTextEncoded);\n    const tokenised = preprocess(sourceText, escapePatterns, escapePatterns);\n    // Store the settings.\n    const editorSettings = findEditor(key);\n    const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n    // We make sure to initialize the record.\n    tempTranslations[key] = {\n        'editorType': null,\n        'editor': null,\n        'source': '',\n        'sourceLang': '',\n        'fieldText': '',\n        'status': '',\n        'translation': '',\n        'tokens': []\n    };\n    if (!blank) {\n        if (editorSettings === null || editorSettings.editor === null) {\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, 'Original editor not found...');\n        } else {\n            // Initialize status for the source content.\n            tempTranslations[key] = {\n                'editorType': editorSettings.editorType,\n                'editor': editorSettings.editor,\n                'source': tokenised.tokenizedText,\n                'sourceLang': sourceLang,\n                'fieldText': fieldText,\n                'status': Selectors.statuses.wait,\n                'translation': '',\n                'tokens': tokenised.expressions\n            };\n        }\n    }\n};\n/**\n * Factory to display process' statuses for each item.\n *\n * @param {String} key\n * @param {Boolean} checked\n */\nconst toggleStatus = (key, checked) => {\n    const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n                initTempForKey(key, false);\n            } else {\n                initTempForKey(key, true);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(key, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(key, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\n/**\n * Change the item icon status as button.\n *\n * @param {String} key\n * @param {String} status\n * @param {Boolean} isBtn\n */\nconst setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n            icon.classList.add('btn-outline-secondary');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n            icon.classList.remove('btn-outline-secondary');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', status);\n    icon.setAttribute('title', config.statusstrings[status.replace('local_deepler/', '')]);\n};\n/**\n * Shows/hides rows.\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    const items = document.querySelectorAll(selector);\n    const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        try {\n            item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = allSelected && selected;\n            toggleStatus(k, false);\n        } catch (e) {\n            log(`${k} translation is disalbled`);\n        }\n\n    });\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\n/**\n * Row visibility.\n *\n * @param {HTMLElement} row\n * @param {Boolean} checked\n */\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang.\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation.\n */\nconst doAutotranslate = () => {\n    log('Do auto translate');\n    saveAllBtn.disabled = false;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            initTempForKey(key);\n            if (tempTranslations[key].editor !== null) {\n                getTranslation(key);\n            }\n        });\n};\n/**\n * Compile Advanced settings.\n *\n * @returns {{}}\n */\nconst prepareAdvancedSettings = () => {\n    info('prepareAdvancedSettings');\n    let settings = {};\n    escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n    escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n    // eslint-disable-next-line camelcase\n    settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n    settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n    // eslint-disable-next-line camelcase\n    settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n    // eslint-disable-next-line camelcase\n    settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n    settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n    // eslint-disable-next-line camelcase\n    settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n    // eslint-disable-next-line camelcase\n    settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n    // eslint-disable-next-line camelcase\n    settings.non_splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n    // eslint-disable-next-line camelcase\n    settings.splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n    // eslint-disable-next-line camelcase\n    settings.ignore_tags = toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n    // eslint-disable-next-line camelcase\n    settings.target_lang = targetLang.toUpperCase();\n    // eslint-disable-next-line camelcase\n    settings.auth_key = config.apikey;\n    return settings;\n};\n/**\n * Compile translation to be sent.\n *\n * @param {String} key\n * @returns {{source_lang: (string|*), text}}\n */\nconst prepareTranslation = (key) => {\n    return {\n        text: tempTranslations[key].source,\n        // eslint-disable-next-line camelcase\n        source_lang: tempTranslations[key].sourceLang,\n    };\n};\n/**\n * Prepare the params for XHR call.\n *\n * @param {string} key\n * @param {boolean} url\n * @returns {URLSearchParams|FormData} Object to use in XHR.\n */\nconst prepareFormData = (key, url = true) => {\n    let formData = url ? new URLSearchParams() : new FormData();\n    Object.entries(prepareAdvancedSettings()).forEach(([k, v]) => {\n        formData.append(k, v);\n    });\n    initTempForKey(key, false); // Reset temp translation in case setting changed.\n    Object.entries(prepareTranslation(key)).forEach(([k, v]) => {\n        formData.append(k, v);\n    });\n    return formData;\n};\n\n\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    log('getTranslation');\n    const readystateDone = XMLHttpRequest.DONE ?? 4; // Workaround if undefined when JS is cached, need further investigation.\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key].staus = Selectors.statuses.wait;\n    // Build formData.\n    let formData = prepareFormData(key);\n    if (tempTranslations[key].editor === null) {\n        error(`${key} no editor found :((`);\n    } else {\n        info(\"Send deepl:\", formData);\n        // Update the translation.\n        let xhr = new XMLHttpRequest();\n        xhr.responseType = 'json';\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === readystateDone) {\n                const status = xhr.status;\n                if (status === 0 || (status >= 200 && status < 400)) {\n                    // The request has been completed successfully.\n                    log(tempTranslations);\n                    let data = xhr.responseType === 'text' || xhr.responseType === '' ? JSON.parse(xhr.responseText) : xhr.response;\n                    info(\"From deepl:\", data);\n                    let tr = postprocess(data.translations[0].text, tempTranslations[key].tokens, escapePatterns);\n                    // Display translation\n                    log(tr);\n                    tempTranslations[key].editor.innerHTML = tr;\n                    // Store the translation in the global object.\n                    tempTranslations[key].translation = tr;\n                    setIconStatus(key, Selectors.statuses.tosave, true);\n                    injectImageCss(\n                        tempTranslations[key].editorType,\n                        tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n                } else {\n                    // Oh no! There has been an error with the request!\n                    setIconStatus(key, Selectors.statuses.failed, false);\n                }\n            } else if (typeof xhr.readyState !== 'number') {\n                // Workaround for the Adaptable theme that did change the return type of xhr.readyState.\n                log('ERROR: Some JS library in your Moodle install are overriding the core functionalities in a wrong way.' +\n                    'xhr.readyState MUST be of type \"number\"');\n            }\n        };\n        xhr.open(\"POST\", config.deeplurl);\n        xhr.send(formData);\n    }\n\n};\n\n/**\n * Inject css to highlight ALT text of image not loaded because of @@PLUGINFILE@@.\n *\n * @param {string} editorType\n * @param {object} editor\n */\nconst injectImageCss = (editorType, editor) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorType === \"iframe\") {\n        let editorschildrens = Array.from(editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * Get the editor container based on recieved current user's editor preference.\n *\n * @param {Integer} key Translation Key\n * @todo MDL-0 get the editor from moodle db in the php.\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        let r = null;\n        let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n        if (editorTab.indexOf(mainEditorType) === -1) {\n            warn('Unsupported editor ' + mainEditorType);\n        } else {\n            // First let's try the current editor.\n            try {\n                r = findEditorByType(key, mainEditorType);\n            } catch (error) {\n                // Content was edited by another editor.\n                log(`Editor not found: ${mainEditorType} for key ${key}`);\n            }\n        }\n        return r;\n    } else {\n        return {editor: e, editorType: et};\n    }\n};\n/**\n * @param {string} key\n * @param {object} editorType\n * @returns {{editor: object, editorType: string}}\n */\nconst findEditorByType = (key, editorType) => {\n    let et = 'basic';\n    let ed = null;\n    switch (editorType) {\n        case \"atto\" :\n            et = 'iframe';\n            ed = document.querySelector(\n                Selectors.editors.types.atto\n                    .replaceAll(\"<KEY>\", key));\n            break;\n        case \"tiny\":\n            et = 'iframe';\n            ed = document.querySelector(Selectors.editors.types.tiny\n                .replaceAll(\"<KEY>\", key))\n                .contentWindow.tinymce;\n            break;\n        case 'marklar':\n        case \"textarea\" :\n            ed = document.querySelector(Selectors.editors.types.other\n                .replaceAll(\"<KEY>\", key));\n            break;\n    }\n    return {editor: ed, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key.\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/*\nConst getKeyFromComponents = (id, field, table) => {\n    return `${table}[${id}][${field}]`;\n};\n*/\n/**\n * Launch, display count of Words And Chars.\n */\nconst countWordAndChar = () => {\n    let wrdsc = 0;\n    let cws = 0;\n    let cwos = 0;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n    const wordCount = document.querySelector(Selectors.statuses.wordcount);\n    const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n    const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n    const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n    const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n    const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n    let current = cwos + usage.character.count;\n    wordCount.innerText = wrdsc;\n    charWithSpace.innerText = cws;\n    charWOSpace.innerText = cwos;\n    deeplUseSpan.innerText = format.format(current);\n    deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n    if (current >= usage.character.limit) {\n        parent.classList.remove('alert-success');\n        parent.classList.add('alert-danger');\n    } else {\n        parent.classList.add('alert-success');\n        parent.classList.remove('alert-danger');\n    }\n};\n/**\n * Compile the needed counts for info.\n *\n * @param {string} key\n * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n */\nconst getCount = (key) => {\n    const item = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    const raw = item.getAttribute(\"data-sourcetext-raw\");\n    // Cleaned sourceText.\n    const trimmedVal = stripHTMLTags(fromBase64(raw)).trim();\n    return {\n        \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n        \"charNumWithSpace\": trimmedVal.length,\n        \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n    };\n};\n/**\n * Helper function to decode the PHP base64 encoded source.\n * @param {string} encoded\n * @returns {string}\n */\nconst fromBase64 = (encoded) => {\n    const binString = atob(encoded); // Maybe we should import js-base64 instead.\n    const bytes = Uint8Array.from(binString, (m) => m.codePointAt(0));\n    return new TextDecoder().decode(bytes);\n};\n/**\n * Helper function for the decode html escaped content.\n * @param {string} encodedStr\n * @returns {string}\n */\nconst decodeHTML = (encodedStr) => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(encodedStr, 'text/html');\n    return doc.documentElement.textContent;\n};\n/**\n * Helper to remove HTML from strings.\n *\n * @param {string} str\n * @returns {string|string}\n */\nconst stripHTMLTags = (str) => {\n    let doc = new DOMParser().parseFromString(str, 'text/html');\n    return doc.body.textContent || \"\";\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_ajax","_selectors","_modal","tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","saveAllModal","escapePatterns","log","_len","arguments","length","a","Array","_key","warn","_len2","_key2","info","_len3","_key3","error","_len4","_key4","debug","_exports","init","cfg","window","console","bind","userPrefs","registerUI","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","message","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","sourceselect","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","Modal","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","selected","checkedCheckBoxes","allKeys","from","map","launchModal","disabled","saveTranslations","toggleAutotranslateButton","validatorsBtns","item","keyValidator","currentStatus","replaceKey","validatorBtn","getAttribute","concat","tosave","saveTranslation","showErrorMessageForEditor","parent","editors","multiples","editorsWithKey","replace","errorMsg","createElement","id","classList","innerHTML","appendChild","hideErrorMessage","alertChild","removeChild","async","getString","errorMessageItem","editor","add","setIconStatus","failed","handleAjaxUpdateDBResponse","data","keyid","then","s","type","catch","keyidToKey","htmlElement","multilangTextarea","textAreas","indexOfSET","indexOf","slice","successMessageItem","element","success","setTimeout","multilangPill","multilang","prevTransStatus","contains","remove","saved","text","checkBoxesWithKey","keys","push","prepareDbUpdatdeItem","ajax","call","methodname","args","done","isVisible","hide","fail","err","toString","textTranslated","decodeHTML","getEditorText","sourceText","sourceTokenised","source","postprocess","tokens","getSourceText","fieldText","tid","field","table","parseInt","getElementAttributes","textTosave","getupdatedtext","courseid","fieldtext","translation","sourceItemLang","isFirstTranslation","isSourceOther","tagPatterns","other","langsItems","fullContent","additionalUpdate","manipulatedText","targetReg","RegExp","match","escapeReplacementString","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","toggleStatus","countWordAndChar","initTempForKey","blank","sourceSelector","sourcetexts","sourceTextEncoded","multilangRawTextEncoded","fromBase64","tokenised","preprocess","editorSettings","findEditor","sourcelangs","editorType","status","tokenizedText","wait","expressions","_tempTranslations$key","_tempTranslations$key2","totranslate","isBtn","icon","setAttribute","statusstrings","selector","items","allSelected","k","toggleRowVisibility","row","url","URL","location","href","searchParams","set","ckBox","getTranslation","prepareFormData","formData","URLSearchParams","FormData","Object","entries","prepareAdvancedSettings","_document$querySelect","settings","LATEX","escapeLatex","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","target_lang","toUpperCase","auth_key","apikey","_ref","v","append","source_lang","prepareTranslation","_ref2","_XMLHttpRequest$DONE","readystateDone","XMLHttpRequest","DONE","staus","xhr","responseType","onreadystatechange","readyState","JSON","parse","responseText","response","tr","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","i","getParentRow","parentrow","multilangs","toggle","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","raw","trimmedVal","stripHTMLTags","trim","encoded","binString","atob","bytes","Uint8Array","codePointAt","TextDecoder","decode","encodedStr","DOMParser","parseFromString","documentElement","str"],"mappings":"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"}