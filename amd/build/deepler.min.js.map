{"version":3,"file":"deepler.min.js","sources":["../src/deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\nimport {get_string as getString} from \"core/str\";\n\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\nlet usage = {};\nlet format = new Intl.NumberFormat();\nlet saveAllModal = {};\nlet batchSaving = 0;\n\nconst registerEventListeners = () => {\n    document.addEventListener('change', e => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            selected.forEach((e) => {\n                const key = e.dataset.key;\n                if (tempTranslations[key].translation !== \"\") {\n                    batchSaving++;\n                    saveTranslation(key);\n                } else {\n                    window.console.warn(\"not translated \" + key);\n                }\n            });\n            if (batchSaving > 0) {\n                launchModal();\n                saveAllBtn.hidden = saveAllBtn.disabled = true;\n            }\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => (tempTranslations[node.dataset.key] = {}));\n    } catch (e) {\n        if (config.debug) {\n            window.console.error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI.\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    config = cfg;\n    config.debug = 0;\n    usage = config.usage;\n    if (config.debug > 0) {\n        window.console.info(\"debugging deepler\");\n        window.console.info(config);\n        window.console.info(usage);\n    }\n    mainEditorType = config.userPrefs;\n    // Setup.\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            let key = _this.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                window.console.warn(`Transaltion key \"${key}\" is undefined `,);\n            } else {\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n    showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n    showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n};\nconst showErrorMessageForEditor = (key, message) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    const errorMsg = document.createElement('div');\n    errorMsg.classList = ['alert alert-danger'];\n    errorMsg.innerHTML = message;\n    parent.appendChild(errorMsg);\n};\n/**\n * Opens a modal infobox to warn user trunks of fields are saving.\n * @returns {Promise<void>}\n */\nconst launchModal = async () => {\n    // ...\n    saveAllModal = await Modal.create({\n        title: getString('saveallmodaltitle', 'local_deepler'),\n        body: getString('saveallmodalbody', 'local_deepler'),\n    });\n    saveAllModal.show();\n};\n/**\n * Save Translation to Moodle\n * @param  {String} key Data Key\n */\nconst saveTranslation = (key) => {\n\n    // Get processing vars.\n    let editor = tempTranslations[key].editor;\n    let text = editor.innerHTML; // We keep the editors text in case translation is edited\n    let sourceText = tempTranslations[key].source;\n    let element = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n    window.console.info(fielddata);\n    if (config.debug > 0) {\n        window.console.info(fielddata);\n    }\n    // Get the latest data to parse text against.\n    ajax.call([\n        {\n            methodname: \"local_deepler_get_field\",\n            args: {\n                data: [fielddata],\n            },\n            done: (data) => {\n                // The latests field text so multiple translators can work at the same time\n                let fieldtext = data[0].text;\n\n                // Field text exists\n                if (data.length > 0) {\n                    // Updated hidden textarea with updatedtext\n                    let textarea = document.querySelector(\n                        Selectors.editors.multiples.textAreas\n                            .replace(\"<KEY>\", key));\n                    // Get the updated text\n                    let updatedtext = getupdatedtext(fieldtext, text, sourceText, tempTranslations[key].sourceLang);\n\n                    // Build the data object\n                    let tdata = {};\n                    tdata.courseid = config.courseid;\n                    tdata.id = parseInt(id);\n                    tdata.tid = tid;\n                    tdata.table = table;\n                    tdata.field = field;\n                    tdata.text = updatedtext;\n                    window.console.info(tdata);\n                    if (config.debug > 0) {\n                        window.console.info(updatedtext);\n                        window.console.info(tdata);\n                    }\n                    // Success Message\n                    const successMessage = () => {\n                        element.classList.add(\"local_deepler__success\");\n                        // Add saved indicator\n                        setIconStatus(key, Selectors.statuses.success);\n                        // Remove success message after a few seconds\n                        setTimeout(() => {\n                            let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                            let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                            prevTransStatus.classList = \"badge badge-pill badge-success\";\n                            if (multilangPill.classList.contains(\"disabled\")) {\n                                multilangPill.classList.remove('disabled');\n                            }\n                            setIconStatus(key, Selectors.statuses.saved);\n                        });\n                    };\n                    // Error Mesage\n                    const errorMessage = (error) => {\n                        window.console.warn(error);\n                        editor.classList.add(\"local_deepler__error\");\n                        setIconStatus(key, Selectors.statuses.failed);\n                        const setIndex = error.debuginfo.indexOf(\"SET\") === -1 ? 15 : error.debuginfo.indexOf(\"SET\");\n                        let message = error.message + '<br/>' + error.debuginfo.slice(0, setIndex) + '...';\n                        if (config.debug > 0) {\n                            message = error.debuginfo;\n                        }\n                        showErrorMessageForEditor(key, message);\n                    };\n                    // Submit the request\n                    ajax.call([\n                        {\n                            methodname: \"local_deepler_update_translation\",\n                            args: {\n                                data: [tdata],\n                            },\n                            done: (data) => {\n                                // Print response to console log\n                                if (config.debug > 0) {\n                                    window.console.info(\"ws: \", key, data);\n                                }\n                                // If we launche saving by the save all button, manage the modal infobox.\n                                if (saveAllModal !== null && saveAllModal.isVisible) {\n                                    batchSaving--;\n                                    if (batchSaving === 0) {\n                                        saveAllModal.hide();\n                                    }\n                                }\n\n                                // Display success message\n                                if (data.length > 0) {\n                                    successMessage();\n                                    textarea.innerHTML = data[0].text;\n\n                                    // Update source lang if necessary\n                                    if (config.currentlang === config.lang) {\n                                        document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                            .innerHTML = text;\n                                    }\n                                    // Deselect the checkbox\n                                    document.querySelector(Selectors.editors.multiples.checkBoxesWithKey.replace('<KEY>', key))\n                                        .checked = false;\n                                } else {\n                                    // Something went wrong with the data\n                                    errorMessage();\n                                }\n                            },\n                            fail: (error) => {\n                                // An error occurred\n                                errorMessage(error);\n                            },\n                        },\n                    ]);\n                } else {\n                    // Something went wrong with field retrieval\n                    window.console.warn(data);\n                }\n            },\n            fail: (error) => {\n                // An error occurred\n                window.console.warn(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database including all mlang tag if any.\n * @param {string} translation Translated Text to update.\n * @param {string} source Original text translated from.\n * @param {string} sourceItemLang The source language code\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n    const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n    const isSourceOther = sourceItemLang === sourceLang;\n    const tagPatterns = {\n        \"other\": \"({mlang other)(.*?){mlang}\",\n        \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n        \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n    };\n    const langsItems = {\n        \"fullContent\": fieldtext,\n        \"other\": `{mlang other}${source}{mlang}`,\n        \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n        \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n    };\n    if (isFirstTranslation) {\n        // No mlang tag : easy.\n        if (isSourceOther) {\n            return langsItems.other + langsItems.target;\n        } else {\n            return langsItems.other + langsItems.source + langsItems.target;\n        }\n    }\n    // Alreaddy malang tag-s.\n    return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n};\n\n/**\n * Update Textarea when there was mlang tags.\n * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n * @param {boolean} isSourceOther\n * @param {string} tagPatterns\n * @param {string} langsItems\n * @returns {string} {string}\n */\nconst additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n    let manipulatedText = langsItems.fullContent;\n    // Do we have a TARGET tag already ?\n    const targetReg = new RegExp(tagPatterns.target, \"sg\");\n    const hasTagTarget = manipulatedText.match(targetReg);\n    if (hasTagTarget) {\n        // Yes replace it.\n        manipulatedText = manipulatedText.replace(targetReg, langsItems.target);\n    } else {\n        // No, add it at the end.\n        const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n        manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n            langsItems.target,\n            manipulatedText.slice(lastMlangClosingTagEnd)\n        ].join('');\n    }\n    // Do we have a OTHER tag already ?\n    const otherReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagOther = manipulatedText.match(otherReg);\n    // Do we have a SOURCE tag already ?\n    const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagSource = manipulatedText.match(sourceReg);\n    if (isSourceOther) {\n        // Whatever was the {mlang other} tag language we need to replace it by this source.\n        manipulatedText = manipulatedText.replace(otherReg, langsItems.other);\n        if (hasTagSource) {\n            // And remove the {mlang source} tag if found.\n            manipulatedText.replace(sourceReg, \"\");\n        }\n    } else {\n        if (!hasTagOther) {\n            // We still add this source as otherTag of the so that it can be replaced further.\n            const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n            manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                langsItems.other,\n                manipulatedText.slice(firstMlangClosingTagEnd)\n            ].join('');\n        }\n        if (!hasTagSource) {\n            // Add the {mlang source} tag if not found.\n            manipulatedText.replace(sourceReg, langsItems.source);\n        }\n    }\n    return manipulatedText;\n};\nconst onItemChecked = (e) => {\n    if (config.debug > 0) {\n        window.console.info(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n    }\n    const key = e.target.getAttribute('data-key');\n    if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n        toggleStatus(key, e.target.checked);\n        countWordAndChar();\n    } else {\n        initTempForKey(key, false);\n    }\n};\nconst initTempForKey = (key, blank) => {\n    // Get the source text\n    const sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    const editorSettings = findEditor(key);\n    const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n    tempTranslations[key] = {\n        'editorType': null,\n        'editor': null,\n        'source': sourceText,\n        'sourceLang': sourceLang,\n        'status': Selectors.statuses.wait,\n        'translation': ''\n    };\n    if (!blank) {\n        if (editorSettings === null || editorSettings.editor === null) {\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, 'Original editor not found...');\n        } else {\n            // Initialize status for the source content.\n            tempTranslations[key] = {\n                'editorType': editorSettings.editorType,\n                'editor': editorSettings.editor,\n                'source': sourceText,\n                'sourceLang': sourceLang,\n                'status': Selectors.statuses.wait,\n                'translation': ''\n            };\n        }\n    }\n};\nconst toggleStatus = (key, checked) => {\n    const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n                initTempForKey(key, false);\n            } else {\n                initTempForKey(key, true);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(key, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(key, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\nconst setIconStatus = (key, s = Selectors.statuses.wait, isBtn = false) => {\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n            icon.classList.add('btn-outline-secondary');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n            icon.classList.remove('btn-outline-secondary');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', s);\n};\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    const items = document.querySelectorAll(selector);\n    const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = allSelected && selected;\n        toggleStatus(k, false);\n    });\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    saveAllBtn.hidden = saveAllBtn.disabled = false;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            if (tempTranslations[key].editor !== null) {\n                getTranslation(key);\n            }\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key].staus = Selectors.statuses.wait;\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", tempTranslations[key].source);\n    formData.append(\"source_lang\", tempTranslations[key].sourceLang);\n    formData.append(\"target_lang\", targetLang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local_deepler/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    if (config.debug) {\n        window.console.info(\"Send deepl:\", formData);\n    }\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                // Display translation\n                tempTranslations[key].editor.innerHTML = data.translations[0].text;\n                // Store the translation in the global object\n                tempTranslations[key].translation = data.translations[0].text;\n                setIconStatus(key, Selectors.statuses.tosave, true);\n                injectImageCss(\n                    tempTranslations[key].editorType,\n                    tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n            } else {\n                // Oh no! There has been an error with the request!\n                setIconStatus(key, Selectors.statuses.failed, false);\n            }\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n *\n * @param {Integer} editorSettings\n * */\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {string} editorType\n * @param {object} editor\n */\nconst injectImageCss = (editorType, editor) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorType === \"iframe\") {\n        let editorschildrens = Array.from(editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * @todo get the editor from moodle db in the php.\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        let r = null;\n        let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n        if (editorTab.indexOf(mainEditorType) === -1) {\n            window.console.warn('Unsupported editor ' + mainEditorType);\n        } else {\n            // First let's try the current editor.\n            try {\n                r = findEditorByType(key, mainEditorType);\n            } catch (e) {\n                // Content was edited by another editor.\n                window.console.warn('Editor not found: ' + mainEditorType);\n            }\n        }\n        return r;\n    } else {\n        return {editor: e, editorType: et};\n    }\n};\n/**\n * @param {string} key\n * @param {object} editorType\n * @returns {{editor: object, editorType: string}}\n */\nconst findEditorByType = (key, editorType) => {\n    let et = 'basic';\n    let ed = null;\n    switch (editorType) {\n        case \"atto\" :\n            et = 'iframe';\n            ed = document.querySelector(\n                Selectors.editors.types.atto\n                    .replaceAll(\"<KEY>\", key));\n            break;\n        case \"tiny\":\n            et = 'iframe';\n            ed = document.querySelector(Selectors.editors.types.tiny\n                .replaceAll(\"<KEY>\", key))\n                .contentWindow.tinymce;\n            break;\n        case 'marklar':\n        case \"textarea\" :\n            ed = document.querySelector(Selectors.editors.types.other\n                .replaceAll(\"<KEY>\", key));\n            break;\n    }\n    return {editor: ed, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * Launch countWordAndChar\n */\nconst countWordAndChar = () => {\n    let wrdsc = 0;\n    let cws = 0;\n    let cwos = 0;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n    const wordCount = document.querySelector(Selectors.statuses.wordcount);\n    const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n    const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n    const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n    const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n    const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n    let current = cwos + usage.character.count;\n    wordCount.innerText = wrdsc;\n    charWithSpace.innerText = cws;\n    charWOSpace.innerText = cwos;\n    deeplUseSpan.innerText = format.format(current);\n    deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n    if (current >= usage.character.limit) {\n        parent.classList.remove('alert-success');\n        parent.classList.add('alert-danger');\n    } else {\n        parent.classList.add('alert-success');\n        parent.classList.remove('alert-danger');\n    }\n};\n/**\n * @param {string} key\n * @return {object}\n */\nconst getCount = (key) => {\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    return countChars(sourceText);\n};\n/**\n *\n * @param {String} val\n * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n */\nconst countChars = (val) => {\n    const withSpace = val.length;\n    // Using Regex\n    const withOutSpace = val.replace(/\\s+/g, '').length;\n    const wordsCount = val.match(/\\S+/g).length;\n    return {\n        \"wordCount\": wordsCount,\n        \"charNumWithSpace\": withSpace,\n        \"charNumWithOutSpace\": withOutSpace\n    };\n};\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","saveAllModal","batchSaving","cfg","debug","window","console","info","userPrefs","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","error","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","sourceselect","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","checkedCheckBoxes","translation","saveTranslation","warn","launchModal","hidden","disabled","toggleAutotranslateButton","validatorsBtns","item","keyValidator","showErrorMessageForEditor","parent","editors","multiples","editorsWithKey","replace","errorMsg","createElement","classList","innerHTML","appendChild","async","Modal","editor","text","sourceText","source","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","add","setIconStatus","success","setTimeout","multilangPill","replaceKey","multilang","prevTransStatus","contains","remove","saved","errorMessage","failed","setIndex","debuginfo","indexOf","slice","isVisible","hide","sourcetexts","keys","checkBoxesWithKey","fail","sourceItemLang","isFirstTranslation","isSourceOther","langsItems","other","additionalUpdate","tagPatterns","manipulatedText","fullContent","targetReg","RegExp","match","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","toggleStatus","countWordAndChar","initTempForKey","blank","editorSettings","findEditor","sourcelangs","wait","editorType","validatorBtn","status","totranslate","tosave","s","isBtn","icon","setAttribute","selector","selected","items","allSelected","k","toggleRowVisibility","row","url","URL","location","href","searchParams","set","toString","ckBox","getTranslation","staus","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","Array","from","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","i","getParentRow","parentrow","keyid","keyidToKey","multilangs","toggle","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","countChars","val","withSpace","withOutSpace"],"mappings":"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"}