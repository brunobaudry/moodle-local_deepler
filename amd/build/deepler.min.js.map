{"version":3,"file":"deepler.min.js","sources":["../src/deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @package    local_deepler\n * @file       amd/src/deepler.js\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'core/ajax',\n        './selectors',\n        'core/modal',\n        'core/str',\n        './tokeniser',\n        './translator'\n    ],\n    (Ajax, Selectors, Modal, Str, Tokeniser, Translator)=>{\n        // Use getString instead of get_string\n        const getString = Str.get_string;\n\n        // Destructure the tokeniser functions\n        const {escapeReplacementString, postprocess, preprocess} = Tokeniser;\n// Initialize the temporary translations dictionary @todo make external class\n        let tempTranslations = {};\n        let mainEditorType = '';\n        let config = {};\n        let autotranslateButton = {};\n        let checkboxes = [];\n        let sourceLang = \"\";\n        let targetLang = \"\";\n        let saveAllBtn = {};\n        let usage = {};\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        const escapePatterns = {};\n        let log = (...a) => {\n            return a;\n        };\n        let warn = (...a) => {\n            return a;\n        };\n        let info = (...a) => {\n            return a;\n        };\n        let error = (...a) => {\n            return a;\n        };\n        const debug = {\n            NONE: 0,\n            MINIMAL: 5,\n            NORMAL: 15,\n            ALL: 30719,\n            DEVELOPER: 32767\n        };\n        /**\n         * Event factory.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', e => {\n                if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                    switchTarget(e);\n                }\n                if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                    switchSource(e);\n                }\n                if (e.target.closest(Selectors.actions.showUpdated)) {\n                    showRows(Selectors.statuses.updated, e.target.checked);\n                }\n                if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                    showRows(Selectors.statuses.needsupdate, e.target.checked);\n                }\n                if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n                    onItemChecked(e);\n                }\n            });\n            document.addEventListener('click', e => {\n                if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                    onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n                }\n                if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                    if (config.currentlang === config.lang || config.lang === undefined) {\n                        Modal.create({\n                            title: 'Cannot call deepl',\n                            body: `<p>Both languges are the same {$config.lang}</p>`,\n                            show: true,\n                            removeOnClose: true,\n                        });\n                    } else {\n                        doAutotranslate();\n                    }\n                }\n                if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                    toggleAllCheckboxes(e);\n                }\n                if (e.target.closest(Selectors.actions.saveAll)) {\n                    const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n                    const allKeys = Array.from(selected).map((e) => e.dataset.key);\n                    log(allKeys);\n                    if (allKeys.length > 0) {\n                        launchModal();\n                        saveAllBtn.disabled = true;\n                        saveTranslations(allKeys);\n                    }\n                }\n            });\n\n        };\n        /**\n         * Get the UIs.\n         */\n        const registerUI = () => {\n            try {\n                saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n\n                sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n                targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n                autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n                checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n                // Initialise status object.\n                checkboxes.forEach((node) => {\n                    tempTranslations[node.dataset.key] = {};\n                });\n            } catch (e) {\n                if (config.debug) {\n                    error(e.message);\n                }\n            }\n        };\n        /**\n         * Translation Editor UI.\n         * @param {Object} cfg JS Config\n         */\n        const init = (cfg) => {\n            const fd = new FormData();\n            fd.append('test', 'value');\n           Translator.translate(fd, (response)=>{\n window.console.info(response);\n});\n            log('init');\n            config = cfg;\n            usage = config.usage;\n            // Preparing the debugger.\n            if (config.debug === debug.MINIMAL) {\n                error = window.console.error.bind(window.console);\n            } else if (config.debug === debug.NORMAL) {\n                error = window.console.error.bind(window.console);\n                warn = window.console.warn.bind(window.console);\n            } else if (config.debug === debug.ALL) {\n                error = window.console.error.bind(window.console);\n                warn = window.console.warn.bind(window.console);\n                info = window.console.info.bind(window.console);\n            } else if (config.debug === debug.DEVELOPER) {\n                error = window.console.error.bind(window.console);\n                warn = window.console.warn.bind(window.console);\n                info = window.console.info.bind(window.console);\n                log = window.console.log.bind(window.console);\n            }\n            info(\"DEEPLER loaded\");\n            log(config);\n            warn(\"Deepl's usage\", usage);\n            error(\"testing developper level (Your Moodle is set with dev debug level to the max)\");\n            mainEditorType = config.userPrefs;\n            // Setup.\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            saveAllBtn.disabled = true;\n            const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n            selectAllBtn.disabled = sourceLang === targetLang;\n            /**\n             * Validate translation ck\n             */\n            const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n            validators.forEach((item) => {\n                // Get the stored data and do the saving from editors content\n                item.addEventListener('click', (e) => {\n                    const _this = e.target.closest(Selectors.actions.validatorsBtns);\n                    const key = _this.dataset.keyValidator;\n                    const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n                    let currentStatus = icon.getAttribute('data-status');\n                    if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                        /**\n                         * @todo do a UI feedback (disable save )\n                         */\n                        error(`Translation key \"${key}\" is undefined `);\n                    } else if (currentStatus === Selectors.statuses.tosave) {\n                        saveTranslation(key);\n                    }\n                });\n            });\n            /**\n             * Selection Checkboxes\n             */\n            checkboxes.forEach((e) => {\n                e.disabled = sourceLang === targetLang;\n                e.addEventListener(\"click\", () => {\n                    toggleAutotranslateButton();\n                });\n            });\n            showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n            let alertChild = parent.querySelector('.alert-danger');\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: getString('saveallmodaltitle', 'local_deepler'),\n                body: getString('saveallmodalbody', 'local_deepler'),\n            });\n            await saveAllModal.show();\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {HTMLElement} element\n         */\n        const successMessageItem = (key, element) => {\n            element.classList.add(\"local_deepler__success\");\n            // Add saved indicator\n            setIconStatus(key, Selectors.statuses.success);\n            // Remove success message after a few seconds\n            setTimeout(() => {\n                let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {String} key\n         * @param {HTMLElement} editor\n         * @param {String} message\n         */\n        const errorMessageItem = (key, editor, message) => {\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, message);\n        };\n        /**\n         * Editor's text content.\n         *\n         * @param {HTMLElement} editor\n         * @returns {string}\n         */\n        const getEditorText = (editor) => {\n            let text = editor.innerHTML;\n            if (mainEditorType === 'textarea') {\n                text = decodeHTML(text);\n            }\n            return text;\n        };\n        /**\n         * Source text de-tokenised.\n         *\n         * @param {String} key\n         * @returns {String}\n         */\n        const getSourceText = (key) => {\n            const sourceTokenised = tempTranslations[key].source;\n            return postprocess(sourceTokenised, tempTranslations[key].tokens);\n        };\n        /**\n         * Fetch field coordinates stored in custom attributes.\n         *\n         * @param {HTMLElement} element\n         * @returns {{field: *, id: number, tid: *, table: *}}\n         */\n        const getElementAttributes = (element) => {\n            return {\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\")\n            };\n        };\n        /**\n         * External interface callback.\n         *\n         * @param {Array} data\n         */\n        const handleAjaxUpdateDBResponse = (data) => {\n            data.forEach((item) => {\n                if (item.keyid === '') {\n                    // Display generic error message.\n                    getString('errordbtitle', 'local_deepler')\n                        .then((s) => {\n                            Modal.create({\n                                    title: s,\n                                    body: item.error,\n                                    type: 'ALERT',\n                                    show: true,\n                                    removeOnClose: true,\n                                }\n                            );\n                            return s;\n                        }).catch((error)=>{\n                        error('errordbtitle, could not get Moodle string!!!');\n                    });\n                } else {\n                    const key = keyidToKey(item.keyid);\n                    const htmlElement = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n                    const multilangTextarea = document.querySelector(replaceKey(Selectors.editors.multiples.textAreas, key));\n                    if (item.error !== undefined && item.error !== '') {\n                        // Display granular error messages.\n                        const indexOfSET = item.error.indexOf(\"SET\");// Probably a text too long for the field if not -1.\n                        // Text too long.\n                        if (indexOfSET > -1) {\n                            // eslint-disable-next-line promise/always-return\n                            getString('errortoolong', 'local_deepler').then((s) => {\n                                errorMessageItem(key, tempTranslations[key].editor, item.error.slice(0, indexOfSET) + '<br/>' + s);\n                            }).catch((error)=>{\n                                error('errortoolong, could not get Moodle string!!!');\n                            });\n                        } else {\n                            errorMessageItem(key, tempTranslations[key].editor, item.error);\n                        }\n                    } else {\n                        successMessageItem(key, htmlElement);\n                        multilangTextarea.innerHTML = item.text;\n                        // Deselect the checkbox.\n                        document.querySelector(Selectors.editors.multiples.checkBoxesWithKey.replace('<KEY>', key))\n                            .checked = false;\n                    }\n                }\n            });\n        };\n        /**\n         * Save batch translations.\n         *\n         * @param {Array} keys\n         */\n        const saveTranslations = (keys) => {\n\n            const data = [];\n            keys.forEach((key) => {\n                    const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n                    const currentStatus = icon.getAttribute('data-status');\n                    if (currentStatus === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDbUpdatdeItem(key));\n                    }\n                }\n            );\n            Ajax.call([\n                {\n                    methodname: \"local_deepler_update_translation\",\n                    args: {\n                        data: data,\n                    },\n                    done: (data) => {\n                        info(data);\n                        if (saveAllModal !== null && saveAllModal.isVisible) {\n                            saveAllModal.hide();\n                        }\n                        if (data.length > 0) {\n                            handleAjaxUpdateDBResponse(data);\n                        } else {\n                            keys.forEach((key) => {\n                                errorMessageItem(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                            });\n                        }\n                    },\n                    fail: (jqXHR, status, error) => {\n                        warn(jqXHR, status, error);\n                        if (saveAllModal !== null && saveAllModal.isVisible) {\n                            saveAllModal.hide();\n                        }\n                        getString('errordbtitle', 'local_deepler')\n                            .then((s) => {\n                                Modal.create({\n                                        title: s,\n                                        body: error,\n                                        type: 'ALERT',\n                                        show: true,\n                                        removeOnClose: true,\n                                    }\n                                );\n                                return s;\n                            }).catch((error)=>{\n                            error('errordbtitle, could not get Moodle string!!!');\n                        });\n                        // An error occurred\n                        keys.forEach((key) => {\n                            errorMessageItem(key, tempTranslations[key].editor, status + ':' + error.toString());\n                        });\n                    },\n                }\n            ]);\n        };\n        /**\n         * Save single translation.\n         *\n         * @param {string} key\n         */\n        const saveTranslation = (key) => {\n            hideErrorMessage(key);\n            Ajax.call([\n                {\n                    methodname: \"local_deepler_update_translation\",\n                    args: {\n                        data: [prepareDbUpdatdeItem(key)],\n                    },\n                    done: (data) => {\n                        info(data);\n                        if (data.length > 0) {\n                            info('ok');\n                            handleAjaxUpdateDBResponse(data);\n                        } else {\n                            info('nok');\n                            errorMessageItem(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                        }\n                    },\n                    fail: (err) => {\n                        if (saveAllModal !== null && saveAllModal.isVisible) {\n                            saveAllModal.hide();\n                        }\n                        warn(err);\n                        // An error occurred\n                        errorMessageItem(key, tempTranslations[key].editor, err.toString());\n                    },\n                }\n            ]);\n        };\n        /**\n         * Compile data to be sent to deepl.\n         *\n         * @param {String} key\n         * @returns {{field: *, id: number, text: string, courseid, tid: *, table: *}}\n         */\n        const prepareDbUpdatdeItem = (key) => {\n            const editor = tempTranslations[key].editor;\n            const textTranslated = getEditorText(editor);\n            const sourceText = getSourceText(key);\n            const fieldText = tempTranslations[key].fieldText;\n            const element = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n            const {id, tid, field, table} = getElementAttributes(element);\n            const textTosave = getupdatedtext(fieldText, textTranslated, sourceText, tempTranslations[key].sourceLang);\n            return {\n                courseid: config.courseid,\n                id: id,\n                tid: tid,\n                field: field,\n                table: table,\n                text: textTosave\n            };\n        };\n        /**\n         * Update Textarea\n         * @param {string} fieldtext Latest text from database including all mlang tag if any.\n         * @param {string} translation Translated Text to update.\n         * @param {string} source Original text translated from.\n         * @param {string} sourceItemLang The source language code\n         * @returns {string}\n         */\n        const getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n            const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n            const isSourceOther = sourceItemLang === sourceLang;\n            const tagPatterns = {\n                \"other\": \"({mlang other)(.*?){mlang}\",\n                \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n                \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n            };\n            const langsItems = {\n                \"fullContent\": fieldtext,\n                \"other\": `{mlang other}${source}{mlang}`,\n                \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n                \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n            };\n            if (isFirstTranslation) {\n                // No mlang tag : easy.\n                if (isSourceOther) {\n                    return langsItems.other + langsItems.target;\n                } else {\n                    return langsItems.other + langsItems.source + langsItems.target;\n                }\n            }\n            // Alreaddy mlang tag-s.\n            return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n        };\n\n        /**\n         * Update Textarea when there was mlang tags.\n         * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n         * @param {boolean} isSourceOther\n         * @param {string} tagPatterns\n         * @param {string} langsItems\n         * @returns {string} {string}\n         */\n        const additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n            let manipulatedText = langsItems.fullContent;\n            // Do we have a TARGET tag already ?\n            const targetReg = new RegExp(tagPatterns.target, \"sg\");\n            const hasTagTarget = manipulatedText.match(targetReg);\n            if (hasTagTarget) {\n                // Yes replace it.\n                manipulatedText = manipulatedText.replace(targetReg, escapeReplacementString(langsItems.target));\n            } else {\n                // No, add it at the end.\n                const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n                manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n                    langsItems.target,\n                    manipulatedText.slice(lastMlangClosingTagEnd)\n                ].join('');\n            }\n            // Do we have a OTHER tag already ?\n            const otherReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagOther = manipulatedText.match(otherReg);\n            // Do we have a SOURCE tag already ?\n            const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagSource = manipulatedText.match(sourceReg);\n            if (isSourceOther) {\n                // Whatever was the {mlang other} tag language we need to replace it by this source.\n                manipulatedText = manipulatedText.replace(otherReg, escapeReplacementString(langsItems.other));\n                if (hasTagSource) {\n                    // And remove the {mlang source} tag if found.\n                    manipulatedText.replace(sourceReg, \"\");\n                }\n            } else {\n                if (!hasTagOther) {\n                    // We still add this source as otherTag of the so that it can be replaced further.\n                    const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n                    manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                        langsItems.other,\n                        manipulatedText.slice(firstMlangClosingTagEnd)\n                    ].join('');\n                }\n                if (!hasTagSource) {\n                    // Add the {mlang source} tag if not found.\n                    manipulatedText.replace(sourceReg, escapeReplacementString(langsItems.source));\n                }\n            }\n            return manipulatedText;\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n         */\n        const onItemChecked = (e) => {\n            log(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n            const key = e.target.getAttribute('data-key');\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(key, e.target.checked);\n                countWordAndChar();\n            } else {\n                initTempForKey(key, false);\n            }\n        };\n        /**\n         * Initializing object storage before translation.\n         *\n         * @param {String} key\n         * @param {Boolean} blank\n         */\n        const initTempForKey = (key, blank) => {\n\n            // Get the source text\n            const sourceSelector = Selectors.sourcetexts.keys.replace(\"<KEY>\", key);\n            const sourceTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-sourcetext-raw\");\n            const multilangRawTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-filedtext-raw\");\n            const sourceText = fromBase64(sourceTextEncoded);\n            const fieldText = fromBase64(multilangRawTextEncoded);\n            const tokenised = preprocess(sourceText, escapePatterns, escapePatterns);\n            // Store the settings.\n            const editorSettings = findEditor(key);\n            const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n            // We make sure to initialize the record.\n            tempTranslations[key] = {\n                'editorType': null,\n                'editor': null,\n                'source': '',\n                'sourceLang': '',\n                'fieldText': '',\n                'status': '',\n                'translation': '',\n                'tokens': []\n            };\n            if (!blank) {\n                if (editorSettings === null || editorSettings.editor === null) {\n                    setIconStatus(key, Selectors.statuses.failed);\n                    showErrorMessageForEditor(key, 'Original editor not found...');\n                } else {\n                    // Initialize status for the source content.\n                    tempTranslations[key] = {\n                        'editorType': editorSettings.editorType,\n                        'editor': editorSettings.editor,\n                        'source': tokenised.tokenizedText,\n                        'sourceLang': sourceLang,\n                        'fieldText': fieldText,\n                        'status': Selectors.statuses.wait,\n                        'translation': '',\n                        'tokens': tokenised.expressions\n                    };\n                }\n            }\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        initTempForKey(key, false);\n                    } else {\n                        initTempForKey(key, true);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    if (checked && tempTranslations[key]?.translation?.length > 0) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    break;\n            }\n        };\n        /**\n         * Change the item icon status as button.\n         *\n         * @param {String} key\n         * @param {String} status\n         * @param {Boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n            if (isBtn) {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            } else {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', config.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = document.querySelectorAll(selector);\n            const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                toggleRowVisibility(item, selected);\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked =\n                        allSelected && selected;\n                    toggleStatus(k, false);\n                } catch (e) {\n                    log(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Row visibility.\n         *\n         * @param {HTMLElement} row\n         * @param {Boolean} checked\n         */\n        const toggleRowVisibility = (row, checked) => {\n            if (checked) {\n                row.classList.remove(\"d-none\");\n            } else {\n                row.classList.add(\"d-none\");\n            }\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"target_lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang\n         * Hence reload the page and change the site main lang\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch autotranslation.\n         */\n        const doAutotranslate = () => {\n            log('Do auto translate');\n            saveAllBtn.disabled = false;\n            document\n                .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    let key = ckBox.getAttribute(\"data-key\");\n                    initTempForKey(key);\n                    if (tempTranslations[key].editor !== null) {\n                        getTranslation(key);\n                    }\n                });\n        };\n        /**\n         * Compile Advanced settings.\n         *\n         * @returns {{}}\n         */\n        const prepareAdvancedSettings = () => {\n            info('prepareAdvancedSettings');\n            let settings = {};\n            escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n            escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n            // eslint-disable-next-line camelcase\n            settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n            settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n            // eslint-disable-next-line camelcase\n            settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n            // eslint-disable-next-line camelcase\n            settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n            settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n            // eslint-disable-next-line camelcase\n            settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n            // eslint-disable-next-line camelcase\n            settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n            // eslint-disable-next-line camelcase\n            settings.non_splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n            // eslint-disable-next-line camelcase\n            settings.splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n            // eslint-disable-next-line camelcase\n            settings.ignore_tags = toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n            // eslint-disable-next-line camelcase\n            settings.target_lang = targetLang.toUpperCase();\n            // eslint-disable-next-line camelcase\n            settings.auth_key = config.apikey;\n            return settings;\n        };\n        /**\n         * Compile translation to be sent.\n         *\n         * @param {String} key\n         * @returns {{source_lang: (string|*), text}}\n         */\n        const prepareTranslation = (key) => {\n            return {\n                text: tempTranslations[key].source,\n                // eslint-disable-next-line camelcase\n                source_lang: tempTranslations[key].sourceLang,\n            };\n        };\n        /**\n         * Prepare the params for XHR call.\n         *\n         * @param {string} key\n         * @param {boolean} url\n         * @returns {URLSearchParams|FormData} Object to use in XHR.\n         */\n        const prepareFormData = (key, url = true) => {\n            let formData = url ? new URLSearchParams() : new FormData();\n            Object.entries(prepareAdvancedSettings()).forEach(([k, v]) => {\n                formData.append(k, v);\n            });\n            initTempForKey(key, false); // Reset temp translation in case setting changed.\n            Object.entries(prepareTranslation(key)).forEach(([k, v]) => {\n                formData.append(k, v);\n            });\n            return formData;\n        };\n\n\n        /**\n         * @todo extract images ALT tags to send for translation\n         * Send for Translation to DeepL\n         * @param {Integer} key Translation Key\n         */\n        const getTranslation = (key) => {\n            log('getTranslation');\n            // Workaround if undefined when JS is cached, need further investigation.\n            const readystateDone = XMLHttpRequest.DONE ?? 4;\n            // Initialize global dictionary with this key's editor.\n            tempTranslations[key].staus = Selectors.statuses.wait;\n            // Build formData.\n            let formData = prepareFormData(key);\n            if (tempTranslations[key].editor === null) {\n                error(`${key} no editor found :((`);\n            } else {\n                info(\"Send deepl:\", formData);\n                // Update the translation.\n                let xhr = new XMLHttpRequest();\n                xhr.responseType = 'json';\n                xhr.onreadystatechange = () => {\n                    if (xhr.readyState === readystateDone) {\n                        const status = xhr.status;\n                        if (status === 0 || (status >= 200 && status < 400)) {\n                            // The request has been completed successfully.\n                            log(tempTranslations);\n                            let data = xhr.responseType === 'text' || xhr.responseType === '' ?\n                                JSON.parse(xhr.responseText) : xhr.response;\n                            info(\"From deepl:\", data);\n                            let tr = postprocess(data.translations[0].text, tempTranslations[key].tokens, escapePatterns);\n                            // Display translation\n                            log(tr);\n                            tempTranslations[key].editor.innerHTML = tr;\n                            // Store the translation in the global object.\n                            tempTranslations[key].translation = tr;\n                            setIconStatus(key, Selectors.statuses.tosave, true);\n                            injectImageCss(\n                                tempTranslations[key].editorType,\n                                tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n                        } else {\n                            // Oh no! There has been an error with the request!\n                            setIconStatus(key, Selectors.statuses.failed, false);\n                        }\n                    } else if (typeof xhr.readyState !== 'number') {\n                        // Workaround for the Adaptable theme that did change the return type of xhr.readyState.\n                        log('ERROR: Some JS library in your Moodle install ' +\n                            'are overriding the core functionalities in a wrong way.' +\n                            'xhr.readyState MUST be of type \"number\"');\n                    }\n                };\n                xhr.open(\"POST\", config.deeplurl);\n                xhr.send(formData);\n            }\n\n        };\n\n        /**\n         * Inject css to highlight ALT text of image not loaded because of @@PLUGINFILE@@.\n         *\n         * @param {string} editorType\n         * @param {object} editor\n         */\n        const injectImageCss = (editorType, editor) => {\n            // Prepare css to inject in iframe editors\n            const css = document.createElement('style');\n            css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n            if (editorType === \"iframe\") {\n                let editorschildrens = Array.from(editor.parentElement.children);\n                let found = false;\n                for (let j in editorschildrens) {\n                    let e = editorschildrens[j];\n                    if (e.innerText === css.innerText) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    editor.parentElement.appendChild(css);\n                }\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {Integer} key Translation Key\n         * @todo MDL-0 get the editor from moodle db in the php.\n         */\n        const findEditor = (key) => {\n            let e = document.querySelector(Selectors.editors.types.basic\n                .replace(\"<KEY>\", key));\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(mainEditorType) === -1) {\n                    warn('Unsupported editor ' + mainEditorType);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, mainEditorType);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        log(`Editor not found: ${mainEditorType} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = document.querySelector(\n                        Selectors.editors.types.atto\n                            .replaceAll(\"<KEY>\", key));\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = document.querySelector(Selectors.editors.types.tiny\n                        .replaceAll(\"<KEY>\", key))\n                        .contentWindow.tinymce;\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = document.querySelector(Selectors.editors.types.other\n                        .replaceAll(\"<KEY>\", key));\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        const getParentRow = (node) => {\n            return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Multilang button handler\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = keyidToKey(keyid);\n            let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n            let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n            source.classList.toggle(\"show\");\n            multilang.classList.toggle(\"show\");\n        };\n        /**\n         * Json helper\n         * @param {string} s\n         * @param {string} sep\n         * @returns {string}\n         */\n        const toJsonArray = (s, sep = \",\") => {\n            return JSON.stringify(s.split(sep));\n        };\n        /**\n         * Simple helper to manage selectors\n         * @param {string} s\n         * @param {string} k\n         * @returns {*}\n         */\n        const replaceKey = (s, k) => {\n            return s.replace(\"<KEY>\", k);\n        };\n        /**\n         * Transforms a keyid to a key.\n         * @param {string} k\n         * @returns {`${*}[${*}][${*}]`}\n         */\n        const keyidToKey = (k) => {\n            let m = k.match(/^(.+)-(.+)-(.+)$/i);\n            return `${m[1]}[${m[2]}][${m[3]}]`;\n        };\n        /*\n        Const getKeyFromComponents = (id, field, table) => {\n            return `${table}[${id}][${field}]`;\n        };\n        */\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n            document\n                .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    let key = ckBox.getAttribute(\"data-key\");\n                    let results = getCount(key);\n                    wrdsc += results.wordCount;\n                    cwos += results.charNumWithOutSpace;\n                    cws += results.charNumWithSpace;\n                });\n            const wordCount = document.querySelector(Selectors.statuses.wordcount);\n            const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n            const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n            let current = cwos + usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n            if (current >= usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = stripHTMLTags(fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Helper function to decode the PHP base64 encoded source.\n         * @param {string} encoded\n         * @returns {string}\n         */\n        const fromBase64 = (encoded) => {\n            const binString = atob(encoded); // Maybe we should import js-base64 instead.\n            const bytes = Uint8Array.from(binString, (m) => m.codePointAt(0));\n            return new TextDecoder().decode(bytes);\n        };\n        /**\n         * Helper function for the decode html escaped content.\n         * @param {string} encodedStr\n         * @returns {string}\n         */\n        const decodeHTML = (encodedStr) => {\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(encodedStr, 'text/html');\n            return doc.documentElement.textContent;\n        };\n        /**\n         * Helper to remove HTML from strings.\n         *\n         * @param {string} str\n         * @returns {string|string}\n         */\n        const stripHTMLTags = (str) => {\n            let doc = new DOMParser().parseFromString(str, 'text/html');\n            return doc.body.textContent || \"\";\n        };\n\n        return {\n            init: init\n        };\n    }\n);\n"],"names":["define","Ajax","Selectors","Modal","Str","Tokeniser","Translator","getString","get_string","escapeReplacementString","postprocess","preprocess","tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","saveAllModal","escapePatterns","log","a","warn","info","error","debug","showErrorMessageForEditor","key","message","parent","document","querySelector","editors","multiples","editorsWithKey","replace","errorMsg","createElement","id","classList","innerHTML","appendChild","hideErrorMessage","alertChild","removeChild","launchModal","async","create","title","body","show","errorMessageItem","editor","add","setIconStatus","statuses","failed","handleAjaxUpdateDBResponse","data","forEach","item","keyid","then","s","type","removeOnClose","catch","keyidToKey","htmlElement","replaceKey","multilangTextarea","textAreas","undefined","indexOfSET","indexOf","slice","element","success","setTimeout","multilangPill","multilang","prevTransStatus","contains","remove","saved","successMessageItem","text","checkBoxesWithKey","checked","saveTranslations","keys","actions","validatorBtn","getAttribute","tosave","push","prepareDbUpdatdeItem","call","methodname","args","done","isVisible","hide","length","fail","jqXHR","status","toString","saveTranslation","err","textTranslated","decodeHTML","getEditorText","sourceText","sourceTokenised","source","tokens","getSourceText","fieldText","tid","field","table","parseInt","getElementAttributes","textTosave","getupdatedtext","courseid","fieldtext","translation","sourceItemLang","isFirstTranslation","isSourceOther","tagPatterns","langsItems","other","target","additionalUpdate","manipulatedText","fullContent","targetReg","RegExp","match","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","onItemChecked","e","toggleStatus","countWordAndChar","initTempForKey","blank","sourceSelector","sourcetexts","sourceTextEncoded","multilangRawTextEncoded","fromBase64","tokenised","editorSettings","findEditor","sourcelangs","value","editorType","tokenizedText","wait","expressions","dataset","totranslate","isBtn","icon","setAttribute","statusstrings","showRows","selector","selected","items","querySelectorAll","allSelected","selectAllBtn","k","toggleRowVisibility","toggleAutotranslateButton","row","switchTarget","url","URL","window","location","href","searchParams","set","switchSource","doAutotranslate","disabled","checkedCheckBoxes","ckBox","getTranslation","prepareAdvancedSettings","settings","LATEX","escapeLatex","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","target_lang","toUpperCase","auth_key","apikey","prepareTranslation","source_lang","readystateDone","XMLHttpRequest","DONE","staus","formData","FormData","URLSearchParams","Object","entries","_ref","v","append","_ref2","prepareFormData","xhr","responseType","onreadystatechange","readyState","JSON","parse","responseText","response","tr","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","Array","from","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","toggleAllCheckboxes","i","getParentRow","node","closest","parentrow","onToggleMultilang","multilangs","toggle","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","raw","trimmedVal","stripHTMLTags","trim","encoded","binString","atob","bytes","Uint8Array","codePointAt","TextDecoder","decode","encodedStr","DOMParser","parseFromString","documentElement","str","init","cfg","fd","translate","console","bind","userPrefs","saveAll","sourceSwitcher","targetSwitcher","autoTranslateBtn","checkBoxes","registerUI","addEventListener","showUpdated","updated","showNeedUpdate","needsupdate","sourceselect","toggleMultilang","currentlang","lang","allKeys","map","validatorsBtns","keyValidator","currentStatus"],"mappings":"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"}