{"version":3,"file":"deepler.min.js","sources":["../src/deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\ndefine(\n    [\n        'core/ajax',\n        './selectors',\n        'core/modal',\n        'core/str',\n        './tokeniser'\n    ],\n    (Ajax, Selectors, Modal, Str, Tokeniser)=>{\n        // Use getString instead of get_string\n        const getString = Str.get_string;\n\n        // Destructure the tokeniser functions\n        const {escapeReplacementString, postprocess, preprocess} = Tokeniser;\n\n\n// Initialize the temporary translations dictionary @todo make external class\n        let tempTranslations = {};\n        let mainEditorType = '';\n        let config = {};\n        let autotranslateButton = {};\n        let checkboxes = [];\n        let sourceLang = \"\";\n        let targetLang = \"\";\n        let saveAllBtn = {};\n        let usage = {};\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        const escapePatterns = {};\n        let log = (...a) => {\n            return a;\n        };\n        let warn = (...a) => {\n            return a;\n        };\n        let info = (...a) => {\n            return a;\n        };\n        let error = (...a) => {\n            return a;\n        };\n        const debug = {\n            NONE: 0,\n            MINIMAL: 5,\n            NORMAL: 15,\n            ALL: 30719,\n            DEVELOPER: 32767\n        };\n        /**\n         * Event factory.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', e => {\n                if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                    switchTarget(e);\n                }\n                if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                    switchSource(e);\n                }\n                if (e.target.closest(Selectors.actions.showUpdated)) {\n                    showRows(Selectors.statuses.updated, e.target.checked);\n                }\n                if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                    showRows(Selectors.statuses.needsupdate, e.target.checked);\n                }\n                if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n                    onItemChecked(e);\n                }\n            });\n            document.addEventListener('click', e => {\n                if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                    onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n                }\n                if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                    if (config.currentlang === config.lang || config.lang === undefined) {\n                        Modal.create({\n                            title: 'Cannot call deepl',\n                            body: `<p>Both languges are the same {$config.lang}</p>`,\n                            show: true,\n                            removeOnClose: true,\n                        });\n                    } else {\n                        doAutotranslate();\n                    }\n                }\n                if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                    toggleAllCheckboxes(e);\n                }\n                if (e.target.closest(Selectors.actions.saveAll)) {\n                    const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n                    const allKeys = Array.from(selected).map((e) => e.dataset.key);\n                    log(allKeys);\n                    if (allKeys.length > 0) {\n                        launchModal();\n                        saveAllBtn.disabled = true;\n                        saveTranslations(allKeys);\n                    }\n                }\n            });\n\n        };\n        /**\n         * Get the UIs.\n         */\n        const registerUI = () => {\n            try {\n                saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n\n                sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n                targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n                autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n                checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n                // Initialise status object.\n                checkboxes.forEach((node) => {\n                    tempTranslations[node.dataset.key] = {};\n                });\n            } catch (e) {\n                if (config.debug) {\n                    error(e.message);\n                }\n            }\n        };\n        /**\n         * Translation Editor UI.\n         * @param {Object} cfg JS Config\n         */\n        const init = (cfg) => {\n            log('init');\n            config = cfg;\n            usage = config.usage;\n            // Preparing the debugger.\n            if (config.debug === debug.MINIMAL) {\n                error = window.console.error.bind(window.console);\n            } else if (config.debug === debug.NORMAL) {\n                error = window.console.error.bind(window.console);\n                warn = window.console.warn.bind(window.console);\n            } else if (config.debug === debug.ALL) {\n                error = window.console.error.bind(window.console);\n                warn = window.console.warn.bind(window.console);\n                info = window.console.info.bind(window.console);\n            } else if (config.debug === debug.DEVELOPER) {\n                error = window.console.error.bind(window.console);\n                warn = window.console.warn.bind(window.console);\n                info = window.console.info.bind(window.console);\n                log = window.console.log.bind(window.console);\n            }\n            info(\"DEEPLER loaded\");\n            log(config);\n            warn(\"Deepl's usage\", usage);\n            error(\"testing developper level (Your Moodle is set with dev debug level to the max)\");\n            mainEditorType = config.userPrefs;\n            // Setup.\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            saveAllBtn.disabled = true;\n            const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n            selectAllBtn.disabled = sourceLang === targetLang;\n            /**\n             * Validate translation ck\n             */\n            const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n            validators.forEach((item) => {\n                // Get the stored data and do the saving from editors content\n                item.addEventListener('click', (e) => {\n                    const _this = e.target.closest(Selectors.actions.validatorsBtns);\n                    const key = _this.dataset.keyValidator;\n                    const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n                    let currentStatus = icon.getAttribute('data-status');\n                    if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                        /**\n                         * @todo do a UI feedback (disable save )\n                         */\n                        error(`Translation key \"${key}\" is undefined `);\n                    } else if (currentStatus === Selectors.statuses.tosave) {\n                        saveTranslation(key);\n                    }\n                });\n            });\n            /**\n             * Selection Checkboxes\n             */\n            checkboxes.forEach((e) => {\n                e.disabled = sourceLang === targetLang;\n                e.addEventListener(\"click\", () => {\n                    toggleAutotranslateButton();\n                });\n            });\n            showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n            let alertChild = parent.querySelector('.alert-danger');\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: getString('saveallmodaltitle', 'local_deepler'),\n                body: getString('saveallmodalbody', 'local_deepler'),\n            });\n            await saveAllModal.show();\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {HTMLElement} element\n         */\n        const successMessageItem = (key, element) => {\n            element.classList.add(\"local_deepler__success\");\n            // Add saved indicator\n            setIconStatus(key, Selectors.statuses.success);\n            // Remove success message after a few seconds\n            setTimeout(() => {\n                let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {String} key\n         * @param {HTMLElement} editor\n         * @param {String} message\n         */\n        const errorMessageItem = (key, editor, message) => {\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, message);\n        };\n        /**\n         * Editor's text content.\n         *\n         * @param {HTMLElement} editor\n         * @returns {string}\n         */\n        const getEditorText = (editor) => {\n            let text = editor.innerHTML;\n            if (mainEditorType === 'textarea') {\n                text = decodeHTML(text);\n            }\n            return text;\n        };\n        /**\n         * Source text de-tokenised.\n         *\n         * @param {String} key\n         * @returns {String}\n         */\n        const getSourceText = (key) => {\n            const sourceTokenised = tempTranslations[key].source;\n            return postprocess(sourceTokenised, tempTranslations[key].tokens);\n        };\n        /**\n         * Fetch field coordinates stored in custom attributes.\n         *\n         * @param {HTMLElement} element\n         * @returns {{field: *, id: number, tid: *, table: *}}\n         */\n        const getElementAttributes = (element) => {\n            return {\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\")\n            };\n        };\n        /**\n         * External interface callback.\n         *\n         * @param {Array} data\n         */\n        const handleAjaxUpdateDBResponse = (data) => {\n            data.forEach((item) => {\n                if (item.keyid === undefined) {\n                    // Display generic error message.\n                    getString('errordbtitle', 'local_deepler')\n                        .then((s) => {\n                            Modal.create({\n                                    title: s,\n                                    body: item.error,\n                                    type: 'ALERT',\n                                    show: true,\n                                    removeOnClose: true,\n                                }\n                            );\n                            return s;\n                        }).catch((error)=>{\n                        error('errordbtitle, could not get Moodle string!!!');\n                    });\n                } else {\n                    const key = keyidToKey(item.keyid);\n                    const htmlElement = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n                    const multilangTextarea = document.querySelector(replaceKey(Selectors.editors.multiples.textAreas, key));\n                    if (item.error !== undefined) {\n                        // Display granular error messages.\n                        const indexOfSET = item.error.indexOf(\"SET\");// Probably a text too long for the field if not -1.\n                        // Text too long.\n                        if (indexOfSET > -1) {\n                            // eslint-disable-next-line promise/always-return\n                            getString('errortoolong', 'local_deepler').then((s) => {\n                                errorMessageItem(key, tempTranslations[key].editor, item.error.slice(0, indexOfSET) + '<br/>' + s);\n                            }).catch((error)=>{\n                                error('errortoolong, could not get Moodle string!!!');\n                            });\n                        } else {\n                            errorMessageItem(key, tempTranslations[key].editor, item.error);\n                        }\n                    } else {\n                        successMessageItem(key, htmlElement);\n                        multilangTextarea.innerHTML = item.text;\n                        // Deselect the checkbox.\n                        document.querySelector(Selectors.editors.multiples.checkBoxesWithKey.replace('<KEY>', key))\n                            .checked = false;\n                    }\n                }\n            });\n        };\n        /**\n         * Save batch translations.\n         *\n         * @param {Array} keys\n         */\n        const saveTranslations = (keys) => {\n\n            const data = [];\n            keys.forEach((key) => {\n                    const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n                    const currentStatus = icon.getAttribute('data-status');\n                    if (currentStatus === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDbUpdatdeItem(key));\n                    }\n                }\n            );\n            Ajax.call([\n                {\n                    methodname: \"local_deepler_update_translation\",\n                    args: {\n                        data: data,\n                    },\n                    done: (data) => {\n                        info(data);\n                        if (saveAllModal !== null && saveAllModal.isVisible) {\n                            saveAllModal.hide();\n                        }\n                        if (data.length > 0) {\n                            handleAjaxUpdateDBResponse(data);\n                        } else {\n                            keys.forEach((key) => {\n                                errorMessageItem(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                            });\n                        }\n                    },\n                    fail: (err) => {\n                        warn(err);\n                        // An error occurred\n                        keys.forEach((key) => {\n                            errorMessageItem(key, tempTranslations[key].editor, err.toString());\n                        });\n                    },\n                }\n            ]);\n        };\n        /**\n         * Save single translation.\n         *\n         * @param {string} key\n         */\n        const saveTranslation = (key) => {\n            hideErrorMessage(key);\n            Ajax.call([\n                {\n                    methodname: \"local_deepler_update_translation\",\n                    args: {\n                        data: [prepareDbUpdatdeItem(key)],\n                    },\n                    done: (data) => {\n                        info(data);\n                        if (data.length > 0) {\n                            handleAjaxUpdateDBResponse(data);\n                        } else {\n                            errorMessageItem(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                        }\n                    },\n                    fail: (err) => {\n                        warn(err);\n                        // An error occurred\n                        errorMessageItem(key, tempTranslations[key].editor, err.toString());\n                    },\n                }\n            ]);\n        };\n        /**\n         * Compile data to be sent to deepl.\n         *\n         * @param {String} key\n         * @returns {{field: *, id: number, text: string, courseid, tid: *, table: *}}\n         */\n        const prepareDbUpdatdeItem = (key) => {\n            const editor = tempTranslations[key].editor;\n            const textTranslated = getEditorText(editor);\n            const sourceText = getSourceText(key);\n            const fieldText = tempTranslations[key].fieldText;\n            const element = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n            const {id, tid, field, table} = getElementAttributes(element);\n            const textTosave = getupdatedtext(fieldText, textTranslated, sourceText, tempTranslations[key].sourceLang);\n            return {\n                courseid: config.courseid,\n                id: id,\n                tid: tid,\n                field: field,\n                table: table,\n                text: textTosave\n            };\n        };\n        /**\n         * Update Textarea\n         * @param {string} fieldtext Latest text from database including all mlang tag if any.\n         * @param {string} translation Translated Text to update.\n         * @param {string} source Original text translated from.\n         * @param {string} sourceItemLang The source language code\n         * @returns {string}\n         */\n        const getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n            const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n            const isSourceOther = sourceItemLang === sourceLang;\n            const tagPatterns = {\n                \"other\": \"({mlang other)(.*?){mlang}\",\n                \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n                \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n            };\n            const langsItems = {\n                \"fullContent\": fieldtext,\n                \"other\": `{mlang other}${source}{mlang}`,\n                \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n                \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n            };\n            if (isFirstTranslation) {\n                // No mlang tag : easy.\n                if (isSourceOther) {\n                    return langsItems.other + langsItems.target;\n                } else {\n                    return langsItems.other + langsItems.source + langsItems.target;\n                }\n            }\n            // Alreaddy mlang tag-s.\n            return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n        };\n\n        /**\n         * Update Textarea when there was mlang tags.\n         * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n         * @param {boolean} isSourceOther\n         * @param {string} tagPatterns\n         * @param {string} langsItems\n         * @returns {string} {string}\n         */\n        const additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n            let manipulatedText = langsItems.fullContent;\n            // Do we have a TARGET tag already ?\n            const targetReg = new RegExp(tagPatterns.target, \"sg\");\n            const hasTagTarget = manipulatedText.match(targetReg);\n            if (hasTagTarget) {\n                // Yes replace it.\n                manipulatedText = manipulatedText.replace(targetReg, escapeReplacementString(langsItems.target));\n            } else {\n                // No, add it at the end.\n                const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n                manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n                    langsItems.target,\n                    manipulatedText.slice(lastMlangClosingTagEnd)\n                ].join('');\n            }\n            // Do we have a OTHER tag already ?\n            const otherReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagOther = manipulatedText.match(otherReg);\n            // Do we have a SOURCE tag already ?\n            const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagSource = manipulatedText.match(sourceReg);\n            if (isSourceOther) {\n                // Whatever was the {mlang other} tag language we need to replace it by this source.\n                manipulatedText = manipulatedText.replace(otherReg, escapeReplacementString(langsItems.other));\n                if (hasTagSource) {\n                    // And remove the {mlang source} tag if found.\n                    manipulatedText.replace(sourceReg, \"\");\n                }\n            } else {\n                if (!hasTagOther) {\n                    // We still add this source as otherTag of the so that it can be replaced further.\n                    const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n                    manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                        langsItems.other,\n                        manipulatedText.slice(firstMlangClosingTagEnd)\n                    ].join('');\n                }\n                if (!hasTagSource) {\n                    // Add the {mlang source} tag if not found.\n                    manipulatedText.replace(sourceReg, escapeReplacementString(langsItems.source));\n                }\n            }\n            return manipulatedText;\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n         */\n        const onItemChecked = (e) => {\n            log(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n            const key = e.target.getAttribute('data-key');\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(key, e.target.checked);\n                countWordAndChar();\n            } else {\n                initTempForKey(key, false);\n            }\n        };\n        /**\n         * Initializing object storage before translation.\n         *\n         * @param {String} key\n         * @param {Boolean} blank\n         */\n        const initTempForKey = (key, blank) => {\n\n            // Get the source text\n            const sourceSelector = Selectors.sourcetexts.keys.replace(\"<KEY>\", key);\n            const sourceTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-sourcetext-raw\");\n            const multilangRawTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-filedtext-raw\");\n            const sourceText = fromBase64(sourceTextEncoded);\n            const fieldText = fromBase64(multilangRawTextEncoded);\n            const tokenised = preprocess(sourceText, escapePatterns, escapePatterns);\n            // Store the settings.\n            const editorSettings = findEditor(key);\n            const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n            // We make sure to initialize the record.\n            tempTranslations[key] = {\n                'editorType': null,\n                'editor': null,\n                'source': '',\n                'sourceLang': '',\n                'fieldText': '',\n                'status': '',\n                'translation': '',\n                'tokens': []\n            };\n            if (!blank) {\n                if (editorSettings === null || editorSettings.editor === null) {\n                    setIconStatus(key, Selectors.statuses.failed);\n                    showErrorMessageForEditor(key, 'Original editor not found...');\n                } else {\n                    // Initialize status for the source content.\n                    tempTranslations[key] = {\n                        'editorType': editorSettings.editorType,\n                        'editor': editorSettings.editor,\n                        'source': tokenised.tokenizedText,\n                        'sourceLang': sourceLang,\n                        'fieldText': fieldText,\n                        'status': Selectors.statuses.wait,\n                        'translation': '',\n                        'tokens': tokenised.expressions\n                    };\n                }\n            }\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        initTempForKey(key, false);\n                    } else {\n                        initTempForKey(key, true);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    if (checked && tempTranslations[key]?.translation?.length > 0) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    break;\n            }\n        };\n        /**\n         * Change the item icon status as button.\n         *\n         * @param {String} key\n         * @param {String} status\n         * @param {Boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n            if (isBtn) {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            } else {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', config.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = document.querySelectorAll(selector);\n            const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                toggleRowVisibility(item, selected);\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked =\n                        allSelected && selected;\n                    toggleStatus(k, false);\n                } catch (e) {\n                    log(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Row visibility.\n         *\n         * @param {HTMLElement} row\n         * @param {Boolean} checked\n         */\n        const toggleRowVisibility = (row, checked) => {\n            if (checked) {\n                row.classList.remove(\"d-none\");\n            } else {\n                row.classList.add(\"d-none\");\n            }\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"target_lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang\n         * Hence reload the page and change the site main lang\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch autotranslation.\n         */\n        const doAutotranslate = () => {\n            log('Do auto translate');\n            saveAllBtn.disabled = false;\n            document\n                .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    let key = ckBox.getAttribute(\"data-key\");\n                    initTempForKey(key);\n                    if (tempTranslations[key].editor !== null) {\n                        getTranslation(key);\n                    }\n                });\n        };\n        /**\n         * Compile Advanced settings.\n         *\n         * @returns {{}}\n         */\n        const prepareAdvancedSettings = () => {\n            info('prepareAdvancedSettings');\n            let settings = {};\n            escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n            escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n            // eslint-disable-next-line camelcase\n            settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n            settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n            // eslint-disable-next-line camelcase\n            settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n            // eslint-disable-next-line camelcase\n            settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n            settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n            // eslint-disable-next-line camelcase\n            settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n            // eslint-disable-next-line camelcase\n            settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n            // eslint-disable-next-line camelcase\n            settings.non_splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n            // eslint-disable-next-line camelcase\n            settings.splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n            // eslint-disable-next-line camelcase\n            settings.ignore_tags = toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n            // eslint-disable-next-line camelcase\n            settings.target_lang = targetLang.toUpperCase();\n            // eslint-disable-next-line camelcase\n            settings.auth_key = config.apikey;\n            return settings;\n        };\n        /**\n         * Compile translation to be sent.\n         *\n         * @param {String} key\n         * @returns {{source_lang: (string|*), text}}\n         */\n        const prepareTranslation = (key) => {\n            return {\n                text: tempTranslations[key].source,\n                // eslint-disable-next-line camelcase\n                source_lang: tempTranslations[key].sourceLang,\n            };\n        };\n        /**\n         * Prepare the params for XHR call.\n         *\n         * @param {string} key\n         * @param {boolean} url\n         * @returns {URLSearchParams|FormData} Object to use in XHR.\n         */\n        const prepareFormData = (key, url = true) => {\n            let formData = url ? new URLSearchParams() : new FormData();\n            Object.entries(prepareAdvancedSettings()).forEach(([k, v]) => {\n                formData.append(k, v);\n            });\n            initTempForKey(key, false); // Reset temp translation in case setting changed.\n            Object.entries(prepareTranslation(key)).forEach(([k, v]) => {\n                formData.append(k, v);\n            });\n            return formData;\n        };\n\n\n        /**\n         * @todo extract images ALT tags to send for translation\n         * Send for Translation to DeepL\n         * @param {Integer} key Translation Key\n         */\n        const getTranslation = (key) => {\n            log('getTranslation');\n            // Workaround if undefined when JS is cached, need further investigation.\n            const readystateDone = XMLHttpRequest.DONE ?? 4;\n            // Initialize global dictionary with this key's editor.\n            tempTranslations[key].staus = Selectors.statuses.wait;\n            // Build formData.\n            let formData = prepareFormData(key);\n            if (tempTranslations[key].editor === null) {\n                error(`${key} no editor found :((`);\n            } else {\n                info(\"Send deepl:\", formData);\n                // Update the translation.\n                let xhr = new XMLHttpRequest();\n                xhr.responseType = 'json';\n                xhr.onreadystatechange = () => {\n                    if (xhr.readyState === readystateDone) {\n                        const status = xhr.status;\n                        if (status === 0 || (status >= 200 && status < 400)) {\n                            // The request has been completed successfully.\n                            log(tempTranslations);\n                            let data = xhr.responseType === 'text' || xhr.responseType === '' ?\n                                JSON.parse(xhr.responseText) : xhr.response;\n                            info(\"From deepl:\", data);\n                            let tr = postprocess(data.translations[0].text, tempTranslations[key].tokens, escapePatterns);\n                            // Display translation\n                            log(tr);\n                            tempTranslations[key].editor.innerHTML = tr;\n                            // Store the translation in the global object.\n                            tempTranslations[key].translation = tr;\n                            setIconStatus(key, Selectors.statuses.tosave, true);\n                            injectImageCss(\n                                tempTranslations[key].editorType,\n                                tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n                        } else {\n                            // Oh no! There has been an error with the request!\n                            setIconStatus(key, Selectors.statuses.failed, false);\n                        }\n                    } else if (typeof xhr.readyState !== 'number') {\n                        // Workaround for the Adaptable theme that did change the return type of xhr.readyState.\n                        log('ERROR: Some JS library in your Moodle install ' +\n                            'are overriding the core functionalities in a wrong way.' +\n                            'xhr.readyState MUST be of type \"number\"');\n                    }\n                };\n                xhr.open(\"POST\", config.deeplurl);\n                xhr.send(formData);\n            }\n\n        };\n\n        /**\n         * Inject css to highlight ALT text of image not loaded because of @@PLUGINFILE@@.\n         *\n         * @param {string} editorType\n         * @param {object} editor\n         */\n        const injectImageCss = (editorType, editor) => {\n            // Prepare css to inject in iframe editors\n            const css = document.createElement('style');\n            css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n            if (editorType === \"iframe\") {\n                let editorschildrens = Array.from(editor.parentElement.children);\n                let found = false;\n                for (let j in editorschildrens) {\n                    let e = editorschildrens[j];\n                    if (e.innerText === css.innerText) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    editor.parentElement.appendChild(css);\n                }\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {Integer} key Translation Key\n         * @todo MDL-0 get the editor from moodle db in the php.\n         */\n        const findEditor = (key) => {\n            let e = document.querySelector(Selectors.editors.types.basic\n                .replace(\"<KEY>\", key));\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(mainEditorType) === -1) {\n                    warn('Unsupported editor ' + mainEditorType);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, mainEditorType);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        log(`Editor not found: ${mainEditorType} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = document.querySelector(\n                        Selectors.editors.types.atto\n                            .replaceAll(\"<KEY>\", key));\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = document.querySelector(Selectors.editors.types.tiny\n                        .replaceAll(\"<KEY>\", key))\n                        .contentWindow.tinymce;\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = document.querySelector(Selectors.editors.types.other\n                        .replaceAll(\"<KEY>\", key));\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        const getParentRow = (node) => {\n            return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Multilang button handler\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = keyidToKey(keyid);\n            let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n            let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n            source.classList.toggle(\"show\");\n            multilang.classList.toggle(\"show\");\n        };\n        /**\n         * Json helper\n         * @param {string} s\n         * @param {string} sep\n         * @returns {string}\n         */\n        const toJsonArray = (s, sep = \",\") => {\n            return JSON.stringify(s.split(sep));\n        };\n        /**\n         * Simple helper to manage selectors\n         * @param {string} s\n         * @param {string} k\n         * @returns {*}\n         */\n        const replaceKey = (s, k) => {\n            return s.replace(\"<KEY>\", k);\n        };\n        /**\n         * Transforms a keyid to a key.\n         * @param {string} k\n         * @returns {`${*}[${*}][${*}]`}\n         */\n        const keyidToKey = (k) => {\n            let m = k.match(/^(.+)-(.+)-(.+)$/i);\n            return `${m[1]}[${m[2]}][${m[3]}]`;\n        };\n        /*\n        Const getKeyFromComponents = (id, field, table) => {\n            return `${table}[${id}][${field}]`;\n        };\n        */\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n            document\n                .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    let key = ckBox.getAttribute(\"data-key\");\n                    let results = getCount(key);\n                    wrdsc += results.wordCount;\n                    cwos += results.charNumWithOutSpace;\n                    cws += results.charNumWithSpace;\n                });\n            const wordCount = document.querySelector(Selectors.statuses.wordcount);\n            const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n            const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n            let current = cwos + usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n            if (current >= usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = stripHTMLTags(fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Helper function to decode the PHP base64 encoded source.\n         * @param {string} encoded\n         * @returns {string}\n         */\n        const fromBase64 = (encoded) => {\n            const binString = atob(encoded); // Maybe we should import js-base64 instead.\n            const bytes = Uint8Array.from(binString, (m) => m.codePointAt(0));\n            return new TextDecoder().decode(bytes);\n        };\n        /**\n         * Helper function for the decode html escaped content.\n         * @param {string} encodedStr\n         * @returns {string}\n         */\n        const decodeHTML = (encodedStr) => {\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(encodedStr, 'text/html');\n            return doc.documentElement.textContent;\n        };\n        /**\n         * Helper to remove HTML from strings.\n         *\n         * @param {string} str\n         * @returns {string|string}\n         */\n        const stripHTMLTags = (str) => {\n            let doc = new DOMParser().parseFromString(str, 'text/html');\n            return doc.body.textContent || \"\";\n        };\n\n        return {\n            init: init\n        };\n    }\n);\n"],"names":["define","Ajax","Selectors","Modal","Str","Tokeniser","getString","get_string","escapeReplacementString","postprocess","preprocess","tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","saveAllModal","escapePatterns","log","_len","arguments","length","a","Array","_key","warn","_len2","_key2","info","_len3","_key3","error","_len4","_key4","debug","showErrorMessageForEditor","key","message","parent","document","querySelector","editors","multiples","editorsWithKey","replace","errorMsg","createElement","id","classList","innerHTML","appendChild","hideErrorMessage","alertChild","removeChild","launchModal","async","create","title","body","show","errorMessageItem","editor","add","setIconStatus","statuses","failed","handleAjaxUpdateDBResponse","data","forEach","item","undefined","keyid","then","s","type","removeOnClose","catch","keyidToKey","htmlElement","replaceKey","multilangTextarea","textAreas","indexOfSET","indexOf","slice","successMessageItem","element","success","setTimeout","multilangPill","multilang","prevTransStatus","contains","remove","saved","text","checkBoxesWithKey","checked","saveTranslations","keys","actions","validatorBtn","getAttribute","tosave","push","prepareDbUpdatdeItem","call","methodname","args","done","isVisible","hide","fail","err","toString","saveTranslation","textTranslated","decodeHTML","getEditorText","sourceText","sourceTokenised","source","tokens","getSourceText","fieldText","tid","field","table","parseInt","getElementAttributes","textTosave","getupdatedtext","courseid","fieldtext","translation","sourceItemLang","isFirstTranslation","isSourceOther","tagPatterns","other","target","concat","langsItems","fullContent","additionalUpdate","manipulatedText","targetReg","RegExp","match","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","onItemChecked","e","toggleStatus","countWordAndChar","initTempForKey","blank","sourceSelector","sourcetexts","sourceTextEncoded","multilangRawTextEncoded","fromBase64","tokenised","editorSettings","findEditor","sourcelangs","value","editorType","status","tokenizedText","wait","expressions","_tempTranslations$key","_tempTranslations$key2","dataset","totranslate","isBtn","icon","setAttribute","statusstrings","showRows","selector","selected","items","querySelectorAll","allSelected","selectAllBtn","k","toggleRowVisibility","toggleAutotranslateButton","row","switchTarget","url","URL","window","location","href","searchParams","set","switchSource","doAutotranslate","disabled","checkedCheckBoxes","ckBox","getTranslation","prepareFormData","formData","URLSearchParams","FormData","Object","entries","prepareAdvancedSettings","_document$querySelect","settings","LATEX","escapeLatex","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","target_lang","toUpperCase","auth_key","apikey","_ref","v","append","source_lang","prepareTranslation","_ref2","_XMLHttpRequest$DONE","readystateDone","XMLHttpRequest","DONE","staus","xhr","responseType","onreadystatechange","readyState","JSON","parse","responseText","response","tr","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","from","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","toggleAllCheckboxes","i","getParentRow","node","closest","parentrow","onToggleMultilang","multilangs","toggle","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","raw","trimmedVal","stripHTMLTags","trim","encoded","binString","atob","bytes","Uint8Array","codePointAt","TextDecoder","decode","encodedStr","DOMParser","parseFromString","documentElement","str","init","cfg","console","bind","userPrefs","registerUI","saveAll","sourceSwitcher","targetSwitcher","autoTranslateBtn","checkBoxes","addEventListener","showUpdated","updated","showNeedUpdate","needsupdate","sourceselect","toggleMultilang","currentlang","lang","allKeys","map","validatorsBtns","keyValidator","currentStatus"],"mappings":"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"}