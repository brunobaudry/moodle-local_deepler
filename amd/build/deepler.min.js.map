{"version":3,"file":"deepler.min.js","sources":["../src/deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from 'core/ajax';\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\nimport {get_string as getString} from \"core/str\";\nimport {escapeReplacementString, postprocess, preprocess} from \"./tokeniser\";\n\n\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\nlet usage = {};\nlet format = new Intl.NumberFormat();\nlet saveAllModal = {};\nlet batchSaving = 0;\nconst escapePatterns = {};\nlet log = (...a) => {\n    return a;\n};\nlet warn = (...a) => {\n    return a;\n};\nlet info = (...a) => {\n    return a;\n};\nlet error = (...a) => {\n    return a;\n};\nconst debug = {\n    NONE: 0,\n    MINIMAL: 5,\n    NORMAL: 15,\n    ALL: 30719,\n    DEVELOPER: 32767\n};\n\nconst registerEventListeners = () => {\n    document.addEventListener('change', e => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            const allKeys = Array.from(selected).map((e) => e.dataset.key);\n            log(allKeys);\n            if (allKeys.length > 0) {\n                launchModal();\n                saveAllBtn.hidden = saveAllBtn.disabled = true;\n                saveTranslations(allKeys);\n            }\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => {\n            tempTranslations[node.dataset.key] = {};\n        });\n    } catch (e) {\n        if (config.debug) {\n            error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI.\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    log('init');\n    config = cfg;\n    usage = config.usage;\n    // Preparing the debugger.\n    if (config.debug === debug.MINIMAL) {\n        error = window.console.error.bind(window.console);\n    } else if (config.debug === debug.NORMAL) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n    } else if (config.debug === debug.ALL) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n        info = window.console.info.bind(window.console);\n    } else if (config.debug === debug.DEVELOPER) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n        info = window.console.info.bind(window.console);\n        log = window.console.log.bind(window.console);\n    }\n    info(\"DEEPLER loaded\");\n    log(config);\n    warn(\"Deepl's usage\", usage);\n    error(\"testing developper level\");\n    mainEditorType = config.userPrefs;\n    // Setup.\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            const key = _this.dataset.keyValidator;\n            const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n            let currentStatus = icon.getAttribute('data-status');\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                error(`Translation key \"${key}\" is undefined `);\n            } else if (currentStatus === Selectors.statuses.tosave) {\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n    showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n    showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n};\nconst showErrorMessageForEditor = (key, message) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    const errorMsg = document.createElement('div');\n    errorMsg.id = 'local_deepler__errormsg';\n    errorMsg.classList = ['alert alert-danger'];\n    errorMsg.innerHTML = message;\n    parent.appendChild(errorMsg);\n};\nconst hideErrorMessage = (key) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    let alertchild = parent.querySelector('.alert-danger');\n    if (alertchild) {\n        parent.removeChild(alertchild);\n    }\n};\n/**\n * Opens a modal infobox to warn user trunks of fields are saving.\n * @returns {Promise<void>}\n */\nconst launchModal = async () => {\n    // ...\n    saveAllModal = await Modal.create({\n        title: getString('saveallmodaltitle', 'local_deepler'),\n        body: getString('saveallmodalbody', 'local_deepler'),\n    });\n    saveAllModal.show();\n};\n/**\n * Displays success message and icon.\n *\n * @param {String} key\n * @param {HTMLElement} element\n */\nconst successMessage = (key, element) => {\n    element.classList.add(\"local_deepler__success\");\n    // Add saved indicator\n    setIconStatus(key, Selectors.statuses.success);\n    // Remove success message after a few seconds\n    setTimeout(() => {\n        let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n        let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n        prevTransStatus.classList = \"badge badge-pill badge-success\";\n        if (multilangPill.classList.contains(\"disabled\")) {\n            multilangPill.classList.remove('disabled');\n        }\n        setIconStatus(key, Selectors.statuses.saved);\n    });\n};\n/**\n * Displays error message and icon.\n *\n * @param {String} key\n * @param {HTMLElement} editor\n * @param {String} err\n */\nconst errorMessage = (key, editor, err) => {\n    editor.classList.add(\"local_deepler__error\");\n    let hintError = '';\n    // Most of the time DB error will come from translations starting to be too long.\n    getString('errortoolong', 'local_deepler').then((s) => {\n        hintError = s;\n        setIconStatus(key, Selectors.statuses.failed);\n        // Limit the size of the error message if there is a long SQL query in it.\n        const setIndex = err.indexOf(\"SET\") === -1 ? 24 : err.indexOf(\"SET\");\n        let message = err.slice(0, setIndex) + '<br/>' + hintError;\n        showErrorMessageForEditor(key, message);\n    });\n};\nconst getEditorText = (editor) => {\n    let text = editor.innerHTML;\n    if (mainEditorType === 'textarea') {\n        text = decodeHTML(text);\n    }\n    return text;\n};\n\nconst getSourceText = (key) => {\n    const sourceTokenised = tempTranslations[key].source;\n    return postprocess(sourceTokenised, tempTranslations[key].tokens);\n};\nconst getElementAttributes = (element) => {\n    return {\n        id: parseInt(element.getAttribute(\"data-id\")),\n        tid: element.getAttribute(\"data-tid\"),\n        table: element.getAttribute(\"data-table\"),\n        field: element.getAttribute(\"data-field\")\n    };\n};\nconst handleAjaxUpdateDBResponse = (data) => {\n    data.forEach((item) => {\n        log(item, Date(item.t_lastmodified * 1000));\n        const key = keyidToKey(item.keyid);\n        const htmlElement = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n        const multilangTextarea = document.querySelector(replaceKey(Selectors.editors.multiples.textAreas, key));\n        if (item.t_lastmodified === -1) {\n            errorMessage(key, tempTranslations[key].editor, item.text);\n        } else {\n            successMessage(key, htmlElement);\n            multilangTextarea.innerHTML = item.text;\n            // Deselect the checkbox.\n            document.querySelector(Selectors.editors.multiples.checkBoxesWithKey.replace('<KEY>', key))\n                .checked = false;\n        }\n    });\n};\n/**\n * Save batch translations.\n *\n * @param {Array} keys\n */\nconst saveTranslations = (keys) => {\n\n    const data = [];\n    keys.forEach((key) => {\n            const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n            const currentStatus = icon.getAttribute('data-status');\n            if (currentStatus === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                data.push(prepareDbUpdatdeItem(key));\n            }\n        }\n    );\n    ajax.call([\n        {\n            methodname: \"local_deepler_update_translation\",\n            args: {\n                data: data,\n            },\n            done: (data) => {\n                if (saveAllModal !== null && saveAllModal.isVisible) {\n                    saveAllModal.hide();\n                }\n                if (data.length > 0) {\n                    handleAjaxUpdateDBResponse(data);\n                } else {\n                    keys.forEach((key) => {\n                        errorMessage(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                    });\n                }\n            },\n            fail: (err) => {\n                // An error occurred\n                keys.forEach((key) => {\n                    errorMessage(key, tempTranslations[key].editor, err.toString());\n                });\n            },\n        }\n    ]);\n};\n/**\n * Save single translation.\n *\n * @param {string} key\n */\nconst saveTranslation = (key) => {\n    hideErrorMessage(key);\n    ajax.call([\n        {\n            methodname: \"local_deepler_update_translation\",\n            args: {\n                data: [prepareDbUpdatdeItem(key)],\n            },\n            done: (data) => {\n                if (saveAllModal !== null && saveAllModal.isVisible) {\n                    batchSaving--;\n                    log('batchSaving', batchSaving);\n                    if (batchSaving === 0) {\n                        saveAllModal.hide();\n                    }\n                }\n                if (data.length > 0) {\n                    handleAjaxUpdateDBResponse(data);\n                } else {\n                    errorMessage(key, tempTranslations[key].editor, 'Something went wrong with the data');\n                }\n            },\n            fail: (err) => {\n                // An error occurred\n                errorMessage(key, tempTranslations[key].editor, err.toString());\n            },\n        }\n    ]);\n};\nconst prepareDbUpdatdeItem = (key) => {\n    const editor = tempTranslations[key].editor;\n    const textTranslated = getEditorText(editor);\n    const sourceText = getSourceText(key);\n    const fieldText = tempTranslations[key].fieldText;\n    const element = document.querySelector(replaceKey(Selectors.editors.multiples.editorsWithKey, key));\n    const {id, tid, field, table} = getElementAttributes(element);\n    const textTosave = getupdatedtext(fieldText, textTranslated, sourceText, tempTranslations[key].sourceLang);\n    return {\n        courseid: config.courseid,\n        id: id,\n        tid: tid,\n        field: field,\n        table: table,\n        text: textTosave\n    };\n};\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database including all mlang tag if any.\n * @param {string} translation Translated Text to update.\n * @param {string} source Original text translated from.\n * @param {string} sourceItemLang The source language code\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n    const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n    const isSourceOther = sourceItemLang === sourceLang;\n    const tagPatterns = {\n        \"other\": \"({mlang other)(.*?){mlang}\",\n        \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n        \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n    };\n    const langsItems = {\n        \"fullContent\": fieldtext,\n        \"other\": `{mlang other}${source}{mlang}`,\n        \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n        \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n    };\n    if (isFirstTranslation) {\n        // No mlang tag : easy.\n        if (isSourceOther) {\n            return langsItems.other + langsItems.target;\n        } else {\n            return langsItems.other + langsItems.source + langsItems.target;\n        }\n    }\n    // Alreaddy mlang tag-s.\n    return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n};\n\n/**\n * Update Textarea when there was mlang tags.\n * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n * @param {boolean} isSourceOther\n * @param {string} tagPatterns\n * @param {string} langsItems\n * @returns {string} {string}\n */\nconst additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n    let manipulatedText = langsItems.fullContent;\n    // Do we have a TARGET tag already ?\n    const targetReg = new RegExp(tagPatterns.target, \"sg\");\n    const hasTagTarget = manipulatedText.match(targetReg);\n    if (hasTagTarget) {\n        // Yes replace it.\n        manipulatedText = manipulatedText.replace(targetReg, escapeReplacementString(langsItems.target));\n    } else {\n        // No, add it at the end.\n        const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n        manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n            langsItems.target,\n            manipulatedText.slice(lastMlangClosingTagEnd)\n        ].join('');\n    }\n    // Do we have a OTHER tag already ?\n    const otherReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagOther = manipulatedText.match(otherReg);\n    // Do we have a SOURCE tag already ?\n    const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagSource = manipulatedText.match(sourceReg);\n    if (isSourceOther) {\n        // Whatever was the {mlang other} tag language we need to replace it by this source.\n        manipulatedText = manipulatedText.replace(otherReg, escapeReplacementString(langsItems.other));\n        if (hasTagSource) {\n            // And remove the {mlang source} tag if found.\n            manipulatedText.replace(sourceReg, \"\");\n        }\n    } else {\n        if (!hasTagOther) {\n            // We still add this source as otherTag of the so that it can be replaced further.\n            const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n            manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                langsItems.other,\n                manipulatedText.slice(firstMlangClosingTagEnd)\n            ].join('');\n        }\n        if (!hasTagSource) {\n            // Add the {mlang source} tag if not found.\n            manipulatedText.replace(sourceReg, escapeReplacementString(langsItems.source));\n        }\n    }\n    return manipulatedText;\n};\nconst onItemChecked = (e) => {\n    log(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n    const key = e.target.getAttribute('data-key');\n    if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n        toggleStatus(key, e.target.checked);\n        countWordAndChar();\n    } else {\n        initTempForKey(key, false);\n    }\n};\nconst initTempForKey = (key, blank) => {\n\n    // Get the source text\n    const sourceSelector = Selectors.sourcetexts.keys.replace(\"<KEY>\", key);\n    const sourceTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-sourcetext-raw\");\n    const multilangRawTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-filedtext-raw\");\n    const sourceText = fromBase64(sourceTextEncoded);\n    const fieldText = fromBase64(multilangRawTextEncoded);\n    const tokenised = preprocess(sourceText, escapePatterns, escapePatterns);\n    // Store the settings.\n    const editorSettings = findEditor(key);\n    const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n    // We make sure to initialize the record.\n    tempTranslations[key] = {\n        'editorType': null,\n        'editor': null,\n        'source': '',\n        'sourceLang': '',\n        'fieldText': '',\n        'status': '',\n        'translation': '',\n        'tokens': []\n    };\n    if (!blank) {\n        if (editorSettings === null || editorSettings.editor === null) {\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, 'Original editor not found...');\n        } else {\n            // Initialize status for the source content.\n            tempTranslations[key] = {\n                'editorType': editorSettings.editorType,\n                'editor': editorSettings.editor,\n                'source': tokenised.tokenizedText,\n                'sourceLang': sourceLang,\n                'fieldText': fieldText,\n                'status': Selectors.statuses.wait,\n                'translation': '',\n                'tokens': tokenised.expressions\n            };\n        }\n    }\n};\nconst toggleStatus = (key, checked) => {\n    const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n                initTempForKey(key, false);\n            } else {\n                initTempForKey(key, true);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(key, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(key, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\nconst setIconStatus = (key, s = Selectors.statuses.wait, isBtn = false) => {\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n            icon.classList.add('btn-outline-secondary');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n            icon.classList.remove('btn-outline-secondary');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', s);\n};\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    const items = document.querySelectorAll(selector);\n    const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        try {\n            item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = allSelected && selected;\n            toggleStatus(k, false);\n        } catch (e) {\n            log(`${k} translation is disalbled`);\n        }\n\n    });\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    saveAllBtn.hidden = saveAllBtn.disabled = false;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            if (tempTranslations[key].editor !== null) {\n                getTranslation(key);\n            }\n        });\n};\n/**\n *\n * @returns {{}}\n */\nconst prepareAdvancedSettings = () => {\n    info('prepareAdvancedSettings');\n    let settings = {};\n    escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n    escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n    settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n    settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n    settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n    settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n    settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n    settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n    settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n    settings.non_splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n    settings.splitting_tags = toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n    settings.ignore_tags = toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n    settings.target_lang = targetLang.toUpperCase();\n    settings.auth_key = config.apikey;\n    return settings;\n};\nconst prepareTranslation = (key) => {\n    return {\n        text: tempTranslations[key].source,\n        source_lang: tempTranslations[key].sourceLang,\n    };\n};\n/**\n * Prepare the params for XHR call.\n *\n * @param {string} key\n * @param {boolean} url\n * @returns {URLSearchParams|FormData} Object to use in XHR.\n */\nconst prepareFormData = (key, url = true) => {\n    let formData = url ? new URLSearchParams() : new FormData();\n    Object.entries(prepareAdvancedSettings()).forEach(([k, v]) => {\n        formData.append(k, v);\n    });\n    initTempForKey(key, false); // Reset temp translation in case setting changed.\n    Object.entries(prepareTranslation(key)).forEach(([k, v]) => {\n        formData.append(k, v);\n    });\n    return formData;\n};\n\n\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    const readystateDone = XMLHttpRequest.DONE ?? 4; // Workaround if undefined when JS is cached, need further investigation.\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key].staus = Selectors.statuses.wait;\n    // Build formData\n    let formData = prepareFormData(key);\n    // log(tempTranslations);\n    if (tempTranslations[key].editor === null) {\n        error(`${key} no editor found :((`);\n    } else {\n        info(\"Send deepl:\", formData);\n        // Update the translation\n        let xhr = new XMLHttpRequest();\n        xhr.responseType = 'json';\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === readystateDone) {\n                const status = xhr.status;\n                if (status === 0 || (status >= 200 && status < 400)) {\n                    // The request has been completed successfully\n                    log(tempTranslations);\n                    let data = xhr.responseType === 'text' || xhr.responseType === '' ? JSON.parse(xhr.responseText) : xhr.response;\n                    info(\"From deepl:\", data);\n                    let tr = postprocess(data.translations[0].text, tempTranslations[key].tokens, escapePatterns);\n                    // Display translation\n                    log(tr);\n                    tempTranslations[key].editor.innerHTML = tr;\n                    // Store the translation in the global object\n                    tempTranslations[key].translation = tr;\n                    setIconStatus(key, Selectors.statuses.tosave, true);\n                    injectImageCss(\n                        tempTranslations[key].editorType,\n                        tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n                } else {\n                    // Oh no! There has been an error with the request!\n                    setIconStatus(key, Selectors.statuses.failed, false);\n                }\n            } else if (typeof xhr.readyState !== 'number') {\n                // Workaround for the Adaptable theme that did change the return type of xhr.readyState.\n                log('ERROR: Some JS library in your Moodle install are overriding the core functionalities in a wrong way.' +\n                    'xhr.readyState MUST be of type \"number\"');\n            }\n        };\n        xhr.open(\"POST\", config.deeplurl);\n        xhr.send(formData);\n    }\n\n};\n/**\n *\n * @param {Integer} editorSettings\n * */\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {string} editorType\n * @param {object} editor\n */\nconst injectImageCss = (editorType, editor) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorType === \"iframe\") {\n        let editorschildrens = Array.from(editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * @todo get the editor from moodle db in the php.\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        let r = null;\n        let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n        if (editorTab.indexOf(mainEditorType) === -1) {\n            warn('Unsupported editor ' + mainEditorType);\n        } else {\n            // First let's try the current editor.\n            try {\n                r = findEditorByType(key, mainEditorType);\n            } catch (error) {\n                // Content was edited by another editor.\n                log(`Editor not found: ${mainEditorType} for key ${key}`);\n            }\n        }\n        return r;\n    } else {\n        return {editor: e, editorType: et};\n    }\n};\n/**\n * @param {string} key\n * @param {object} editorType\n * @returns {{editor: object, editorType: string}}\n */\nconst findEditorByType = (key, editorType) => {\n    let et = 'basic';\n    let ed = null;\n    switch (editorType) {\n        case \"atto\" :\n            et = 'iframe';\n            ed = document.querySelector(\n                Selectors.editors.types.atto\n                    .replaceAll(\"<KEY>\", key));\n            break;\n        case \"tiny\":\n            et = 'iframe';\n            ed = document.querySelector(Selectors.editors.types.tiny\n                .replaceAll(\"<KEY>\", key))\n                .contentWindow.tinymce;\n            break;\n        case 'marklar':\n        case \"textarea\" :\n            ed = document.querySelector(Selectors.editors.types.other\n                .replaceAll(\"<KEY>\", key));\n            break;\n    }\n    return {editor: ed, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/*\nconst getKeyFromComponents = (id, field, table) => {\n    return `${table}[${id}][${field}]`;\n};\n*/\n/**\n * Launch countWordAndChar\n */\nconst countWordAndChar = () => {\n    let wrdsc = 0;\n    let cws = 0;\n    let cwos = 0;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n    const wordCount = document.querySelector(Selectors.statuses.wordcount);\n    const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n    const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n    const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n    const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n    const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n    let current = cwos + usage.character.count;\n    wordCount.innerText = wrdsc;\n    charWithSpace.innerText = cws;\n    charWOSpace.innerText = cwos;\n    deeplUseSpan.innerText = format.format(current);\n    deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n    if (current >= usage.character.limit) {\n        parent.classList.remove('alert-success');\n        parent.classList.add('alert-danger');\n    } else {\n        parent.classList.add('alert-success');\n        parent.classList.remove('alert-danger');\n    }\n};\n/**\n * @param {string} key\n * @return {object}\n */\nconst getCount = (key) => {\n    const item = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    const raw = item.getAttribute(\"data-sourcetext-raw\");\n    const sourceText = stripHTMLTags(fromBase64(raw));\n    return countChars(sourceText);\n};\n/**\n *\n * @param {String} val\n * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n */\nconst countChars = (val) => {\n    const trimmedVal = val.trim();\n    const withSpace = trimmedVal.length;\n    const withOutSpace = trimmedVal.replace(/\\s+/g, '').length;\n    const wordsCount = (trimmedVal.match(/\\S+/g) || []).length;\n    return {\n        \"wordCount\": wordsCount,\n        \"charNumWithSpace\": withSpace,\n        \"charNumWithOutSpace\": withOutSpace\n    };\n};\n/**\n * Helper function to decode the PHP base64 encoded source.\n * @param {string} encoded\n * @returns {string}\n */\nconst fromBase64 = (encoded) => {\n    const binString = atob(encoded); // Maybe we should import js-base64 instead.\n    const bytes = Uint8Array.from(binString, (m) => m.codePointAt(0));\n    return new TextDecoder().decode(bytes);\n};\n/**\n * Helper function for the decode html escaped content.\n * @param {string} encodedStr\n * @returns {string}\n */\nconst decodeHTML = (encodedStr) => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(encodedStr, 'text/html');\n    return doc.documentElement.textContent;\n};\n/**\n * Helper to remove HTML from strings.\n *\n * @param {string} str\n * @returns {string|string}\n */\nconst stripHTMLTags = (str) => {\n    let doc = new DOMParser().parseFromString(str, 'text/html');\n    return doc.body.textContent || \"\";\n};\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","saveAllModal","batchSaving","escapePatterns","log","a","warn","info","error","debug","cfg","window","console","bind","userPrefs","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","sourceselect","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","selected","checkedCheckBoxes","allKeys","Array","from","map","length","launchModal","hidden","disabled","saveTranslations","toggleAutotranslateButton","validatorsBtns","item","keyValidator","currentStatus","replaceKey","validatorBtn","getAttribute","tosave","saveTranslation","showErrorMessageForEditor","parent","editors","multiples","editorsWithKey","replace","errorMsg","createElement","id","classList","innerHTML","appendChild","hideErrorMessage","alertchild","removeChild","async","Modal","errorMessage","editor","err","add","hintError","then","s","setIconStatus","failed","setIndex","indexOf","slice","handleAjaxUpdateDBResponse","data","Date","t_lastmodified","keyidToKey","keyid","htmlElement","multilangTextarea","textAreas","text","element","success","setTimeout","multilangPill","multilang","prevTransStatus","contains","remove","saved","successMessage","checkBoxesWithKey","keys","push","prepareDbUpdatdeItem","call","methodname","args","done","isVisible","hide","fail","toString","textTranslated","decodeHTML","getEditorText","sourceText","sourceTokenised","source","tokens","getSourceText","fieldText","tid","field","table","parseInt","getElementAttributes","textTosave","getupdatedtext","courseid","fieldtext","translation","sourceItemLang","isFirstTranslation","isSourceOther","langsItems","other","additionalUpdate","tagPatterns","manipulatedText","fullContent","targetReg","RegExp","match","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","toggleStatus","countWordAndChar","initTempForKey","blank","sourceSelector","sourcetexts","sourceTextEncoded","multilangRawTextEncoded","fromBase64","tokenised","editorSettings","findEditor","sourcelangs","editorType","tokenizedText","wait","expressions","status","totranslate","isBtn","icon","setAttribute","selector","items","allSelected","k","toggleRowVisibility","row","url","URL","location","href","searchParams","set","ckBox","getTranslation","prepareAdvancedSettings","settings","LATEX","escapeLatex","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","target_lang","toUpperCase","auth_key","apikey","prepareTranslation","source_lang","readystateDone","XMLHttpRequest","DONE","staus","formData","FormData","URLSearchParams","Object","entries","_ref","v","append","_ref2","prepareFormData","xhr","responseType","onreadystatechange","readyState","JSON","parse","responseText","response","tr","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","i","getParentRow","parentrow","multilangs","toggle","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","raw","stripHTMLTags","countChars","val","trimmedVal","trim","withSpace","withOutSpace","encoded","binString","atob","bytes","Uint8Array","codePointAt","TextDecoder","decode","encodedStr","DOMParser","parseFromString","documentElement","str"],"mappings":"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"}