{"version":3,"file":"deepler.min.js","sources":["../src/deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\n\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\nlet usage = {};\nlet format = new Intl.NumberFormat();\nlet saveAllModal = {};\nlet batchSaving = 0;\n\nconst registerEventListeners = () => {\n    document.addEventListener('change', e => {\n        window.console.info('change');\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            selected.forEach((e) => {\n                const key = e.dataset.key;\n                if (tempTranslations[key].translation !== \"\") {\n                    batchSaving++;\n                    saveTranslation(key);\n                } else {\n                    window.console.warn(\"not translated \" + key);\n                }\n            });\n            if (batchSaving > 0) {\n                launchModal();\n                saveAllBtn.hidden = saveAllBtn.disabled = true;\n            }\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => (tempTranslations[node.dataset.key] = {}));\n    } catch (e) {\n        if (config.debug) {\n            window.console.error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI.\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    config = cfg;\n    config.debug = 0;\n    usage = config.usage;\n    if (config.debug > 0) {\n        window.console.info(\"debugging deepler\");\n        window.console.info(config);\n        window.console.info(usage);\n    }\n    mainEditorType = config.userPrefs;\n    // Setup.\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            let key = _this.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                window.console.warn(`Transaltion key \"${key}\" is undefined `,);\n            } else {\n                window.console.log(tempTranslations[key]);\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n    showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n    showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n};\nconst showErrorMessageForEditor = (key, message) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    const errorMsg = document.createElement('div');\n    errorMsg.classList = ['alert alert-danger'];\n    errorMsg.innerHTML = message;\n    parent.appendChild(errorMsg);\n};\n/**\n * Opens a modal infobox to warn user trunks of fields are saving.\n * @returns {Promise<void>}\n */\nconst launchModal = async () => {\n    // ...\n    saveAllModal = await Modal.create({\n        title: \"Saving translations to the database\",\n        body: '<div class=\"spinner-border text-primary\" role=\"status\">' +\n            '  <span class=\"sr-only\">Saving...</span>\\n' +\n            '</div>' +\n            '<p>Please wait ...<br/>When all fields are saved in the database,<br/>I will automatically close</p>' +\n            '<p>If you are impatient, and want to close this window,<br/>make sure all selected transaltion\\'s statuses are ' +\n            '<i class=\"fa fa-database\" aria-hidden=\"true\"></i></p>',\n    });\n    saveAllModal.show();\n};\n/**\n * Save Translation to Moodle\n * @param  {String} key Data Key\n */\nconst saveTranslation = (key) => {\n\n    // Get processing vars.\n    let editor = tempTranslations[key].editor;\n    let text = editor.innerHTML; // We keep the editors text in case translation is edited\n    let sourceText = tempTranslations[key].source;\n    let element = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n    if (config.debug > 0) {\n        window.console.info(fielddata);\n    }\n    // Get the latest data to parse text against.\n    ajax.call([\n        {\n            methodname: \"local_deepler_get_field\",\n            args: {\n                data: [fielddata],\n            },\n            done: (data) => {\n                // The latests field text so multiple translators can work at the same time\n                let fieldtext = data[0].text;\n\n                // Field text exists\n                if (data.length > 0) {\n                    // Updated hidden textarea with updatedtext\n                    let textarea = document.querySelector(\n                        Selectors.editors.multiples.textAreas\n                            .replace(\"<KEY>\", key));\n                    // Get the updated text\n                    let updatedtext = getupdatedtext(fieldtext, text, sourceText, tempTranslations[key].sourceLang);\n\n                    // Build the data object\n                    let tdata = {};\n                    tdata.courseid = config.courseid;\n                    tdata.id = parseInt(id);\n                    tdata.tid = tid;\n                    tdata.table = table;\n                    tdata.field = field;\n                    tdata.text = updatedtext;\n                    if (config.debug > 0) {\n                        window.console.info(updatedtext);\n                        window.console.info(tdata);\n                    }\n                    // Success Message\n                    const successMessage = () => {\n                        element.classList.add(\"local_deepler__success\");\n                        // Add saved indicator\n                        setIconStatus(key, Selectors.statuses.success);\n                        // Remove success message after a few seconds\n                        setTimeout(() => {\n                            let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                            let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                            prevTransStatus.classList = \"badge badge-pill badge-success\";\n                            if (multilangPill.classList.contains(\"invisible\")) {\n                                multilangPill.classList.remove('invisible');\n                            }\n                            setIconStatus(key, Selectors.statuses.saved);\n                        });\n                    };\n                    // Error Mesage\n                    const errorMessage = (error) => {\n                        editor.classList.add(\"local_deepler__error\");\n                        setIconStatus(key, Selectors.statuses.failed);\n                        const setIndex = error.debuginfo.indexOf(\"SET\") === -1 ? 15 : error.debuginfo.indexOf(\"SET\");\n                        let message = error.message + '<br/>' + error.debuginfo.slice(0, setIndex) + '...';\n                        if (config.debug > 0) {\n                            message = error.debuginfo;\n                        }\n                        showErrorMessageForEditor(key, message);\n                    };\n                    // Submit the request\n                    ajax.call([\n                        {\n                            methodname: \"local_deepler_update_translation\",\n                            args: {\n                                data: [tdata],\n                            },\n                            done: (data) => {\n                                // Print response to console log\n                                if (config.debug > 0) {\n                                    window.console.info(\"ws: \", key, data);\n                                }\n                                // If we launche saving by the save all button, manage the modal infobox.\n                                if (saveAllModal.isVisible()) {\n                                    batchSaving--;\n                                    if (batchSaving === 0) {\n                                        saveAllModal.hide();\n                                    }\n                                }\n\n                                // Display success message\n                                if (data.length > 0) {\n                                    successMessage();\n                                    textarea.innerHTML = data[0].text;\n\n                                    // Update source lang if necessary\n                                    if (config.currentlang === config.lang) {\n                                        document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                            .innerHTML = text;\n                                    }\n                                } else {\n                                    // Something went wrong with the data\n                                    errorMessage();\n                                }\n                            },\n                            fail: (error) => {\n                                // An error occurred\n                                errorMessage(error);\n                            },\n                        },\n                    ]);\n                } else {\n                    // Something went wrong with field retrieval\n                    window.console.warn(data);\n                }\n            },\n            fail: (error) => {\n                // An error occurred\n                window.console.warn(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database including all mlang tag if any.\n * @param {string} translation Translated Text to update.\n * @param {string} source Original text translated from.\n * @param {string} sourceItemLang The source language code\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n    const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n    const isSourceOther = sourceItemLang === sourceLang;\n    const tagPatterns = {\n        \"other\": \"({mlang other)(.*?){mlang}\",\n        \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n        \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n    };\n    const langsItems = {\n        \"fullContent\": fieldtext,\n        \"other\": `{mlang other}${source}{mlang}`,\n        \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n        \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n    };\n    if (isFirstTranslation) {\n        // No mlang tag : easy.\n        if (isSourceOther) {\n            return langsItems.other + langsItems.target;\n        } else {\n            return langsItems.other + langsItems.source + langsItems.target;\n        }\n    }\n    // Alreaddy malang tag-s.\n    return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n};\n\n/**\n * Update Textarea when there was mlang tags.\n * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n * @param {boolean} isSourceOther\n * @param {string} tagPatterns\n * @param {string} langsItems\n * @returns {string} {string}\n */\nconst additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n    let manipulatedText = langsItems.fullContent;\n    // Do we have a TARGET tag already ?\n    const targetReg = new RegExp(tagPatterns.target, \"sg\");\n    const hasTagTarget = manipulatedText.match(targetReg);\n    if (hasTagTarget) {\n        // Yes replace it.\n        manipulatedText = manipulatedText.replace(targetReg, langsItems.target);\n    } else {\n        // No, add it at the end.\n        const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n        manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n            langsItems.target,\n            manipulatedText.slice(lastMlangClosingTagEnd)\n        ].join('');\n    }\n    // Do we have a OTHER tag already ?\n    const otherReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagOther = manipulatedText.match(otherReg);\n    // Do we have a SOURCE tag already ?\n    const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagSource = manipulatedText.match(sourceReg);\n    if (isSourceOther) {\n        // Whatever was the {mlang other} tag language we need to replace it by this source.\n        manipulatedText = manipulatedText.replace(otherReg, langsItems.other);\n        if (hasTagSource) {\n            // And remove the {mlang source} tag if found.\n            manipulatedText.replace(sourceReg, \"\");\n        }\n    } else {\n        if (!hasTagOther) {\n            // We still add this source as otherTag of the so that it can be replaced further.\n            const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n            manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                langsItems.other,\n                manipulatedText.slice(firstMlangClosingTagEnd)\n            ].join('');\n        }\n        if (!hasTagSource) {\n            // Add the {mlang source} tag if not found.\n            manipulatedText.replace(sourceReg, langsItems.source);\n        }\n    }\n    return manipulatedText;\n};\nconst onItemChecked = (e) => {\n    if (config.debug > 0) {\n        window.console.info(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n    }\n    const key = e.target.getAttribute('data-key');\n    if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n        toggleStatus(key, e.target.checked);\n        countWordAndChar();\n    } else {\n        initTempForKey(key, false);\n    }\n};\nconst initTempForKey = (key, blank) => {\n    // Get the source text\n    const sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    const editorSettings = findEditor(key);\n    const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n    tempTranslations[key] = {\n        'editorType': null,\n        'editor': null,\n        'source': sourceText,\n        'sourceLang': sourceLang,\n        'status': Selectors.statuses.wait,\n        'translation': ''\n    };\n    if (!blank) {\n        if (editorSettings === null || editorSettings.editor === null) {\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, 'Original editor not found...');\n        } else {\n            // Initialize status for the source content.\n            tempTranslations[key] = {\n                'editorType': editorSettings.editorType,\n                'editor': editorSettings.editor,\n                'source': sourceText,\n                'sourceLang': sourceLang,\n                'status': Selectors.statuses.wait,\n                'translation': ''\n            };\n        }\n    }\n};\nconst toggleStatus = (key, checked) => {\n    const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n                initTempForKey(key, false);\n            } else {\n                initTempForKey(key, true);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(key, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(key, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\nconst setIconStatus = (key, s = Selectors.statuses.wait, isBtn = false) => {\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n            icon.classList.add('btn-outline-secondary');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n            icon.classList.remove('btn-outline-secondary');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', s);\n};\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    const items = document.querySelectorAll(selector);\n    const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = allSelected && selected;\n        toggleStatus(k, false);\n    });\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    saveAllBtn.hidden = saveAllBtn.disabled = false;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            if (tempTranslations[key].editor !== null) {\n                getTranslation(key);\n            }\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key].staus = Selectors.statuses.wait;\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", tempTranslations[key].source);\n    formData.append(\"source_lang\", tempTranslations[key].sourceLang);\n    formData.append(\"target_lang\", targetLang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local_deepler/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    if (config.debug) {\n        window.console.info(\"Send deepl:\", formData);\n    }\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                // Display translation\n                tempTranslations[key].editor.innerHTML = data.translations[0].text;\n                // Store the translation in the global object\n                tempTranslations[key].translation = data.translations[0].text;\n                setIconStatus(key, Selectors.statuses.tosave, true);\n                injectImageCss(\n                    tempTranslations[key].editorType,\n                    tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n            } else {\n                // Oh no! There has been an error with the request!\n                setIconStatus(key, Selectors.statuses.failed, false);\n            }\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n *\n * @param {Integer} editorSettings\n * */\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {string} editorType\n * @param {object} editor\n */\nconst injectImageCss = (editorType, editor) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorType === \"iframe\") {\n        let editorschildrens = Array.from(editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * @todo get the editor from moodle db in the php.\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        let r = null;\n        let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n        if (editorTab.indexOf(mainEditorType) === -1) {\n            window.console.warn('Unsupported editor ' + mainEditorType);\n        } else {\n            // First let's try the current editor.\n            try {\n                r = findEditorByType(key, mainEditorType);\n            } catch (e) {\n                // Content was edited by another editor.\n                window.console.warn('Editor not found: ' + mainEditorType);\n            }\n        }\n        return r;\n    } else {\n        return {editor: e, editorType: et};\n    }\n};\n/**\n * @param {string} key\n * @param {object} editorType\n * @returns {{editor: object, editorType: string}}\n */\nconst findEditorByType = (key, editorType) => {\n    let et = 'basic';\n    let ed = null;\n    switch (editorType) {\n        case \"atto\" :\n            et = 'iframe';\n            ed = document.querySelector(\n                Selectors.editors.types.atto\n                    .replaceAll(\"<KEY>\", key));\n            break;\n        case \"tiny\":\n            et = 'iframe';\n            ed = document.querySelector(Selectors.editors.types.tiny\n                .replaceAll(\"<KEY>\", key))\n                .contentWindow.tinymce;\n            break;\n        case 'marklar':\n        case \"textarea\" :\n            ed = document.querySelector(Selectors.editors.types.other\n                .replaceAll(\"<KEY>\", key));\n            break;\n    }\n    return {editor: ed, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    e.classList.toggle(\"showing\");\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * Launch countWordAndChar\n */\nconst countWordAndChar = () => {\n    let wrdsc = 0;\n    let cws = 0;\n    let cwos = 0;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n    const wordCount = document.querySelector(Selectors.statuses.wordcount);\n    const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n    const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n    const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n    const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n    const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n    let current = cwos + usage.character.count;\n    wordCount.innerText = wrdsc;\n    charWithSpace.innerText = cws;\n    charWOSpace.innerText = cwos;\n    deeplUseSpan.innerText = format.format(current);\n    deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n    if (current >= usage.character.limit) {\n        parent.classList.remove('alert-success');\n        parent.classList.add('alert-danger');\n    } else {\n        parent.classList.add('alert-success');\n        parent.classList.remove('alert-danger');\n    }\n};\n/**\n * @param {string} key\n * @return {object}\n */\nconst getCount = (key) => {\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    return countChars(sourceText);\n};\n/**\n *\n * @param {String} val\n * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n */\nconst countChars = (val) => {\n    const withSpace = val.length;\n    // Using Regex\n    const withOutSpace = val.replace(/\\s+/g, '').length;\n    const wordsCount = val.match(/\\S+/g).length;\n    return {\n        \"wordCount\": wordsCount,\n        \"charNumWithSpace\": withSpace,\n        \"charNumWithOutSpace\": withOutSpace\n    };\n};\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","saveAllModal","batchSaving","cfg","debug","window","console","info","userPrefs","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","error","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","sourceselect","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","checkedCheckBoxes","translation","saveTranslation","warn","launchModal","hidden","disabled","toggleAutotranslateButton","validatorsBtns","item","keyValidator","log","showErrorMessageForEditor","parent","editors","multiples","editorsWithKey","replace","errorMsg","createElement","classList","innerHTML","appendChild","async","Modal","editor","text","sourceText","source","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","add","setIconStatus","success","setTimeout","multilangPill","replaceKey","multilang","prevTransStatus","contains","remove","saved","errorMessage","failed","setIndex","debuginfo","indexOf","slice","isVisible","hide","sourcetexts","keys","fail","sourceItemLang","isFirstTranslation","isSourceOther","tagPatterns","langsItems","other","additionalUpdate","manipulatedText","fullContent","targetReg","RegExp","match","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","toggleStatus","countWordAndChar","initTempForKey","blank","editorSettings","findEditor","sourcelangs","wait","editorType","validatorBtn","status","totranslate","tosave","s","isBtn","icon","setAttribute","selector","selected","items","allSelected","k","toggleRowVisibility","checkBoxesWithKey","row","url","URL","location","href","searchParams","set","toString","ckBox","getTranslation","staus","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","Array","from","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","i","getParentRow","parentrow","toggle","keyid","keyidToKey","multilangs","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","countChars","val","withSpace","withOutSpace"],"mappings":"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"}