{"version":3,"file":"deepler.min.js","sources":["../src/deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\nimport {get_string as getString} from \"core/str\";\nimport {escapeReplacementString, postprocess, preprocess} from \"./latextokeniser\";\n\n\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\nlet usage = {};\nlet format = new Intl.NumberFormat();\nlet saveAllModal = {};\nlet batchSaving = 0;\nlet escapeLatex = true;\nlet log = (...a) => {\n    return a;\n};\nlet warn = (...a) => {\n    return a;\n};\nlet info = (...a) => {\n    return a;\n};\nlet error = (...a) => {\n    return a;\n};\nconst debug = {\n    NONE: 0,\n    MINIMAL: 5,\n    NORMAL: 15,\n    ALL: 30719,\n    DEVELOPER: 32767\n};\nconst registerEventListeners = () => {\n    document.addEventListener('change', e => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            selected.forEach((e) => {\n                const key = e.dataset.key;\n                if (tempTranslations[key].translation !== \"\") {\n                    batchSaving++;\n                    saveTranslation(key);\n                } else {\n                    warn(\"not translated \" + key);\n                }\n            });\n            if (batchSaving > 0) {\n                log('batchSaving' + batchSaving);\n                launchModal();\n                saveAllBtn.hidden = saveAllBtn.disabled = true;\n            }\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => {\n            tempTranslations[node.dataset.key] = {};\n        });\n    } catch (e) {\n        if (config.debug) {\n            error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI.\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    log('init');\n    config = cfg;\n    usage = config.usage;\n    // Preparing the debugger.\n    if (config.debug === debug.MINIMAL) {\n        error = window.console.error.bind(window.console);\n    } else if (config.debug === debug.NORMAL) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n    } else if (config.debug === debug.ALL) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n        info = window.console.info.bind(window.console);\n    } else if (config.debug === debug.DEVELOPER) {\n        error = window.console.error.bind(window.console);\n        warn = window.console.warn.bind(window.console);\n        info = window.console.info.bind(window.console);\n        log = window.console.log.bind(window.console);\n    }\n    info(\"DEEPLER loaded\");\n    log(config);\n    warn(\"Deepl's usage\", usage);\n    error(\"testing developper level\");\n    mainEditorType = config.userPrefs;\n    // Setup.\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    log(Selectors.actions.escapeLatex);\n    escapeLatex = document.querySelector(Selectors.actions.escapeLatex).checked;\n    info(`escapeLatex ${escapeLatex}`);\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            let key = _this.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                error(`Translation key \"${key}\" is undefined `);\n            } else {\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n    showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n    showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n};\nconst showErrorMessageForEditor = (key, message) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    const errorMsg = document.createElement('div');\n    errorMsg.classList = ['alert alert-danger'];\n    errorMsg.innerHTML = message;\n    parent.appendChild(errorMsg);\n};\n/**\n * Opens a modal infobox to warn user trunks of fields are saving.\n * @returns {Promise<void>}\n */\nconst launchModal = async () => {\n    // ...\n    saveAllModal = await Modal.create({\n        title: getString('saveallmodaltitle', 'local_deepler'),\n        body: getString('saveallmodalbody', 'local_deepler'),\n    });\n    saveAllModal.show();\n};\n/**\n * Save Translation to Moodle\n * @param  {String} key Data Key\n */\nconst saveTranslation = (key) => {\n\n    // Get processing vars.\n    let editor = tempTranslations[key].editor;\n    let text = editor.innerHTML; // We keep the editors text in case translation is edited\n    if (mainEditorType === 'textarea') {\n        text = decodeHTML(text);\n    }\n    // Restore the source.\n    let sourceTokenised = tempTranslations[key].source;\n    let sourceText = escapeLatex ? postprocess(sourceTokenised, tempTranslations[key].tokens) : sourceTokenised;\n    log(text);\n    log(sourceText);\n    let element = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n    info(fielddata);\n    // Get the latest data to parse text against.\n    ajax.call([\n        {\n            methodname: \"local_deepler_get_field\",\n            args: {\n                data: [fielddata],\n            },\n            done: (data) => {\n                // The latests field text so multiple translators can work at the same time\n                let fieldtext = data[0].text;\n\n                // Field text exists\n                if (data.length > 0) {\n                    // Updated hidden textarea with updatedtext\n                    let textarea = document.querySelector(\n                        Selectors.editors.multiples.textAreas\n                            .replace(\"<KEY>\", key));\n                    // Get the updated text\n                    let updatedtext = getupdatedtext(fieldtext, text, sourceText, tempTranslations[key].sourceLang);\n\n                    // Build the data object\n                    let tdata = {};\n                    tdata.courseid = config.courseid;\n                    tdata.id = parseInt(id);\n                    tdata.tid = tid;\n                    tdata.table = table;\n                    tdata.field = field;\n                    tdata.text = updatedtext;\n                    info(updatedtext);\n                    info(tdata);\n                    // Success Message\n                    const successMessage = () => {\n                        element.classList.add(\"local_deepler__success\");\n                        // Add saved indicator\n                        setIconStatus(key, Selectors.statuses.success);\n                        // Remove success message after a few seconds\n                        setTimeout(() => {\n                            let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                            let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                            prevTransStatus.classList = \"badge badge-pill badge-success\";\n                            if (multilangPill.classList.contains(\"disabled\")) {\n                                multilangPill.classList.remove('disabled');\n                            }\n                            setIconStatus(key, Selectors.statuses.saved);\n                        });\n                    };\n                    // Error Mesage\n                    const errorMessage = (err) => {\n                        editor.classList.add(\"local_deepler__error\");\n                        let hintError = '';\n                        // Most of the time DB error will come from translations starting to be too long.\n                        getString('errortoolong', 'local_deepler').then((s) => {\n                            hintError = s;\n                            setIconStatus(key, Selectors.statuses.failed);\n                            let message = err.message + ' ' + hintError;\n                            if (err.debuginfo) {\n                                // When Moodle is set to max debugger display the debuginfo\n                                const setIndex = err.debuginfo.indexOf(\"SET\") === -1 ? 15 : err.debuginfo.indexOf(\"SET\");\n                                message = err.message + '<br/>' + err.debuginfo.slice(0, setIndex) + '...';\n                            }\n                            showErrorMessageForEditor(key, message);\n                        });\n                    };\n                    // Submit the request\n                    ajax.call([\n                        {\n                            methodname: \"local_deepler_update_translation\",\n                            args: {\n                                data: [tdata],\n                            },\n                            done: (data) => {\n                                // Print response to console log\n                                info(\"ws: \", key, data);\n                                // If we launch saving by the save all button, manage the modal infobox.\n                                if (saveAllModal !== null && saveAllModal.isVisible) {\n                                    batchSaving--;\n                                    log('batchSaving', batchSaving);\n                                    if (batchSaving === 0) {\n                                        saveAllModal.hide();\n                                    }\n                                }\n\n                                // Display success message\n                                if (data.length > 0) {\n                                    successMessage();\n                                    textarea.innerHTML = data[0].text;\n\n                                    // Update source lang if necessary\n                                    if (config.currentlang === config.lang) {\n                                        document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                            .innerHTML = text;\n                                    }\n                                    // Deselect the checkbox\n                                    document.querySelector(Selectors.editors.multiples.checkBoxesWithKey.replace('<KEY>', key))\n                                        .checked = false;\n                                } else {\n                                    // Something went wrong with the data\n                                    errorMessage();\n                                }\n                            },\n                            fail: (err) => {\n                                // An error occurred\n                                errorMessage(err);\n                            },\n                        },\n                    ]);\n                } else {\n                    // Something went wrong with field retrieval\n                    warn(data);\n                }\n            },\n            fail: (err) => {\n                // An error occurred\n                error(err);\n            },\n        },\n    ]);\n};\n\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database including all mlang tag if any.\n * @param {string} translation Translated Text to update.\n * @param {string} source Original text translated from.\n * @param {string} sourceItemLang The source language code\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n    const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n    const isSourceOther = sourceItemLang === sourceLang;\n    const tagPatterns = {\n        \"other\": \"({mlang other)(.*?){mlang}\",\n        \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n        \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n    };\n    const langsItems = {\n        \"fullContent\": fieldtext,\n        \"other\": `{mlang other}${source}{mlang}`,\n        \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n        \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n    };\n    if (isFirstTranslation) {\n        // No mlang tag : easy.\n        if (isSourceOther) {\n            return langsItems.other + langsItems.target;\n        } else {\n            return langsItems.other + langsItems.source + langsItems.target;\n        }\n    }\n    // Alreaddy mlang tag-s.\n    return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n};\n\n/**\n * Update Textarea when there was mlang tags.\n * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n * @param {boolean} isSourceOther\n * @param {string} tagPatterns\n * @param {string} langsItems\n * @returns {string} {string}\n */\nconst additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n    let manipulatedText = langsItems.fullContent;\n    // Do we have a TARGET tag already ?\n    const targetReg = new RegExp(tagPatterns.target, \"sg\");\n    const hasTagTarget = manipulatedText.match(targetReg);\n    if (hasTagTarget) {\n        // Yes replace it.\n        manipulatedText = manipulatedText.replace(targetReg, escapeReplacementString(langsItems.target));\n    } else {\n        // No, add it at the end.\n        const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n        manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n            langsItems.target,\n            manipulatedText.slice(lastMlangClosingTagEnd)\n        ].join('');\n    }\n    // Do we have a OTHER tag already ?\n    const otherReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagOther = manipulatedText.match(otherReg);\n    // Do we have a SOURCE tag already ?\n    const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagSource = manipulatedText.match(sourceReg);\n    if (isSourceOther) {\n        // Whatever was the {mlang other} tag language we need to replace it by this source.\n        manipulatedText = manipulatedText.replace(otherReg, escapeReplacementString(langsItems.other));\n        if (hasTagSource) {\n            // And remove the {mlang source} tag if found.\n            manipulatedText.replace(sourceReg, \"\");\n        }\n    } else {\n        if (!hasTagOther) {\n            // We still add this source as otherTag of the so that it can be replaced further.\n            const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n            manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                langsItems.other,\n                manipulatedText.slice(firstMlangClosingTagEnd)\n            ].join('');\n        }\n        if (!hasTagSource) {\n            // Add the {mlang source} tag if not found.\n            manipulatedText.replace(sourceReg, escapeReplacementString(langsItems.source));\n        }\n    }\n    return manipulatedText;\n};\nconst onItemChecked = (e) => {\n    log(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n    const key = e.target.getAttribute('data-key');\n    if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n        toggleStatus(key, e.target.checked);\n        countWordAndChar();\n    } else {\n        initTempForKey(key, false);\n    }\n};\nconst initTempForKey = (key, blank) => {\n    // Get the source text\n    const sourceSelector = Selectors.sourcetexts.keys.replace(\"<KEY>\", key);\n    const sourceTextEncoded = document.querySelector(sourceSelector).getAttribute(\"data-sourcetext-raw\");\n    const sourceText = fromBase64(sourceTextEncoded);\n    const tokenised = escapeLatex ? preprocess(sourceText) : sourceText;\n    // Store the settings.\n    const editorSettings = findEditor(key);\n    const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n    // We make sure to initialize the record.\n    tempTranslations[key] = {\n        'editorType': null,\n        'editor': null,\n        'source': '',\n        'sourceLang': '',\n        'status': '',\n        'translation': '',\n        'tokens': []\n    };\n    if (!blank) {\n        if (editorSettings === null || editorSettings.editor === null) {\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, 'Original editor not found...');\n        } else {\n            // Initialize status for the source content.\n            tempTranslations[key] = {\n                'editorType': editorSettings.editorType,\n                'editor': editorSettings.editor,\n                'source': tokenised.tokenizedText,\n                'sourceLang': sourceLang,\n                'status': Selectors.statuses.wait,\n                'translation': '',\n                'tokens': tokenised.latexExpressions\n            };\n        }\n    }\n};\nconst toggleStatus = (key, checked) => {\n    const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n                initTempForKey(key, false);\n            } else {\n                initTempForKey(key, true);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(key, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(key, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\nconst setIconStatus = (key, s = Selectors.statuses.wait, isBtn = false) => {\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n            icon.classList.add('btn-outline-secondary');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n            icon.classList.remove('btn-outline-secondary');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', s);\n};\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    const items = document.querySelectorAll(selector);\n    const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = allSelected && selected;\n        toggleStatus(k, false);\n    });\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    saveAllBtn.hidden = saveAllBtn.disabled = false;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            if (tempTranslations[key].editor !== null) {\n                getTranslation(key);\n            }\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key].staus = Selectors.statuses.wait;\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", tempTranslations[key].source);\n    formData.append(\"source_lang\", tempTranslations[key].sourceLang);\n    formData.append(\"target_lang\", targetLang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local_deepler/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    info(\"Send deepl:\", formData);\n\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                info(\"From deepl:\", data);\n                log(tempTranslations[key]);\n                log(data.translations[0].text);\n                let tr = postprocess(data.translations[0].text, tempTranslations[key].tokens);\n                // Display translation\n                log(tr);\n                tempTranslations[key].editor.innerHTML = tr;\n                // Store the translation in the global object\n                tempTranslations[key].translation = tr;\n                setIconStatus(key, Selectors.statuses.tosave, true);\n                injectImageCss(\n                    tempTranslations[key].editorType,\n                    tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n            } else {\n                // Oh no! There has been an error with the request!\n                setIconStatus(key, Selectors.statuses.failed, false);\n            }\n        } else if (typeof xhr.readyState !== 'number') {\n            log('ERROR : Some javascript library in your Moodle install are overriding the core functionalities in a wrong way.' +\n                ' xhr.readyState MUST be of type \"number\"');\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n *\n * @param {Integer} editorSettings\n * */\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {string} editorType\n * @param {object} editor\n */\nconst injectImageCss = (editorType, editor) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorType === \"iframe\") {\n        let editorschildrens = Array.from(editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * @todo get the editor from moodle db in the php.\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        let r = null;\n        let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n        if (editorTab.indexOf(mainEditorType) === -1) {\n            warn('Unsupported editor ' + mainEditorType);\n        } else {\n            // First let's try the current editor.\n            try {\n                r = findEditorByType(key, mainEditorType);\n            } catch (e) {\n                // Content was edited by another editor.\n                log(`Editor not found: ${mainEditorType} for key ${key}`);\n            }\n        }\n        return r;\n    } else {\n        return {editor: e, editorType: et};\n    }\n};\n/**\n * @param {string} key\n * @param {object} editorType\n * @returns {{editor: object, editorType: string}}\n */\nconst findEditorByType = (key, editorType) => {\n    let et = 'basic';\n    let ed = null;\n    switch (editorType) {\n        case \"atto\" :\n            et = 'iframe';\n            ed = document.querySelector(\n                Selectors.editors.types.atto\n                    .replaceAll(\"<KEY>\", key));\n            break;\n        case \"tiny\":\n            et = 'iframe';\n            ed = document.querySelector(Selectors.editors.types.tiny\n                .replaceAll(\"<KEY>\", key))\n                .contentWindow.tinymce;\n            break;\n        case 'marklar':\n        case \"textarea\" :\n            ed = document.querySelector(Selectors.editors.types.other\n                .replaceAll(\"<KEY>\", key));\n            break;\n    }\n    return {editor: ed, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * Launch countWordAndChar\n */\nconst countWordAndChar = () => {\n    let wrdsc = 0;\n    let cws = 0;\n    let cwos = 0;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n    const wordCount = document.querySelector(Selectors.statuses.wordcount);\n    const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n    const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n    const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n    const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n    const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n    let current = cwos + usage.character.count;\n    wordCount.innerText = wrdsc;\n    charWithSpace.innerText = cws;\n    charWOSpace.innerText = cwos;\n    deeplUseSpan.innerText = format.format(current);\n    deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n    if (current >= usage.character.limit) {\n        parent.classList.remove('alert-success');\n        parent.classList.add('alert-danger');\n    } else {\n        parent.classList.add('alert-success');\n        parent.classList.remove('alert-danger');\n    }\n};\n/**\n * @param {string} key\n * @return {object}\n */\nconst getCount = (key) => {\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    return countChars(sourceText);\n};\n/**\n *\n * @param {String} val\n * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n */\nconst countChars = (val) => {\n    const withSpace = val.length;\n    // Using Regex\n    const withOutSpace = val.replace(/\\s+/g, '').length;\n    const wordsCount = val.match(/\\S+/g).length;\n    return {\n        \"wordCount\": wordsCount,\n        \"charNumWithSpace\": withSpace,\n        \"charNumWithOutSpace\": withOutSpace\n    };\n};\n/**\n * Helper function to decode the PHP base64 encoded source.\n * @param {string} encoded\n * @returns {string}\n */\nconst fromBase64 = (encoded) => {\n    const binString = atob(encoded); // Maybe we should import js-base64 instead.\n    const bytes = Uint8Array.from(binString, (m) => m.codePointAt(0));\n    return new TextDecoder().decode(bytes);\n};\n/**\n * Helper function for the decode html escaped content.\n * @param {string} encodedStr\n * @returns {string}\n */\nconst decodeHTML = (encodedStr) => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(encodedStr, 'text/html');\n    return doc.documentElement.textContent;\n};\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","saveAllModal","batchSaving","escapeLatex","log","a","warn","info","error","debug","cfg","window","console","bind","userPrefs","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","sourceselect","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","checkedCheckBoxes","translation","saveTranslation","launchModal","hidden","disabled","toggleAutotranslateButton","validatorsBtns","item","keyValidator","showErrorMessageForEditor","parent","editors","multiples","editorsWithKey","replace","errorMsg","createElement","classList","innerHTML","appendChild","async","Modal","editor","text","decodeHTML","sourceTokenised","source","sourceText","tokens","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","add","setIconStatus","success","setTimeout","multilangPill","replaceKey","multilang","prevTransStatus","contains","remove","saved","errorMessage","err","hintError","then","s","failed","debuginfo","setIndex","indexOf","slice","isVisible","hide","sourcetexts","keys","checkBoxesWithKey","fail","sourceItemLang","isFirstTranslation","isSourceOther","langsItems","other","additionalUpdate","tagPatterns","manipulatedText","fullContent","targetReg","RegExp","match","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","toggleStatus","countWordAndChar","initTempForKey","blank","sourceSelector","sourceTextEncoded","fromBase64","tokenised","editorSettings","findEditor","sourcelangs","editorType","tokenizedText","wait","latexExpressions","validatorBtn","status","totranslate","tosave","isBtn","icon","setAttribute","selector","selected","items","allSelected","k","toggleRowVisibility","row","url","URL","location","href","searchParams","set","toString","ckBox","getTranslation","staus","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","tr","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","Array","from","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","i","getParentRow","parentrow","keyid","keyidToKey","multilangs","toggle","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","countChars","val","withSpace","withOutSpace","encoded","binString","atob","bytes","Uint8Array","codePointAt","TextDecoder","decode","encodedStr","DOMParser","parseFromString","documentElement"],"mappings":";;;;;;8MA8BIA,iBAAmB,GACnBC,eAAiB,GACjBC,OAAS,GACTC,oBAAsB,GACtBC,WAAa,GACbC,WAAa,GACbC,WAAa,GACbC,WAAa,GACbC,MAAQ,GACRC,OAAS,IAAIC,KAAKC,aAClBC,aAAe,GACfC,YAAc,EACdC,aAAc,EACdC,IAAM,yCAAIC,0CAAAA,+BACHA,GAEPC,KAAO,0CAAID,+CAAAA,iCACJA,GAEPE,KAAO,0CAAIF,+CAAAA,iCACJA,GAEPG,MAAQ,0CAAIH,+CAAAA,iCACLA,SAELI,cAEO,EAFPA,aAGM,GAHNA,UAIG,MAJHA,gBAKS,oBAgFMC,MACjBN,IAAI,QACJb,OAASmB,IACTb,MAAQN,OAAOM,MAEXN,OAAOkB,QAAUA,cACjBD,MAAQG,OAAOC,QAAQJ,MAAMK,KAAKF,OAAOC,SAClCrB,OAAOkB,QAAUA,cACxBD,MAAQG,OAAOC,QAAQJ,MAAMK,KAAKF,OAAOC,SACzCN,KAAOK,OAAOC,QAAQN,KAAKO,KAAKF,OAAOC,UAChCrB,OAAOkB,QAAUA,WACxBD,MAAQG,OAAOC,QAAQJ,MAAMK,KAAKF,OAAOC,SACzCN,KAAOK,OAAOC,QAAQN,KAAKO,KAAKF,OAAOC,SACvCL,KAAOI,OAAOC,QAAQL,KAAKM,KAAKF,OAAOC,UAChCrB,OAAOkB,QAAUA,kBACxBD,MAAQG,OAAOC,QAAQJ,MAAMK,KAAKF,OAAOC,SACzCN,KAAOK,OAAOC,QAAQN,KAAKO,KAAKF,OAAOC,SACvCL,KAAOI,OAAOC,QAAQL,KAAKM,KAAKF,OAAOC,SACvCR,IAAMO,OAAOC,QAAQR,IAAIS,KAAKF,OAAOC,UAEzCL,KAAK,kBACLH,IAAIb,QACJe,KAAK,gBAAiBT,OACtBW,MAAM,4BACNlB,eAAiBC,OAAOuB,UA7CT,UAEXlB,WAAamB,SAASC,cAAcC,mBAAUC,QAAQC,SACtDzB,WAAaqB,SAASC,cAAcC,mBAAUC,QAAQE,gBAAgBC,MACtE1B,WAAaoB,SAASC,cAAcC,mBAAUC,QAAQI,gBAAgBD,MACtE7B,oBAAsBuB,SAASC,cAAcC,mBAAUC,QAAQK,kBAC/D9B,WAAasB,SAASS,iBAAiBP,mBAAUC,QAAQO,YAEzDhC,WAAWiC,SAASC,OAChBtC,iBAAiBsC,KAAKC,QAAQC,KAAO,MAE3C,MAAOC,GACDvC,OAAOkB,OACPD,MAAMsB,EAAEC,WAkChBC,GAvGAjB,SAASkB,iBAAiB,UAAUH,IAC5BA,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQI,iBACnCc,aAAaN,GAEbA,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQE,iBACnCiB,aAAaP,GAEbA,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQoB,cACnCC,SAAStB,mBAAUuB,SAASC,QAASX,EAAEI,OAAOQ,SAE9CZ,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQyB,iBACnCJ,SAAStB,mBAAUuB,SAASI,YAAad,EAAEI,OAAOQ,UAElDZ,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQO,aAAeK,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQ2B,gBACrFC,cAAchB,MAGtBf,SAASkB,iBAAiB,SAASH,IAC3BA,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQ6B,kBACnCC,kBAAkBlB,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQ6B,kBAErDjB,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQK,oBAC/BhC,OAAO0D,cAAgB1D,OAAO2D,WAAwBC,IAAhB5D,OAAO2D,oBACvCE,OAAO,CACTC,MAAO,oBACPC,KAAO,mDACPC,MAAM,EACNC,eAAe,IAGnBC,mBAGJ3B,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQwC,eACnCC,oBAAoB7B,GAEpBA,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQC,WAClBJ,SAASS,iBAAiBP,mBAAUuB,SAASoB,mBACrDlC,SAASI,UACRD,IAAMC,EAAEF,QAAQC,IACoB,KAAtCxC,iBAAiBwC,KAAKgC,aACtB3D,cACA4D,gBAAgBjC,MAEhBvB,KAAK,kBAAoBuB,QAG7B3B,YAAc,IACdE,IAAI,cAAgBF,aACpB6D,cACAnE,WAAWoE,OAASpE,WAAWqE,UAAW,OAuDtDC,4BACA9D,IAAIa,mBAAUC,QAAQf,aACtBA,YAAcY,SAASC,cAAcC,mBAAUC,QAAQf,aAAauC,QACpEnC,KAAM,eAAcJ,eACCY,SAASC,cAAcC,mBAAUC,QAAQwC,cACjDO,SAAWvE,aAAeC,WAIpBoB,SAASS,iBAAiBP,mBAAUC,QAAQiD,gBACpDzC,SAAS0C,OAEhBA,KAAKnC,iBAAiB,SAAUH,QAExBD,IADUC,EAAEI,OAAOC,QAAQlB,mBAAUC,QAAQiD,gBACjCvC,QAAQyC,aACM,OAA1BhF,iBAAiBwC,WAA2CsB,IAA1B9D,iBAAiBwC,KAInDrB,MAAO,oBAAmBqB,sBAE1BiC,gBAAgBjC,WAO5BpC,WAAWiC,SAASI,IAChBA,EAAEmC,SAAWvE,aAAeC,WAC5BmC,EAAEG,iBAAiB,SAAS,KACxBiC,kCAGR3B,SAAStB,mBAAUuB,SAASC,QAAS1B,SAASC,cAAcC,mBAAUC,QAAQoB,aAAaI,SAC3FH,SAAStB,mBAAUuB,SAASI,YAAa7B,SAASC,cAAcC,mBAAUC,QAAQyB,gBAAgBD,gBAEhG4B,0BAA4B,CAACzC,IAAKE,eAChCwC,OAASxD,SAASC,cAAcC,mBAAUuD,QAAQC,UAAUC,eAAeC,QAAQ,QAAS9C,YAC1F+C,SAAW7D,SAAS8D,cAAc,OACxCD,SAASE,UAAY,CAAC,sBACtBF,SAASG,UAAYhD,QACrBwC,OAAOS,YAAYJ,WAMjBb,YAAckB,UAEhBhF,mBAAqBiF,eAAM9B,OAAO,CAC9BC,OAAO,mBAAU,oBAAqB,iBACtCC,MAAM,mBAAU,mBAAoB,mBAExCrD,aAAasD,QAMXO,gBAAmBjC,UAGjBsD,OAAS9F,iBAAiBwC,KAAKsD,OAC/BC,KAAOD,OAAOJ,UACK,aAAnBzF,iBACA8F,KAAOC,WAAWD,WAGlBE,gBAAkBjG,iBAAiBwC,KAAK0D,OACxCC,WAAarF,aAAc,+BAAYmF,gBAAiBjG,iBAAiBwC,KAAK4D,QAAUH,gBAC5FlF,IAAIgF,MACJhF,IAAIoF,gBACAE,QAAU3E,SAASC,cAAcC,mBAAUuD,QAAQC,UAAUC,eAAeC,QAAQ,QAAS9C,MAC7F8D,GAAKD,QAAQE,aAAa,WAC1BC,IAAMH,QAAQE,aAAa,YAC3BE,MAAQJ,QAAQE,aAAa,cAC7BG,MAAQL,QAAQE,aAAa,cAG7BI,UAAY,GAChBA,UAAUC,SAAW1G,OAAO0G,SAC5BD,UAAUL,GAAKO,SAASP,IACxBK,UAAUF,MAAQA,MAClBE,UAAUD,MAAQA,MAClBxF,KAAKyF,yBAEAG,KAAK,CACN,CACIC,WAAY,0BACZC,KAAM,CACFC,KAAM,CAACN,YAEXO,KAAOD,WAECE,UAAYF,KAAK,GAAGlB,QAGpBkB,KAAKG,OAAS,EAAG,KAEbC,SAAW3F,SAASC,cACpBC,mBAAUuD,QAAQC,UAAUkC,UACvBhC,QAAQ,QAAS9C,MAEtB+E,YAAcC,eAAeL,UAAWpB,KAAMI,WAAYnG,iBAAiBwC,KAAKnC,YAGhFoH,MAAQ,GACZA,MAAMb,SAAW1G,OAAO0G,SACxBa,MAAMnB,GAAKO,SAASP,IACpBmB,MAAMjB,IAAMA,IACZiB,MAAMhB,MAAQA,MACdgB,MAAMf,MAAQA,MACde,MAAM1B,KAAOwB,YACbrG,KAAKqG,aACLrG,KAAKuG,aAECC,eAAiB,KACnBrB,QAAQZ,UAAUkC,IAAI,0BAEtBC,cAAcpF,IAAKZ,mBAAUuB,SAAS0E,SAEtCC,YAAW,SACHC,cAAgBrG,SAASC,cAAcqG,WAAWpG,mBAAUuB,SAAS8E,UAAWzF,MAC9Dd,SAASC,cAAcqG,WAAWpG,mBAAUuB,SAAS+E,gBAAiB1F,MAC5EiD,UAAY,iCACxBsC,cAActC,UAAU0C,SAAS,aACjCJ,cAActC,UAAU2C,OAAO,YAEnCR,cAAcpF,IAAKZ,mBAAUuB,SAASkF,WAIxCC,aAAgBC,MAClBzC,OAAOL,UAAUkC,IAAI,4BACjBa,UAAY,uBAEN,eAAgB,iBAAiBC,MAAMC,IAC7CF,UAAYE,EACZd,cAAcpF,IAAKZ,mBAAUuB,SAASwF,YAClCjG,QAAU6F,IAAI7F,QAAU,IAAM8F,aAC9BD,IAAIK,UAAW,OAETC,UAA6C,IAAlCN,IAAIK,UAAUE,QAAQ,OAAgB,GAAKP,IAAIK,UAAUE,QAAQ,OAClFpG,QAAU6F,IAAI7F,QAAU,QAAU6F,IAAIK,UAAUG,MAAM,EAAGF,UAAY,MAEzE5D,0BAA0BzC,IAAKE,2BAIlCoE,KAAK,CACN,CACIC,WAAY,mCACZC,KAAM,CACFC,KAAM,CAACQ,QAEXP,KAAOD,OAEH/F,KAAK,OAAQsB,IAAKyE,MAEG,OAAjBrG,cAAyBA,aAAaoI,YACtCnI,cACAE,IAAI,cAAeF,aACC,IAAhBA,aACAD,aAAaqI,QAKjBhC,KAAKG,OAAS,GACdM,iBACAL,SAAS3B,UAAYuB,KAAK,GAAGlB,KAGzB7F,OAAO0D,cAAgB1D,OAAO2D,OAC9BnC,SAASC,cAAcC,mBAAUsH,YAAYC,KAAK7D,QAAQ,QAAS9C,MAC9DkD,UAAYK,MAGrBrE,SAASC,cAAcC,mBAAUuD,QAAQC,UAAUgE,kBAAkB9D,QAAQ,QAAS9C,MACjFa,SAAU,GAGfiF,gBAGRe,KAAOd,MAEHD,aAAaC,cAMzBtH,KAAKgG,OAGboC,KAAOd,MAEHpH,MAAMoH,UAchBf,eAAiB,CAACL,UAAW3C,YAAa0B,OAAQoD,wBAC9CC,oBAAsD,IAAjCpC,UAAU2B,QAAQ,UACvCU,cAAgBF,iBAAmBjJ,WAMnCoJ,WAAa,aACAtC,gBACL,gBAAejB,uBACd,UAAS5F,cAAckE,4BACvB,UAAS8E,kBAAkBpD,wBAEtCqD,mBAEIC,cACOC,WAAWC,MAAQD,WAAW5G,OAE9B4G,WAAWC,MAAQD,WAAWvD,OAASuD,WAAW5G,OAI1D8G,iBAAiBH,cApBJ,OACP,oCACE,WAAUlJ,kCACV,WAAUgJ,gCAiB2BG,aAWlDE,iBAAmB,CAACH,cAAeI,YAAaH,kBAC9CI,gBAAkBJ,WAAWK,kBAE3BC,UAAY,IAAIC,OAAOJ,YAAY/G,OAAQ,SAC5BgH,gBAAgBI,MAAMF,WAGvCF,gBAAkBA,gBAAgBvE,QAAQyE,WAAW,2CAAwBN,WAAW5G,aACrF,OAEGqH,uBAAyBL,gBAAgBM,YAAY,WAAa,UAAU/C,OAClFyC,gBAAkB,CAACA,gBAAgBd,MAAM,EAAGmB,wBACxCT,WAAW5G,OACXgH,gBAAgBd,MAAMmB,yBACxBE,KAAK,UAGLC,SAAW,IAAIL,OAAOJ,YAAYF,MAAO,MACzCY,YAAcT,gBAAgBI,MAAMI,UAEpCE,UAAY,IAAIP,OAAOJ,YAAYF,MAAO,MAC1Cc,aAAeX,gBAAgBI,MAAMM,cACvCf,cAEAK,gBAAkBA,gBAAgBvE,QAAQ+E,UAAU,2CAAwBZ,WAAWC,QACnFc,cAEAX,gBAAgBvE,QAAQiF,UAAW,QAEpC,KACED,YAAa,OAERG,wBAA0BZ,gBAAgBf,QAAQ,UACxDe,gBAAkB,CAACA,gBAAgBd,MAAM,EAAG0B,yBACxChB,WAAWC,MACXG,gBAAgBd,MAAM0B,0BACxBL,KAAK,IAENI,cAEDX,gBAAgBvE,QAAQiF,WAAW,2CAAwBd,WAAWvD,gBAGvE2D,iBAELpG,cAAiBhB,IACnB1B,IAAI,YAAa0B,EAAEI,OAAO0D,aAAa,YAAa9D,EAAEI,OAAO0D,aAAa,sBACpE/D,IAAMC,EAAEI,OAAO0D,aAAa,YACW,2BAAzC9D,EAAEI,OAAO0D,aAAa,gBACtBmE,aAAalI,IAAKC,EAAEI,OAAOQ,SAC3BsH,oBAEAC,eAAepI,KAAK,IAGtBoI,eAAiB,CAACpI,IAAKqI,eAEnBC,eAAiBlJ,mBAAUsH,YAAYC,KAAK7D,QAAQ,QAAS9C,KAC7DuI,kBAAoBrJ,SAASC,cAAcmJ,gBAAgBvE,aAAa,uBACxEJ,WAAa6E,WAAWD,mBACxBE,UAAYnK,aAAc,8BAAWqF,YAAcA,WAEnD+E,eAAiBC,WAAW3I,KAC5BnC,WAAaqB,SAASC,cAAcC,mBAAUsH,YAAYkC,YAAY9F,QAAQ,QAAS9C,MAAMR,MAEnGhC,iBAAiBwC,KAAO,YACN,YACJ,YACA,cACI,UACJ,eACK,UACL,IAETqI,QACsB,OAAnBK,gBAAqD,OAA1BA,eAAepF,QAC1C8B,cAAcpF,IAAKZ,mBAAUuB,SAASwF,QACtC1D,0BAA0BzC,IAAK,iCAG/BxC,iBAAiBwC,KAAO,YACN0I,eAAeG,kBACnBH,eAAepF,cACfmF,UAAUK,yBACNjL,kBACJuB,mBAAUuB,SAASoI,iBACd,UACLN,UAAUO,oBAK9Bd,aAAe,CAAClI,IAAKa,mEACR3B,SAASC,cAAcqG,WAAWpG,mBAAUC,QAAQ4J,aAAcjJ,MAAMD,QAAQmJ,aAEtF9J,mBAAUuB,SAASoI,KAChBlI,SACAuE,cAAcpF,IAAKZ,mBAAUuB,SAASwI,aACtCf,eAAepI,KAAK,IAEpBoI,eAAepI,KAAK,cAGvBZ,mBAAUuB,SAASwI,YAChBtI,wCAAWrD,iBAAiBwC,4FAAMgC,4EAAa4C,QAAS,EACxDQ,cAAcpF,IAAKZ,mBAAUuB,SAASyI,QAAQ,GAE9ChE,cAAcpF,IAAKZ,mBAAUuB,SAASoI,iBAGzC3J,mBAAUuB,SAASyI,OACfvI,SACDuE,cAAcpF,IAAKZ,mBAAUuB,SAASwI,kBAGzC/J,mBAAUuB,SAASwF,YAEnB/G,mBAAUuB,SAAS0E,aAEnBjG,mBAAUuB,SAASkF,SAI1BT,cAAgB,SAACpF,SAAKkG,yDAAI9G,mBAAUuB,SAASoI,KAAMM,8DACjDC,KAAOpK,SAASC,cAAcqG,WAAWpG,mBAAUC,QAAQ4J,aAAcjJ,MACzEqJ,OACKC,KAAKrG,UAAU0C,SAAS,SACzB2D,KAAKrG,UAAUkC,IAAI,OACnBmE,KAAKrG,UAAUkC,IAAI,0BAEnBmE,KAAKrG,UAAU0C,SAAS,YACxB2D,KAAKrG,UAAU2C,OAAO,aAGrB0D,KAAKrG,UAAU0C,SAAS,YACzB2D,KAAKrG,UAAUkC,IAAI,WAEnBmE,KAAKrG,UAAU0C,SAAS,SACxB2D,KAAKrG,UAAU2C,OAAO,OACtB0D,KAAKrG,UAAU2C,OAAO,2BAG9B0D,KAAKC,aAAa,OAAQF,MAAQ,SAAW,UAC7CC,KAAKC,aAAa,cAAerD,IAO/BxF,SAAW,CAAC8I,SAAUC,kBAClBC,MAAQxK,SAASS,iBAAiB6J,UAClCG,YAAczK,SAASC,cAAcC,mBAAUC,QAAQwC,cAAchB,QAC3E6I,MAAM7J,SAAS0C,WACPqH,EAAIrH,KAAKwB,aAAa,eAC1B8F,oBAAoBtH,KAAMkH,UAE1BlH,KAAKpD,cAAcqG,WAAWpG,mBAAUuD,QAAQC,UAAUgE,kBAAmBgD,IAAI/I,QAAU8I,aAAeF,SAC1GvB,aAAa0B,GAAG,MAEpBvH,4BACA8F,oBAEE0B,oBAAsB,CAACC,IAAKjJ,WAC1BA,QACAiJ,IAAI7G,UAAU2C,OAAO,UAErBkE,IAAI7G,UAAUkC,IAAI,WAOpB5E,aAAgBN,QACd8J,IAAM,IAAIC,IAAIlL,OAAOmL,SAASC,MACfH,IAAII,aACVC,IAAI,cAAenK,EAAEI,OAAOb,OACzCV,OAAOmL,SAAWF,IAAIM,YAOpB7J,aAAgBP,QACd8J,IAAM,IAAIC,IAAIlL,OAAOmL,SAASC,MACfH,IAAII,aACVC,IAAI,OAAQnK,EAAEI,OAAOb,OAClCV,OAAOmL,SAAWF,IAAIM,YAKpBzI,gBAAkB,KACpB7D,WAAWoE,OAASpE,WAAWqE,UAAW,EAC1ClD,SACKS,iBAAiBP,mBAAUuB,SAASoB,mBACpClC,SAASyK,YACFtK,IAAMsK,MAAMvG,aAAa,YACQ,OAAjCvG,iBAAiBwC,KAAKsD,QACtBiH,eAAevK,SASzBuK,eAAkBvK,MAEpBxC,iBAAiBwC,KAAKwK,MAAQpL,mBAAUuB,SAASoI,SAE7C0B,SAAW,IAAIC,SACnBD,SAASE,OAAO,OAAQnN,iBAAiBwC,KAAK0D,QAC9C+G,SAASE,OAAO,cAAenN,iBAAiBwC,KAAKnC,YACrD4M,SAASE,OAAO,cAAe7M,WAAW8M,eAC1CH,SAASE,OAAO,WAAYjN,OAAOmN,QACnCJ,SAASE,OAAO,eAAgBzL,SAASC,cAAcC,mBAAU0L,MAAMC,aAAalK,QAAU,OAAS,OACvG4J,SAASE,OAAO,UAAWzL,SAASC,cAAcC,mBAAU0L,MAAME,SAASxL,OAAS,MACpFiL,SAASE,OAAO,kBAAmBzL,SAASC,cAAcC,mBAAU0L,MAAMG,gBAAgBzL,OAC1FiL,SAASE,OAAO,sBAAuBzL,SAASC,cAAcC,mBAAU0L,MAAMI,oBAAoBrK,SAClG4J,SAASE,OAAO,YAAazL,SAASC,cAAc,4CAA4CK,OAChGiL,SAASE,OAAO,cAAezL,SAASC,cAAcC,mBAAU0L,MAAMK,YAAY3L,OAClFiL,SAASE,OAAO,oBAAqBzL,SAASC,cAAcC,mBAAU0L,MAAMM,kBAAkBvK,SAC9F4J,SAASE,OAAO,qBAAsBU,YAAYnM,SAASC,cAAcC,mBAAU0L,MAAMQ,kBAAkB9L,QAC3GiL,SAASE,OAAO,iBAAkBU,YAAYnM,SAASC,cAAcC,mBAAU0L,MAAMS,eAAe/L,QACpGiL,SAASE,OAAO,cAAeU,YAAYnM,SAASC,cAAcC,mBAAU0L,MAAMU,YAAYhM,QAC9Fd,KAAK,cAAe+L,cAGhBgB,IAAM,IAAIC,eACdD,IAAIE,mBAAqB,QACjBF,IAAIG,aAAeF,eAAeG,KAAM,OAClC3C,OAASuC,IAAIvC,UACJ,IAAXA,QAAiBA,QAAU,KAAOA,OAAS,IAAM,KAE7CzE,KAAOqH,KAAKC,MAAMN,IAAIO,cAC1BtN,KAAK,cAAe+F,MACpBlG,IAAIf,iBAAiBwC,MACrBzB,IAAIkG,KAAKwH,aAAa,GAAG1I,UACrB2I,IAAK,+BAAYzH,KAAKwH,aAAa,GAAG1I,KAAM/F,iBAAiBwC,KAAK4D,QAEtErF,IAAI2N,IACJ1O,iBAAiBwC,KAAKsD,OAAOJ,UAAYgJ,GAEzC1O,iBAAiBwC,KAAKgC,YAAckK,GACpC9G,cAAcpF,IAAKZ,mBAAUuB,SAASyI,QAAQ,GAC9C+C,eACI3O,iBAAiBwC,KAAK6I,WACtBrL,iBAAiBwC,KAAKsD,aAG1B8B,cAAcpF,IAAKZ,mBAAUuB,SAASwF,QAAQ,OAEjB,iBAAnBsF,IAAIG,YAClBrN,IAAI,2JAIZkN,IAAIW,KAAK,OAAQ1O,OAAO2O,UACxBZ,IAAIa,KAAK7B,WAWP0B,eAAiB,CAACtD,WAAYvF,gBAE1BiJ,IAAMrN,SAAS8D,cAAc,YACnCuJ,IAAIC,YAAc,8DACC,WAAf3D,WAAyB,KACrB4D,iBAAmBC,MAAMC,KAAKrJ,OAAOsJ,cAAcC,UACnDC,OAAQ,MACP,IAAIC,KAAKN,iBAAkB,IACpBA,iBAAiBM,GACnBC,YAAcT,IAAIS,UAAW,CAC/BF,OAAQ,SAIXA,OACDxJ,OAAOsJ,cAAczJ,YAAYoJ,OAUvC5D,WAAc3I,UACZC,EAAIf,SAASC,cAAcC,mBAAUuD,QAAQsK,MAAMC,MAClDpK,QAAQ,QAAS9C,SAEZ,OAANC,EAAY,KACRkN,EAAI,SAEmC,IAD3B,CAAC,OAAQ,OAAQ,UAAW,YAC9B7G,QAAQ7I,gBAClBgB,KAAK,sBAAwBhB,yBAIzB0P,EAAIC,iBAAiBpN,IAAKvC,gBAC5B,MAAOwC,GAEL1B,IAAK,qBAAoBd,0BAA0BuC,cAGpDmN,QAEA,CAAC7J,OAAQrD,EAAG4I,WAjBd,UAyBPuE,iBAAmB,CAACpN,IAAK6I,kBACvBwE,GAAK,QACLC,GAAK,YACDzE,gBACC,OACDwE,GAAK,SACLC,GAAKpO,SAASC,cACVC,mBAAUuD,QAAQsK,MAAMM,KACnBC,WAAW,QAASxN,gBAE5B,OACDqN,GAAK,SACLC,GAAKpO,SAASC,cAAcC,mBAAUuD,QAAQsK,MAAMQ,KAC/CD,WAAW,QAASxN,MACpB0N,cAAcC,kBAElB,cACA,WACDL,GAAKpO,SAASC,cAAcC,mBAAUuD,QAAQsK,MAAM/F,MAC/CsG,WAAW,QAASxN,YAG1B,CAACsD,OAAQgK,GAAIzE,WAAYwE,KAM9BvL,oBAAuB7B,IAErBA,EAAEI,OAAOQ,QACTjD,WAAWiC,SAAS+N,IAEhBA,EAAE/M,SAAWgN,aAAaD,GAAG3K,UAAU0C,SAAS,UAChDuC,aAAa0F,EAAE7J,aAAa,YAAa6J,EAAE/M,YAG/CjD,WAAWiC,SAAS+N,IAChBA,EAAE/M,SAAU,EACZqH,aAAa0F,EAAE7J,aAAa,aAAa,MAGjD1B,4BACA8F,oBAEE0F,aAAgB/N,MACXA,KAAKQ,QAAQkF,WAAWpG,mBAAUsH,YAAYoH,UAAWhO,KAAKiE,aAAa,cAKhF1B,0BAA4B,KAC9B1E,oBAAoByE,UAAW,MAC1B,IAAIwL,KAAKhQ,WAAY,IACdA,WAAWgQ,GACb/M,QAAS,CACXlD,oBAAoByE,UAAW,WASrCjB,kBAAqBlB,QACnB8N,MAAQ9N,EAAE8D,aAAa,iBACvB/D,IAAMgO,WAAWD,OACjBrK,OAASxE,SAASC,cAAcqG,WAAWpG,mBAAUsH,YAAYC,KAAM3G,MACvEyF,UAAYvG,SAASC,cAAcqG,WAAWpG,mBAAUsH,YAAYuH,WAAYF,QACpFrK,OAAOT,UAAUiL,OAAO,QACxBzI,UAAUxC,UAAUiL,OAAO,SAQzB7C,YAAc,SAACnF,OAAGiI,2DAAM,WACnBrC,KAAKsC,UAAUlI,EAAEmI,MAAMF,OAQ5B3I,WAAa,CAACU,EAAG0D,IACZ1D,EAAEpD,QAAQ,QAAS8G,GAOxBoE,WAAcpE,QACZ0E,EAAI1E,EAAEnC,MAAM,2BACR,GAAE6G,EAAE,MAAMA,EAAE,OAAOA,EAAE,OAK3BnG,iBAAmB,SACjBoG,MAAQ,EACRC,IAAM,EACNC,KAAO,EACXvP,SACKS,iBAAiBP,mBAAUuB,SAASoB,mBACpClC,SAASyK,YACFtK,IAAMsK,MAAMvG,aAAa,YACzB2K,QAAUC,SAAS3O,KACvBuO,OAASG,QAAQE,UACjBH,MAAQC,QAAQG,oBAChBL,KAAOE,QAAQI,0BAEjBF,UAAY1P,SAASC,cAAcC,mBAAUuB,SAASoO,WACtDC,cAAgB9P,SAASC,cAAcC,mBAAUuB,SAASmO,kBAC1DG,YAAc/P,SAASC,cAAcC,mBAAUuB,SAASkO,qBACxDK,aAAehQ,SAASC,cAAcC,mBAAUuB,SAASwO,YACzDC,aAAelQ,SAASC,cAAcC,mBAAUuB,SAAS0O,UACzD3M,OAASxD,SAASC,cAAcC,mBAAUuB,SAAS2O,0BACrDC,QAAUd,KAAOzQ,MAAMwR,UAAUC,MACrCb,UAAU5B,UAAYuB,MACtBS,cAAchC,UAAYwB,IAC1BS,YAAYjC,UAAYyB,KACxBS,aAAalC,UAAY/O,OAAOA,OAAOsR,SACvCH,aAAapC,UAAsC,OAA1BhP,MAAMwR,UAAUE,MAAiB,IAAMzR,OAAOA,OAAOD,MAAMwR,UAAUE,OAC1FH,SAAWvR,MAAMwR,UAAUE,OAC3BhN,OAAOO,UAAU2C,OAAO,iBACxBlD,OAAOO,UAAUkC,IAAI,kBAErBzC,OAAOO,UAAUkC,IAAI,iBACrBzC,OAAOO,UAAU2C,OAAO,kBAO1B+I,SAAY3O,UACV2D,WAAazE,SAASC,cAAcC,mBAAUsH,YAAYC,KAAK7D,QAAQ,QAAS9C,MAAM+D,aAAa,8BAChG4L,WAAWhM,aAOhBgM,WAAcC,YACVC,UAAYD,IAAIhL,OAEhBkL,aAAeF,IAAI9M,QAAQ,OAAQ,IAAI8B,aAEtC,WADYgL,IAAInI,MAAM,QAAQ7C,wBAGbiL,8BACGC,eAQzBtH,WAAcuH,gBACVC,UAAYC,KAAKF,SACjBG,MAAQC,WAAWxD,KAAKqD,WAAY1B,GAAMA,EAAE8B,YAAY,YACvD,IAAIC,aAAcC,OAAOJ,QAO9B1M,WAAc+M,aACD,IAAIC,WACAC,gBAAgBF,WAAY,aACpCG,gBAAgBlE"}