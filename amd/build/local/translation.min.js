/**
 * @module     local_deepler/deepler
 * @file       amd/src/local/translation.js
 * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_deepler/local/translation",["./api","./utils","./selectors","./ui","./tokeniser","./customevents"],((Api,Utils,Selectors,Ui,Tokeniser,Events)=>{let tempTranslations={},escapePatterns={},mainSourceLang="",targetLang="",settings={};const prepareDbUpdateItem=(item,maineditorIsTextArea)=>{const key=item.key,textTosave=getupdatedtext(key,maineditorIsTextArea);return item.text=textTosave,{courseid:item.courseid,id:item.id,tid:item.tid,field:item.field,table:item.table,text:textTosave}},getupdatedtext=(key,maineditorIsTextArea)=>{const sourceItemLang=tempTranslations[key].sourceLang,fieldText=tempTranslations[key].fieldText,translation=getEditorText(tempTranslations[key].editor,maineditorIsTextArea),source=getSourceText(key),isFirstTranslation=-1===fieldText.indexOf("{mlang"),isSourceOther=sourceItemLang===mainSourceLang,tagPatterns={other:"({mlang other)(.*?){mlang}",target:"({mlang ".concat(targetLang,"}(.*?){mlang})"),source:"({mlang ".concat(sourceItemLang,"}(.*?){mlang})")},langsItems={fullContent:fieldText,other:"{mlang other}".concat(source,"{mlang}"),target:"{mlang ".concat(targetLang,"}").concat(translation,"{mlang}"),source:"{mlang ".concat(sourceItemLang,"}").concat(source,"{mlang}")};return isFirstTranslation?isSourceOther?langsItems.other+langsItems.target:langsItems.other+langsItems.source+langsItems.target:additionalUpdate(isSourceOther,tagPatterns,langsItems)},additionalUpdate=(isSourceOther,tagPatterns,langsItems)=>{let manipulatedText=langsItems.fullContent;const targetReg=new RegExp(tagPatterns.target,"sg");if(manipulatedText.match(targetReg))manipulatedText=manipulatedText.replace(targetReg,Tokeniser.escapeReplacementString(langsItems.target));else{const lastMlangClosingTagEnd=manipulatedText.lastIndexOf("{mlang}")+"{mlang}".length;manipulatedText=[manipulatedText.slice(0,lastMlangClosingTagEnd),langsItems.target,manipulatedText.slice(lastMlangClosingTagEnd)].join("")}const otherReg=new RegExp(tagPatterns.other,"sg"),hasTagOther=manipulatedText.match(otherReg),sourceReg=new RegExp(tagPatterns.other,"sg"),hasTagSource=manipulatedText.match(sourceReg);if(isSourceOther)manipulatedText=manipulatedText.replace(otherReg,Tokeniser.escapeReplacementString(langsItems.other)),hasTagSource&&manipulatedText.replace(sourceReg,"");else{if(!hasTagOther){const firstMlangClosingTagEnd=manipulatedText.indexOf("{mlang");manipulatedText=[manipulatedText.slice(0,firstMlangClosingTagEnd),langsItems.other,manipulatedText.slice(firstMlangClosingTagEnd)].join("")}hasTagSource||manipulatedText.replace(sourceReg,Tokeniser.escapeReplacementString(langsItems.source))}return manipulatedText},getEditorText=(editor,maineditorIsTextArea)=>{let text=editor.innerHTML;return maineditorIsTextArea&&(text=Utils.decodeHTML(text)),text},getSourceText=key=>{const sourceTokenised=tempTranslations[key].source;return Tokeniser.postprocess(sourceTokenised,tempTranslations[key].tokens)},onTranslateSuccess=response=>{response.translations.forEach((tr=>{let key=tr.key,translation=Utils.postprocess(tr.text,tempTranslations[key].tokens);tempTranslations[key].editor.innerHTML=translation,tempTranslations[key].translation=translation,Ui.setIconStatus(key,Selectors.statuses.tosave,!0)}))},onTranslateFailed=(status,error)=>{window.console.log(status,error)},prepareAdvancedSettings=targetLang=>{var _document$querySelect,_document$querySelect2;Utils.info("prepareAdvancedSettings"),escapePatterns.LATEX=document.querySelector(Selectors.actions.escapeLatex).checked,escapePatterns.PRETAG=document.querySelector(Selectors.actions.escapePre).checked,settings.tag_handling=document.querySelector(Selectors.deepl.tagHandling).checked?"html":"xml",settings.context=null!==(_document$querySelect=document.querySelector(Selectors.deepl.context).value)&&void 0!==_document$querySelect?_document$querySelect:null,settings.split_sentences=document.querySelector(Selectors.deepl.splitSentences).value,settings.preserve_formatting=document.querySelector(Selectors.deepl.preserveFormatting).checked,settings.formality=document.querySelector('[name="local_deepler/formality"]:checked').value,settings.glossary_id=document.querySelector(Selectors.deepl.glossaryId).value,settings.outline_detection=document.querySelector(Selectors.deepl.outlineDetection).checked,settings.non_splitting_tags=Utils.toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value),settings.splitting_tags=Utils.toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value),settings.ignore_tags=Utils.toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value),settings.target_lang=targetLang.toUpperCase(),settings.model_type=null!==(_document$querySelect2=document.querySelector(Selectors.deepl.modelType).value)&&void 0!==_document$querySelect2?_document$querySelect2:"prefer_quality_optimized",settings.show_billed_characters=!0};return{callTranslations:keys=>{const translations=[],options=prepareAdvancedSettings(document.querySelector(Selectors.actions.targetSwitcher).value);keys.forEach((key=>{translations.push((key=>({text:tempTranslations[key].source,source_lang:tempTranslations[key].sourceLang,key:key}))(key))})),Events.on(Api.DEEPL_SUCCESS,onTranslateSuccess),Events.on(Api.DEEPL_FAILED,onTranslateFailed),Api.translate(translations,options)},saveTranslations:(keys,maineditorIsTextArea)=>{const data=keys.map((item=>prepareDbUpdateItem(item,maineditorIsTextArea)));Events.on(Api.TR_DB_SUCCESS),Api.updateTranslationsInDb(data)},initTempForKey:(key,editorSettings,sourceTextEncoded,multilangRawTextEncoded,sourceLang)=>{const sourceText=Utils.fromBase64(sourceTextEncoded),fieldText=Utils.fromBase64(multilangRawTextEncoded),tokenised=Tokeniser.preprocess(sourceText,escapePatterns,escapePatterns);tempTranslations[key]={editorType:editorSettings.editorType,editor:editorSettings.editor,source:tokenised.tokenizedText,sourceLang:sourceLang,fieldText:fieldText,status:Selectors.statuses.wait,translation:"",tokens:tokenised.expressions}},initTemp:key=>{tempTranslations[key]={editorType:null,editor:null,source:"",sourceLang:"",fieldText:"",status:"",translation:"",tokens:[]}},setMainLangs:(source,target)=>{mainSourceLang=source,targetLang=target},isTranslatable:function(){let sourceLang=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return Utils.info(targetLang,sourceLang,targetLang===(""===sourceLang?mainSourceLang:sourceLang)),targetLang===(""===sourceLang?mainSourceLang:sourceLang)},translated:key=>{var _tempTranslations$key,_tempTranslations$key2;return(null===(_tempTranslations$key=tempTranslations[key])||void 0===_tempTranslations$key||null===(_tempTranslations$key2=_tempTranslations$key.translation)||void 0===_tempTranslations$key2?void 0:_tempTranslations$key2.length)>0}}}));

//# sourceMappingURL=translation.min.js.map