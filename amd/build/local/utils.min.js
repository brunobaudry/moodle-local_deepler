/**
 * @module     local_deepler/deepler
 * @file       amd/src/local/utils.js
 * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_deepler/local/utils",[],(()=>{const debug_NORMAL=15,debug_ALL=30719,debug_DEVELOPER=32767;let log=function(){for(var _len=arguments.length,a=new Array(_len),_key=0;_key<_len;_key++)a[_key]=arguments[_key];return a},warn=function(){for(var _len2=arguments.length,a=new Array(_len2),_key2=0;_key2<_len2;_key2++)a[_key2]=arguments[_key2];return a},info=function(){for(var _len3=arguments.length,a=new Array(_len3),_key3=0;_key3<_len3;_key3++)a[_key3]=arguments[_key3];return a},error=function(){for(var _len4=arguments.length,a=new Array(_len4),_key4=0;_key4<_len4;_key4++)a[_key4]=arguments[_key4];return a};return{registerLoggers:debugConfig=>{error=window.console.error.bind(window.console),debugConfig===debug_NORMAL?(error=window.console.error.bind(window.console),warn=window.console.warn.bind(window.console)):debugConfig===debug_ALL?(error=window.console.error.bind(window.console),warn=window.console.warn.bind(window.console),info=window.console.info.bind(window.console)):debugConfig===debug_DEVELOPER&&(window.console.log("Moodle debug level ".concat(debugConfig),debugConfig===debug_DEVELOPER),warn=window.console.warn.bind(window.console),info=window.console.info.bind(window.console),log=window.console.log.bind(window.console),window.console.log("Moodle debug level ".concat(debugConfig),debugConfig===debug_DEVELOPER),log("Moodle debug level ".concat(debugConfig),debugConfig===debug_DEVELOPER))},info:info,error:error,warn:warn,log:log,replaceKey:(s,k)=>s.replace("<KEY>",k),keyidToKey:k=>{let m=k.match(/^(.+)-(.+)-(.+)$/i);return"".concat(m[1],"[").concat(m[2],"][").concat(m[3],"]")},decodeHTML:encodedStr=>(new DOMParser).parseFromString(encodedStr,"text/html").documentElement.textContent,stripHTMLTags:str=>(new DOMParser).parseFromString(str,"text/html").body.textContent||"",fromBase64:encoded=>{const binString=atob(encoded),bytes=Uint8Array.from(binString,(m=>m.codePointAt(0)));return(new TextDecoder).decode(bytes)},toJsonArray:function(s){let sep=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return JSON.stringify(s.split(sep))}}}));

//# sourceMappingURL=utils.min.js.map