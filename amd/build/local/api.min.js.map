{"version":3,"file":"api.min.js","sources":["../../src/local/api.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/api.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/log', 'core/ajax', './utils', './customevents'], (Log, Ajax, Utils, Events) => {\n    const TR_DB_SUCCESS = 'onDbUpdateSuccess';\n    const GLOSSARY_ENTRIES_SUCCESS = 'onGlossaryEntriesSuccess';\n    const GLOSSARY_ENTRIES_FAILED = 'onGlossaryEntriesFailed';\n    const GLOSSARY_DB_SUCCESS = 'onDbGlossaryUpdateSuccess';\n    const TR_DB_FAILED = 'onDbUpdateFailed';\n    const GLOSSARY_DB_FAILED = 'onDbGlossaryUpdateFailed';\n    const GLOSSARY_DB_ALL_FAILED = 'onDbGlossaryUpdateAllFailed';\n    const DEEPL_SUCCESS = 'onDeeplTrSuccess';\n    const DEEPL_RF_SUCCESS = 'onDeeplRfSuccess';\n    const DEEPL_FAILED = 'onDeeplTrFailed';\n    const DEEPL_RF_FAILED = 'onDeeplRfFailed';\n    let APP_VERSION = '';\n    /**\n     * Service to update used glossary timestamp.\n     *\n     * @param {object} glossaries\n     */\n    const updateGlossariesUsage = (glossaries)=>{\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_glossary\",\n                args: {'glossaryids': glossaries},\n                done: (response)=>{\n\n                    response.forEach((r)=>{\n                        if (r.sattus === 'error') {\n                            Events.emit(GLOSSARY_DB_FAILED, r);\n                        } else {\n                            Events.emit(GLOSSARY_DB_SUCCESS, r);\n                        }\n                    });\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateGlossariesUsage/fail::jqXHR`);\n                    Log.error(jqXHR);\n                    Events.emit(GLOSSARY_DB_ALL_FAILED, jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status ?? error);\n                }\n            }\n        ]);\n    };\n    /**\n     * Service to update used glossary visibility.\n     *\n     * @param {string} glossaryId\n     * @param {int} visibility\n     */\n    const updateGlossariesVisibility = (glossaryId, visibility)=>{\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_glossary_visibility\",\n                args: {'glossaryid': glossaryId, 'shared': visibility},\n                done: (response)=>{\n                    Events.emit(GLOSSARY_DB_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateGlossariesVisibility/fail::jqXHR`);\n                    Log.error(jqXHR);\n                    Events.emit(GLOSSARY_DB_FAILED, jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status ?? error);\n                }\n            }\n        ]);\n    };\n    /**\n     * Service to update used glossary visibility.\n     *\n     * @param {string} glossaryId\n     * @param {string} version\n     */\n    const getGlossariesEntries = (glossaryId, version)=>{\n        Ajax.call([\n            {\n                methodname: \"local_deepler_get_glossary_entries\",\n                args: {'glossaryid': glossaryId, 'version': version},\n                done: (response)=>{\n                    Events.emit(GLOSSARY_ENTRIES_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/getGlossariesEntries/fail::jqXHR`);\n                    Log.error(jqXHR);\n                    Events.emit(GLOSSARY_ENTRIES_FAILED, jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status ?? error);\n                }\n            }\n        ]);\n    };\n    /**\n     *\n     * @param {object} data\n     * @param {int} userid\n     * @param {int} courseid\n     */\n    const updateTranslationsInDb = (data, userid, courseid) => {\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_translation\",\n                args: {\n                    data: data,\n                    userid: userid,\n                    courseid: courseid,\n                    action: 'update'\n                },\n                done: (response) => {\n                    if (response.length === 1 && response[0].error && response[0].keyid === '') {\n                        Log.warn(`api/updateTranslationsInDb/done::response has errors`);\n                        Events.emit(TR_DB_FAILED, response[0].error);\n                        return;\n                    }\n                    Events.emit(TR_DB_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateTranslationsInDb/fail::jqXHR`);\n                    Log.error(jqXHR);\n                     Events.emit(TR_DB_FAILED, jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status ?? error);\n                }\n            }]\n        );\n    };\n    /**\n     * Parent DeepL external service caller.\n     *\n     * @param {object} args\n     * @param {string} endPoint\n     * @param {string} successEvent\n     * @param {string} failedEvent\n     */\n    const deeplService = (args, endPoint, successEvent, failedEvent)=>{\n        Ajax.call([{\n            methodname: endPoint,\n            args: args,\n            done: (response) => {\n                Events.emit(successEvent, response);\n            },\n            fail: (jqXHR, status, error) => {\n                Log.debug(`${endPoint} api/translate/fail::jqXHR`);\n                Log.debug(jqXHR);\n                Events.emit(failedEvent, jqXHR.debuginfo ?? jqXHR.message ?? error ?? jqXHR.errorcode ?? '');\n            }\n        }]);\n    };\n    /**\n     * Calls Deepl's translation.\n     * @param {object} data\n     * @param {object} options\n     * @param {string} version\n     */\n    const translate = (data, options, version) => {\n        const args = {\n            translations: data, // Array of text, keys, source_lang\n            options: options, // Object with DeepL's settings options including target_lang.\n            version: version\n        };\n        deeplService(args, 'local_deepler_get_translation', DEEPL_SUCCESS, DEEPL_FAILED);\n    };\n    /**\n     * Calls Deepl's rephrase.\n     * @param {object} data\n     * @param {object} options\n     * @param {string} version\n     */\n    const rephrase = (data, options, version) => {\n        const args = {\n            rephrasings: data, // Array of text, keys, source_lang\n            options: options, // Object with DeepL's settings options including target_lang.\n            version: version\n        };\n        deeplService(args, 'local_deepler_get_rephrase', DEEPL_RF_SUCCESS, DEEPL_RF_FAILED);\n    };\n    /**\n     * Api to be used by the other modules.\n     */\n    return {\n        APP_VERSION: APP_VERSION,\n        GLOSSARY_ENTRIES_SUCCESS: GLOSSARY_ENTRIES_SUCCESS,\n        GLOSSARY_ENTRIES_FAILED: GLOSSARY_ENTRIES_FAILED,\n        GLOSSARY_DB_SUCCESS: GLOSSARY_DB_SUCCESS,\n        GLOSSARY_DB_FAILED: GLOSSARY_DB_FAILED,\n        GLOSSARY_DB_ALL_FAILED: GLOSSARY_DB_ALL_FAILED,\n        TR_DB_SUCCESS: TR_DB_SUCCESS,\n        TR_DB_FAILED: TR_DB_FAILED,\n        DEEPL_SUCCESS: DEEPL_SUCCESS,\n        DEEPL_RF_SUCCESS: DEEPL_RF_SUCCESS,\n        DEEPL_FAILED: DEEPL_FAILED,\n        DEEPL_RF_FAILED: DEEPL_RF_FAILED,\n        getGlossariesEntries: getGlossariesEntries,\n        updateGlossariesUsage: updateGlossariesUsage,\n        updateGlossariesVisibility: updateGlossariesVisibility,\n        updateTranslationsInDb: updateTranslationsInDb,\n        translate: translate,\n        rephrase: rephrase\n    };\n});\n"],"names":["define","Log","Ajax","Utils","Events","deeplService","args","endPoint","successEvent","failedEvent","call","methodname","done","response","emit","fail","jqXHR","status","error","debug","debuginfo","message","errorcode","APP_VERSION","GLOSSARY_ENTRIES_SUCCESS","GLOSSARY_ENTRIES_FAILED","GLOSSARY_DB_SUCCESS","GLOSSARY_DB_FAILED","GLOSSARY_DB_ALL_FAILED","TR_DB_SUCCESS","TR_DB_FAILED","DEEPL_SUCCESS","DEEPL_RF_SUCCESS","DEEPL_FAILED","DEEPL_RF_FAILED","getGlossariesEntries","glossaryId","version","glossaryid","updateGlossariesUsage","glossaries","glossaryids","forEach","r","sattus","updateGlossariesVisibility","visibility","shared","updateTranslationsInDb","data","userid","courseid","action","length","keyid","warn","translate","options","translations","rephrase","rephrasings"],"mappings":"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"}