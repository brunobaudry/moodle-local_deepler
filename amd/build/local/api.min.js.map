{"version":3,"file":"api.min.js","sources":["../../src/local/api.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/api.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/log', 'core/ajax', './utils', './customevents'], (Log, Ajax, Utils, Events) => {\n    const callApi = (methodname, args) => {\n        return Ajax.call([{\n            methodname: methodname,\n            args: args\n        }]);\n    };\n    const TR_DB_SUCCESS = 'onTranslationUpdateSuccess';\n    const DEEPL_SUCCESS = 'onDeeplUpdateSuccess';\n    const TR_DB_FAILED = 'onTranslationUpdateFailed';\n    const DEEPL_FAILED = 'onDeeplUpdateFailed';\n    const updateTranslationsInDb = (data, userid, courseid) => {\n        Log.debug(`api.updateTranslationsInDb.33`);\n        Log.debug(data);\n        Log.debug(courseid);\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_translation\",\n                args: {\n                    data: data,\n                    userid: userid,\n                    courseid: courseid\n                },\n                done: (response) => {\n                    if (response.length === 1 && response[0].error && response[0].keyid === '') {\n                        Log.error(`api/updateTranslationsInDb/done:44`);\n                        Log.error(response);\n                        Events.emit(TR_DB_FAILED, response[0].error);\n                        return;\n                    }\n                    Events.emit(TR_DB_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateTranslationsInDb/fail:50`);\n                    Log.error(jqXHR);\n                    Log.error(`api/updateTranslationsInDb/fail:52`);\n                    Log.error(status);\n                    Log.log(`api/updateTranslationsInDb/fail:54`);\n                    Log.error(error);\n                     Events.emit(TR_DB_FAILED, error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status);\n                }\n            }]\n        );\n    };\n    const translate = (data, options) => {\n        Log.debug(`api.translate.57`);\n        Log.debug(data);\n        Log.debug(`api/translate:60`);\n        Log.debug(options);\n        Ajax.call([{\n            methodname: \"local_deepler_get_translation\",\n            args: {\n                translations: data, // Array of text, keys, source_lang\n                options: options // Object with DeepL's settings options including target_lang.\n            },\n            done: (response) => {\n                Events.emit(DEEPL_SUCCESS, response);\n                // SuccessCallback(response);\n            },\n            fail: (jqXHR, status, error) => {\n                Log.error(jqXHR);\n                Log.error(status);\n                Log.error(error);\n                Events.emit(DEEPL_FAILED, status ?? '', error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode);\n                // FailCallback(jqXHR, status, error);\n            }\n        }]);\n    };\n\n    return {\n        TR_DB_SUCCESS: TR_DB_SUCCESS,\n        TR_DB_FAILED: TR_DB_FAILED,\n        DEEPL_SUCCESS: DEEPL_SUCCESS,\n        DEEPL_FAILED: DEEPL_FAILED,\n        callApi: callApi,\n        updateTranslationsInDb: updateTranslationsInDb,\n        translate: translate\n    };\n});\n"],"names":["define","Log","Ajax","Utils","Events","TR_DB_FAILED","TR_DB_SUCCESS","DEEPL_SUCCESS","DEEPL_FAILED","callApi","methodname","args","call","updateTranslationsInDb","data","userid","courseid","debug","done","response","length","error","keyid","emit","fail","jqXHR","status","log","debuginfo","message","errorcode","translate","options","translations"],"mappings":";;;;;;AAqBAA,iCAAO,CAAC,WAAY,YAAa,UAAW,mBAAmB,CAACC,IAAKC,KAAMC,MAAOC,gBASxEC,aAAe,kCA4Dd,CACHC,cA/DkB,6BAgElBD,aAAcA,aACdE,cAhEkB,uBAiElBC,aA/DiB,sBAgEjBC,QAzEY,CAACC,WAAYC,OAClBT,KAAKU,KAAK,CAAC,CACdF,WAAYA,WACZC,KAAMA,QAuEVE,uBAhE2B,CAACC,KAAMC,OAAQC,YAC1Cf,IAAIgB,uCACJhB,IAAIgB,MAAMH,MACVb,IAAIgB,MAAMD,UACVd,KAAKU,KAAK,CACN,CACIF,WAAY,mCACZC,KAAM,CACFG,KAAMA,KACNC,OAAQA,OACRC,SAAUA,UAEdE,KAAOC,cACqB,IAApBA,SAASC,QAAgBD,SAAS,GAAGE,OAA+B,KAAtBF,SAAS,GAAGG,aAC1DrB,IAAIoB,4CACJpB,IAAIoB,MAAMF,eACVf,OAAOmB,KAAKlB,aAAcc,SAAS,GAAGE,OAG1CjB,OAAOmB,KAvBD,6BAuBqBJ,WAE/BK,KAAM,CAACC,MAAOC,OAAQL,8BAClBpB,IAAIoB,4CACJpB,IAAIoB,MAAMI,OACVxB,IAAIoB,4CACJpB,IAAIoB,MAAMK,QACVzB,IAAI0B,0CACJ1B,IAAIoB,MAAMA,OACTjB,OAAOmB,KAAKlB,sDAAcgB,MAAAA,MAAAA,MAASI,MAAMG,iCAAaH,MAAMI,+BAAWJ,MAAMK,+BAAaJ,aAqCvGK,UAhCc,CAACjB,KAAMkB,WACrB/B,IAAIgB,0BACJhB,IAAIgB,MAAMH,MACVb,IAAIgB,0BACJhB,IAAIgB,MAAMe,SACV9B,KAAKU,KAAK,CAAC,CACPF,WAAY,gCACZC,KAAM,CACFsB,aAAcnB,KACdkB,QAASA,SAEbd,KAAOC,WACHf,OAAOmB,KAhDG,uBAgDiBJ,WAG/BK,KAAM,CAACC,MAAOC,OAAQL,yBAClBpB,IAAIoB,MAAMI,OACVxB,IAAIoB,MAAMK,QACVzB,IAAIoB,MAAMA,OACVjB,OAAOmB,KArDE,sBAqDiBG,MAAAA,OAAAA,OAAU,+BAAIL,MAAAA,MAAAA,MAASI,MAAMG,iCAAaH,MAAMI,+BAAWJ,MAAMK"}