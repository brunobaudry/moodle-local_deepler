{"version":3,"file":"api.min.js","sources":["../../src/local/api.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/api.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/log', 'core/ajax', './utils', './customevents'], (Log, Ajax, Utils, Events) => {\n    const TR_DB_SUCCESS = 'onTranslationUpdateSuccess';\n    const DEEPL_SUCCESS = 'onDeeplUpdateSuccess';\n    const TR_DB_FAILED = 'onTranslationUpdateFailed';\n    const DEEPL_FAILED = 'onDeeplUpdateFailed';\n    let APP_VERSION = '';\n    const updateTranslationsInDb = (data, userid, courseid) => {\n        Log.debug(`api.updateTranslationsInDb.33`);\n        Log.debug(data);\n        Log.debug(courseid);\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_translation\",\n                args: {\n                    data: data,\n                    userid: userid,\n                    courseid: courseid\n                },\n                done: (response) => {\n                    if (response.length === 1 && response[0].error && response[0].keyid === '') {\n                        Log.error(`api/updateTranslationsInDb/done:44`);\n                        Log.error(response);\n                        Events.emit(TR_DB_FAILED, response[0].error);\n                        return;\n                    }\n                    Events.emit(TR_DB_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateTranslationsInDb/fail:50`);\n                    Log.error(jqXHR);\n                    Log.error(`api/updateTranslationsInDb/fail:52`);\n                    Log.error(status);\n                    Log.log(`api/updateTranslationsInDb/fail:54`);\n                    Log.error(error);\n                     Events.emit(TR_DB_FAILED, error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status);\n                }\n            }]\n        );\n    };\n    const translate = (data, options, version) => {\n        const args = {\n            translations: data, // Array of text, keys, source_lang\n            options: options, // Object with DeepL's settings options including target_lang.\n            version: version\n        };\n        Log.info(`api/translate:77 > args`);\n        Log.info(args);\n        Ajax.call([{\n            methodname: \"local_deepler_get_translation\",\n            args: args,\n            done: (response) => {\n                Events.emit(DEEPL_SUCCESS, response);\n            },\n            fail: (jqXHR, status, error) => {\n                Log.error(jqXHR);\n                Events.emit(DEEPL_FAILED, status ?? '', error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode);\n            }\n        }]);\n    };\n\n    return {\n        APP_VERSION: APP_VERSION,\n        TR_DB_SUCCESS: TR_DB_SUCCESS,\n        TR_DB_FAILED: TR_DB_FAILED,\n        DEEPL_SUCCESS: DEEPL_SUCCESS,\n        DEEPL_FAILED: DEEPL_FAILED,\n        updateTranslationsInDb: updateTranslationsInDb,\n        translate: translate\n    };\n});\n"],"names":["define","Log","Ajax","Utils","Events","TR_DB_FAILED","APP_VERSION","TR_DB_SUCCESS","DEEPL_SUCCESS","DEEPL_FAILED","updateTranslationsInDb","data","userid","courseid","debug","call","methodname","args","done","response","length","error","keyid","emit","fail","jqXHR","status","log","debuginfo","message","errorcode","translate","options","version","translations","info"],"mappings":";;;;;;AAqBAA,iCAAO,CAAC,WAAY,YAAa,UAAW,mBAAmB,CAACC,IAAKC,KAAMC,MAAOC,gBAGxEC,aAAe,kCAyDd,CACHC,YAxDc,GAyDdC,cA7DkB,6BA8DlBF,aAAcA,aACdG,cA9DkB,uBA+DlBC,aA7DiB,sBA8DjBC,uBA5D2B,CAACC,KAAMC,OAAQC,YAC1CZ,IAAIa,uCACJb,IAAIa,MAAMH,MACVV,IAAIa,MAAMD,UACVX,KAAKa,KAAK,CACN,CACIC,WAAY,mCACZC,KAAM,CACFN,KAAMA,KACNC,OAAQA,OACRC,SAAUA,UAEdK,KAAOC,cACqB,IAApBA,SAASC,QAAgBD,SAAS,GAAGE,OAA+B,KAAtBF,SAAS,GAAGG,aAC1DrB,IAAIoB,4CACJpB,IAAIoB,MAAMF,eACVf,OAAOmB,KAAKlB,aAAcc,SAAS,GAAGE,OAG1CjB,OAAOmB,KAxBD,6BAwBqBJ,WAE/BK,KAAM,CAACC,MAAOC,OAAQL,8BAClBpB,IAAIoB,4CACJpB,IAAIoB,MAAMI,OACVxB,IAAIoB,4CACJpB,IAAIoB,MAAMK,QACVzB,IAAI0B,0CACJ1B,IAAIoB,MAAMA,OACTjB,OAAOmB,KAAKlB,sDAAcgB,MAAAA,MAAAA,MAASI,MAAMG,iCAAaH,MAAMI,+BAAWJ,MAAMK,+BAAaJ,aAiCvGK,UA5Bc,CAACpB,KAAMqB,QAASC,iBACxBhB,KAAO,CACTiB,aAAcvB,KACdqB,QAASA,QACTC,QAASA,SAEbhC,IAAIkC,gCACJlC,IAAIkC,KAAKlB,MACTf,KAAKa,KAAK,CAAC,CACPC,WAAY,gCACZC,KAAMA,KACNC,KAAOC,WACHf,OAAOmB,KAjDG,uBAiDiBJ,WAE/BK,KAAM,CAACC,MAAOC,OAAQL,yBAClBpB,IAAIoB,MAAMI,OACVrB,OAAOmB,KAnDE,sBAmDiBG,MAAAA,OAAAA,OAAU,+BAAIL,MAAAA,MAAAA,MAASI,MAAMG,iCAAaH,MAAMI,+BAAWJ,MAAMK"}