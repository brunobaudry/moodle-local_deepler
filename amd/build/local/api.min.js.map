{"version":3,"file":"api.min.js","sources":["../../src/local/api.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/api.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', './utils', './customevents'], (Ajax, Utils, Events) => {\n    const callApi = (methodname, args) => {\n        return Ajax.call([{\n            methodname: methodname,\n            args: args\n        }]);\n    };\n    const TR_DB_SUCCESS = 'onTranslationUpdateSuccess';\n    const DEEPL_SUCCESS = 'onDeeplUpdateSuccess';\n    const TR_DB_FAILED = 'onTranslationUpdateFailed';\n    const DEEPL_FAILED = 'onDeeplUpdateFailed';\n    const updateTranslationsInDb = (data) => {\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_translation\",\n                args: {\n                    data: data,\n                },\n                done: (response) => {\n                    Events.emit(TR_DB_SUCCESS, response);\n                    // SuccessCallback(response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Events.emit(TR_DB_FAILED, status, error);\n                    // FailCallback(jqXHR, status, error);\n                }\n            }]\n        );\n    };\n    const translate = (data, options) => {\n        Ajax.call([{\n            methodname: \"local_deepler_get_translation\",\n            args: {\n                data: data, // Array of text, keys, source_lang\n                options: options // Object with DeepL's settings options including target_lang.\n            },\n            done: (response) => {\n                Events.emit(DEEPL_SUCCESS, response);\n                // SuccessCallback(response);\n            },\n            fail: (jqXHR, status, error) => {\n                Events.emit(DEEPL_FAILED, status, error);\n                // FailCallback(jqXHR, status, error);\n            }\n        }]);\n    };\n\n    return {\n        TR_DB_SUCCESS: TR_DB_SUCCESS,\n        TR_DB_FAILED: TR_DB_FAILED,\n        DEEPL_SUCCESS: DEEPL_SUCCESS,\n        DEEPL_FAILED: DEEPL_FAILED,\n        callApi: callApi,\n        updateTranslationsInDb: updateTranslationsInDb,\n        translate: translate\n    };\n});\n"],"names":["define","Ajax","Utils","Events","TR_DB_SUCCESS","TR_DB_FAILED","DEEPL_SUCCESS","DEEPL_FAILED","callApi","methodname","args","call","updateTranslationsInDb","data","done","response","emit","fail","jqXHR","status","error","translate","options"],"mappings":";;;;;;AAqBAA,iCAAO,CAAC,YAAa,UAAW,mBAAmB,CAACC,KAAMC,MAAOC,UA+CtD,CACHC,cAzCkB,6BA0ClBC,aAxCiB,4BAyCjBC,cA1CkB,uBA2ClBC,aAzCiB,sBA0CjBC,QAnDY,CAACC,WAAYC,OAClBT,KAAKU,KAAK,CAAC,CACdF,WAAYA,WACZC,KAAMA,QAiDVE,uBA1C4BC,OAC5BZ,KAAKU,KAAK,CACN,CACIF,WAAY,mCACZC,KAAM,CACFG,KAAMA,MAEVC,KAAOC,WACHZ,OAAOa,KAZD,6BAYqBD,WAG/BE,KAAM,CAACC,MAAOC,OAAQC,SAClBjB,OAAOa,KAdF,4BAcqBG,OAAQC,YA+B9CC,UAzBc,CAACR,KAAMS,WACrBrB,KAAKU,KAAK,CAAC,CACPF,WAAY,gCACZC,KAAM,CACFG,KAAMA,KACNS,QAASA,SAEbR,KAAOC,WACHZ,OAAOa,KA7BG,uBA6BiBD,WAG/BE,KAAM,CAACC,MAAOC,OAAQC,SAClBjB,OAAOa,KA/BE,sBA+BiBG,OAAQC"}