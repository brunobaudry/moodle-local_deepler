{"version":3,"file":"api.min.js","sources":["../../src/local/api.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/api.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/log', 'core/ajax', './utils', './customevents'], (Log, Ajax, Utils, Events) => {\n    const TR_DB_SUCCESS = 'onDbUpdateSuccess';\n    const GLOSSARY_ENTRIES_SUCCESS = 'onGlossaryEntriesSuccess';\n    const GLOSSARY_ENTRIES_FAILED = 'onGlossaryEntriesFailed';\n    const GLOSSARY_DB_SUCCESS = 'onDbGlossaryUpdateSuccess';\n    const TR_DB_FAILED = 'onDbUpdateFailed';\n    const GLOSSARY_DB_FAILED = 'onDbGlossaryUpdateFailed';\n    const GLOSSARY_DB_ALL_FAILED = 'onDbGlossaryUpdateAllFailed';\n    const DEEPL_SUCCESS = 'onDeeplTrSuccess';\n    const DEEPL_RF_SUCCESS = 'onDeeplRfSuccess';\n    const DEEPL_FAILED = 'onDeeplTrFailed';\n    const DEEPL_RF_FAILED = 'onDeeplRfFailed';\n    let APP_VERSION = '';\n    /**\n     * Service to update used glossary timestamp.\n     *\n     * @param {object} glossaries\n     */\n    const updateGlossariesUsage = (glossaries)=>{\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_glossary\",\n                args: {'glossaryids': glossaries},\n                done: (response)=>{\n\n                    response.forEach((r)=>{\n                        if (r.sattus === 'error') {\n                            Events.emit(GLOSSARY_DB_FAILED, r);\n                        } else {\n                            Events.emit(GLOSSARY_DB_SUCCESS, r);\n                        }\n                    });\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateGlossariesUsage/fail::jqXHR`);\n                    Log.error(jqXHR);\n                    Events.emit(GLOSSARY_DB_ALL_FAILED, error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status);\n                }\n            }\n        ]);\n    };\n    /**\n     * Service to update used glossary visibility.\n     *\n     * @param {string} glossaryId\n     * @param {int} visibility\n     */\n    const updateGlossariesVisibility = (glossaryId, visibility)=>{\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_glossary_visibility\",\n                args: {'glossaryid': glossaryId, 'shared': visibility},\n                done: (response)=>{\n                    Events.emit(GLOSSARY_DB_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateGlossariesVisibility/fail::jqXHR`);\n                    Log.error(jqXHR);\n                    Events.emit(GLOSSARY_DB_FAILED, error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status);\n                }\n            }\n        ]);\n    };\n    /**\n     * Service to update used glossary visibility.\n     *\n     * @param {string} glossaryId\n     * @param {string} source\n     * @param {string} target\n     */\n    const getGlossariesEntries = (glossaryId, source, target)=>{\n        Ajax.call([\n            {\n                methodname: \"local_deepler_get_glossary_entries\",\n                args: {\n                    'glossaryid': glossaryId,\n                    'source': source,\n                    'target': target,\n                },\n                done: (response)=>{\n                    Events.emit(GLOSSARY_ENTRIES_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/getGlossariesEntries/fail::jqXHR`);\n                    Log.error(jqXHR);\n                    Events.emit(GLOSSARY_ENTRIES_FAILED, error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status);\n                }\n            }\n        ]);\n    };\n    /**\n     *\n     * @param {object} data\n     * @param {int} userid\n     * @param {int} courseid\n     */\n    const updateTranslationsInDb = (data, userid, courseid) => {\n        Ajax.call([\n            {\n                methodname: \"local_deepler_update_translation\",\n                args: {\n                    data: data,\n                    userid: userid,\n                    courseid: courseid,\n                    action: 'update'\n                },\n                done: (response) => {\n                    if (response.length === 1 && response[0].error && response[0].keyid === '') {\n                        Log.warn(`api/updateTranslationsInDb/done::response has errors`);\n                        Events.emit(TR_DB_FAILED, response[0].error);\n                        return;\n                    }\n                    Events.emit(TR_DB_SUCCESS, response);\n                },\n                fail: (jqXHR, status, error) => {\n                    Log.error(`api/updateTranslationsInDb/fail::jqXHR`);\n                    Log.error(jqXHR);\n                     Events.emit(TR_DB_FAILED, error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode ?? status);\n                }\n            }]\n        );\n    };\n    /**\n     * Parent DeepL external service caller.\n     *\n     * @param {object} args\n     * @param {string} endPoint\n     * @param {string} successEvent\n     * @param {string} failedEvent\n     */\n    const deeplService = (args, endPoint, successEvent, failedEvent)=>{\n        Ajax.call([{\n            methodname: endPoint,\n            args: args,\n            done: (response) => {\n                Events.emit(successEvent, response);\n            },\n            fail: (jqXHR, status, error) => {\n                Log.debug(`${endPoint} api/translate/fail::jqXHR`);\n                Log.debug(jqXHR);\n                Events.emit(failedEvent, status ?? '', error ?? jqXHR.debuginfo ?? jqXHR.message ?? jqXHR.errorcode);\n            }\n        }]);\n    };\n    /**\n     * Calls Deepl's translation.\n     * @param {object} data\n     * @param {object} options\n     * @param {string} version\n     */\n    const translate = (data, options, version) => {\n        const args = {\n            translations: data, // Array of text, keys, source_lang\n            options: options, // Object with DeepL's settings options including target_lang.\n            version: version\n        };\n        deeplService(args, 'local_deepler_get_translation', DEEPL_SUCCESS, DEEPL_FAILED);\n    };\n    /**\n     * Calls Deepl's rephrase.\n     * @param {object} data\n     * @param {object} options\n     * @param {string} version\n     */\n    const rephrase = (data, options, version) => {\n        const args = {\n            rephrasings: data, // Array of text, keys, source_lang\n            options: options, // Object with DeepL's settings options including target_lang.\n            version: version\n        };\n        deeplService(args, 'local_deepler_get_rephrase', DEEPL_RF_SUCCESS, DEEPL_RF_FAILED);\n    };\n    /**\n     * Api to be used by the other modules.\n     */\n    return {\n        APP_VERSION: APP_VERSION,\n        GLOSSARY_ENTRIES_SUCCESS: GLOSSARY_ENTRIES_SUCCESS,\n        GLOSSARY_ENTRIES_FAILED: GLOSSARY_ENTRIES_FAILED,\n        GLOSSARY_DB_SUCCESS: GLOSSARY_DB_SUCCESS,\n        GLOSSARY_DB_FAILED: GLOSSARY_DB_FAILED,\n        GLOSSARY_DB_ALL_FAILED: GLOSSARY_DB_ALL_FAILED,\n        TR_DB_SUCCESS: TR_DB_SUCCESS,\n        TR_DB_FAILED: TR_DB_FAILED,\n        DEEPL_SUCCESS: DEEPL_SUCCESS,\n        DEEPL_RF_SUCCESS: DEEPL_RF_SUCCESS,\n        DEEPL_FAILED: DEEPL_FAILED,\n        DEEPL_RF_FAILED: DEEPL_RF_FAILED,\n        getGlossariesEntries: getGlossariesEntries,\n        updateGlossariesUsage: updateGlossariesUsage,\n        updateGlossariesVisibility: updateGlossariesVisibility,\n        updateTranslationsInDb: updateTranslationsInDb,\n        translate: translate,\n        rephrase: rephrase\n    };\n});\n"],"names":["define","Log","Ajax","Utils","Events","deeplService","args","endPoint","successEvent","failedEvent","call","methodname","done","response","emit","fail","jqXHR","status","error","debug","debuginfo","message","errorcode","APP_VERSION","GLOSSARY_ENTRIES_SUCCESS","GLOSSARY_ENTRIES_FAILED","GLOSSARY_DB_SUCCESS","GLOSSARY_DB_FAILED","GLOSSARY_DB_ALL_FAILED","TR_DB_SUCCESS","TR_DB_FAILED","DEEPL_SUCCESS","DEEPL_RF_SUCCESS","DEEPL_FAILED","DEEPL_RF_FAILED","getGlossariesEntries","glossaryId","source","target","updateGlossariesUsage","glossaries","forEach","r","sattus","updateGlossariesVisibility","visibility","updateTranslationsInDb","data","userid","courseid","action","length","keyid","warn","translate","options","version","translations","rephrase","rephrasings"],"mappings":"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"}