/**
 * @module     local_deepler/deepler
 * @file       amd/src/local/api.js
 * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_deepler/local/api",["core/log","core/ajax","./utils","./customevents"],(Log,Ajax,Utils,Events)=>{const deeplService=(args,endPoint,successEvent,failedEvent)=>{Ajax.call([{methodname:endPoint,args:args,done:response=>{Events.emit(successEvent,response)},fail:(jqXHR,status,error)=>{Log.debug(`${endPoint} api/translate/fail::jqXHR`),Log.debug(jqXHR),Events.emit(failedEvent,status??"",error??jqXHR.debuginfo??jqXHR.message??jqXHR.errorcode)}}])};return{APP_VERSION:"",GLOSSARY_ENTRIES_SUCCESS:"onGlossaryEntriesSuccess",GLOSSARY_ENTRIES_FAILED:"onGlossaryEntriesFailed",GLOSSARY_DB_SUCCESS:"onDbGlossaryUpdateSuccess",GLOSSARY_DB_FAILED:"onDbGlossaryUpdateFailed",GLOSSARY_DB_ALL_FAILED:"onDbGlossaryUpdateAllFailed",TR_DB_SUCCESS:"onDbUpdateSuccess",TR_DB_FAILED:"onDbUpdateFailed",DEEPL_SUCCESS:"onDeeplTrSuccess",DEEPL_RF_SUCCESS:"onDeeplRfSuccess",DEEPL_FAILED:"onDeeplTrFailed",DEEPL_RF_FAILED:"onDeeplRfFailed",getGlossariesEntries:glossaryId=>{Ajax.call([{methodname:"local_deepler_get_glossary_entries",args:{glossaryid:glossaryId},done:response=>{Events.emit("onGlossaryEntriesSuccess",response)},fail:(jqXHR,status,error)=>{Log.error("api/getGlossariesEntries/fail::jqXHR"),Log.error(jqXHR),Events.emit("onGlossaryEntriesFailed",error??jqXHR.debuginfo??jqXHR.message??jqXHR.errorcode??status)}}])},updateGlossariesUsage:glossaries=>{Ajax.call([{methodname:"local_deepler_update_glossary",args:{glossaryids:glossaries},done:response=>{response.forEach(r=>{"error"===r.sattus?Events.emit("onDbGlossaryUpdateFailed",r):Events.emit("onDbGlossaryUpdateSuccess",r)})},fail:(jqXHR,status,error)=>{Log.error("api/updateGlossariesUsage/fail::jqXHR"),Log.error(jqXHR),Events.emit("onDbGlossaryUpdateAllFailed",error??jqXHR.debuginfo??jqXHR.message??jqXHR.errorcode??status)}}])},updateGlossariesVisibility:(glossaryId,visibility)=>{Ajax.call([{methodname:"local_deepler_update_glossary_visibility",args:{glossaryid:glossaryId,shared:visibility},done:response=>{Events.emit("onDbGlossaryUpdateSuccess",response)},fail:(jqXHR,status,error)=>{Log.error("api/updateGlossariesVisibility/fail::jqXHR"),Log.error(jqXHR),Events.emit("onDbGlossaryUpdateFailed",error??jqXHR.debuginfo??jqXHR.message??jqXHR.errorcode??status)}}])},updateTranslationsInDb:(data,userid,courseid)=>{Ajax.call([{methodname:"local_deepler_update_translation",args:{data:data,userid:userid,courseid:courseid,action:"update"},done:response=>{if(1===response.length&&response[0].error&&""===response[0].keyid)return Log.warn("api/updateTranslationsInDb/done::response has errors"),void Events.emit("onDbUpdateFailed",response[0].error);Events.emit("onDbUpdateSuccess",response)},fail:(jqXHR,status,error)=>{Log.error("api/updateTranslationsInDb/fail::jqXHR"),Log.error(jqXHR),Events.emit("onDbUpdateFailed",error??jqXHR.debuginfo??jqXHR.message??jqXHR.errorcode??status)}}])},translate:(data,options,version)=>{deeplService({translations:data,options:options,version:version},"local_deepler_get_translation","onDeeplTrSuccess","onDeeplTrFailed")},rephrase:(data,options,version)=>{deeplService({rephrasings:data,options:options,version:version},"local_deepler_get_rephrase","onDeeplRfSuccess","onDeeplRfFailed")}}});

//# sourceMappingURL=api.min.js.map