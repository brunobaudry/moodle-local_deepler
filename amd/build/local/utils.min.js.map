{"version":3,"file":"utils.min.js","sources":["../../src/local/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/utils.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([], () => {\n    const COOKIE_PREFIX = 'moodle_deepler_glossary_';\n    const COOKIE_PREFIX_NEW = 'moodle_deepler_settings_';\n    const MAX_INPUT_LENGTH = 256;\n    /**\n     * Simple helper to manage selectors\n     * @param {string} s\n     * @param {string} k\n     * @returns {*}\n     */\n    const replaceKey = (s, k) => {\n        return s.replace(\"<KEY>\", k);\n    };\n    /**\n     * Transforms a keyid to a key.\n     *\n     * @param {string} k\n     * @returns {string|null}\n     */\n    const keyidToKey = (k) => {\n        if (typeof k !== 'string' || k.length > MAX_INPUT_LENGTH) {\n            return null;\n        }\n        let m = k.match(/^([^-]+)-([^-]+)-([^-]+)-([^-]+)$/i);\n        if (!m) {\n            return null;\n        }\n        return `${m[1]}[${m[2]}][${m[3]}][${m[4]}]`;\n    };\n\n    /**\n     * Json helper\n     * @param {string} s\n     * @param {string} sep\n     * @returns {string}\n     */\n    const toJsonArray = (s, sep = \",\") => {\n        return JSON.stringify(s.split(sep));\n    };\n    /**\n     * Helper function to decode the PHP base64 encoded source.\n     *\n     * @param {string} encoded\n     * @returns {string}\n     */\n    const fromBase64 = (encoded) => {\n        const binString = atob(encoded); // Maybe we should import js-base64 instead.\n        const bytes = Uint8Array.from(binString, (m) => m.codePointAt(0));\n        return new TextDecoder().decode(bytes);\n    };\n    /**\n     * Helper function for the decode html escaped content.\n     *\n     * @param {string} encodedStr\n     * @returns {string}\n     */\n    const decodeHTML = (encodedStr) => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(encodedStr, 'text/html');\n        return doc.documentElement.textContent;\n    };\n    /**\n     * Helper to remove HTML from strings.\n     *\n     * @param {string} str\n     * @returns {string|string}\n     * utils.js\n     */\n    const stripHTMLTags = (str) => {\n        let doc = new DOMParser().parseFromString(str, 'text/html');\n        return doc.body.textContent || \"\";\n    };\n    /**\n     * Helps to create a cookie name based on the config.\n     *\n     * @param {object} config\n     * @param {bool} oldWay\n     */\n    const makeCookieName = (config, oldWay = false) =>{\n        if (oldWay) {\n            return COOKIE_PREFIX + config.currentlang + config.targetlang + config.courseid;\n        }\n        return COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n    };\n    /**\n     * Cookie setter.\n     *\n     * @param {object} config\n     * @param {string} value\n     * @param {int} hours\n     */\n    const setCookie = (config, value, hours)=>{\n        let expires = \"\";\n        if (hours) {\n            const date = new Date();\n            date.setTime(date.getTime() + (hours * 60 * 60 * 1000));\n            expires = \"; expires=\" + date.toUTCString();\n        }\n        document.cookie = makeCookieName(config, true) + \"=\" + (value || \"\") + expires + \"; path=/\";\n    };\n\n    /**\n     * Cookie Getter.\n     *\n     * @param {object} config\n     * @returns {object}\n     */\n    const getCookie = (config) => {\n        const nameEQ = makeCookieName(config, true) + \"=\";\n        const ca = document.cookie.split(';');\n        for (let i = 0; i < ca.length; i++) {\n            let c = ca[i];\n            while (c.charAt(0) == ' ') {\n                // Strips leading spaces.\n                c = c.substring(1, c.length);\n            }\n            if (c.indexOf(nameEQ) == 0) {\n                return c.substring(nameEQ.length, c.length);\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Wrapper for the setCookie function to encode the value in base64.\n     *\n     * @param {object} config\n     * @param {string} value\n     * @param {int} hours\n     */\n    const setEncodedCookie = (config, value, hours)=>{\n       setCookie(makeCookieName(config), btoa(value), hours);\n    };\n    /**\n     * Wrapper for the getCookie function to decode the value from base64.\n     *\n     * @param {object} config\n     * @returns {string}\n     */\n    const getEncodedCookie = (config) => {\n       const cook = getCookie(makeCookieName(config));\n       if (cook === null) {\n           return null;\n       }\n       return atob(cook);\n    };\n    /**\n     * Limit the size of a String.\n     *\n     * @param {string} str\n     * @param {int} maxLength\n     * @returns {*|string}\n     */\n    const smartTruncate = (str, maxLength) =>{\n        if (str.length <= maxLength || maxLength == 0) {\n return str;\n}\n\n        const ellipsis = 'â€¦';\n        const trimmed = str.slice(0, maxLength - ellipsis.length);\n\n        // Try to cut at the last space within the limit\n        const lastSpace = trimmed.lastIndexOf(' ');\n        if (lastSpace > 0) {\n            return trimmed.slice(0, lastSpace) + ellipsis;\n        }\n\n        // If no space found, just hard cut\n        return trimmed + ellipsis;\n    };\n    /**\n     * Api to be used by the other modules.\n     */\n    return {\n        smartTruncate: smartTruncate,\n        getCookie: getCookie,\n        getEncodedCookie: getEncodedCookie,\n        setCookie: setCookie,\n        setEncodedCookie: setEncodedCookie,\n        replaceKey: replaceKey,\n        keyidToKey: keyidToKey,\n        decodeHTML: decodeHTML,\n        stripHTMLTags: stripHTMLTags,\n        fromBase64: fromBase64,\n        toJsonArray: toJsonArray\n    };\n});\n"],"names":["define","makeCookieName","config","arguments","length","undefined","currentlang","targetlang","courseid","setCookie","value","hours","expires","date","Date","setTime","getTime","toUTCString","document","cookie","getCookie","nameEQ","ca","split","i","c","charAt","substring","indexOf","smartTruncate","str","maxLength","trimmed","slice","ellipsis","lastSpace","lastIndexOf","getEncodedCookie","cook","atob","setEncodedCookie","btoa","replaceKey","s","k","replace","keyidToKey","m","match","decodeHTML","encodedStr","DOMParser","parseFromString","documentElement","textContent","stripHTMLTags","body","fromBase64","encoded","binString","bytes","Uint8Array","from","codePointAt","TextDecoder","decode","toJsonArray","sep","JSON","stringify"],"mappings":";;;;;;AAqBAA,OAAM,4BAAC,GAAI,KACP,MA6EMC,eAAiB,SAACC,QACpB,OADkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GA7EhB,2BA+ESD,OAAOI,YAAcJ,OAAOK,WAAaL,OAAOM,SA9ErD,2BAgFKN,OAAOI,YAAcJ,OAAOK,WAAaL,OAAOM,UASzEC,UAAYA,CAACP,OAAQQ,MAAOC,SAC9B,IAAIC,QAAU,GACd,GAAID,MAAO,CACP,MAAME,KAAO,IAAIC,KACjBD,KAAKE,QAAQF,KAAKG,UAAqB,GAARL,MAAa,GAAK,KACjDC,QAAU,aAAeC,KAAKI,aAClC,CACAC,SAASC,OAASlB,eAAeC,QAAQ,GAAQ,KAAOQ,OAAS,IAAME,QAAU,YAS/EQ,UAAalB,SACf,MAAMmB,OAASpB,eAAeC,QAAQ,GAAQ,IACxCoB,GAAKJ,SAASC,OAAOI,MAAM,KACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,GAAGlB,OAAQoB,IAAK,CAChC,IAAIC,EAAIH,GAAGE,GACX,KAAsB,KAAfC,EAAEC,OAAO,IAEZD,EAAIA,EAAEE,UAAU,EAAGF,EAAErB,QAEzB,GAAyB,GAArBqB,EAAEG,QAAQP,QACV,OAAOI,EAAEE,UAAUN,OAAOjB,OAAQqB,EAAErB,OAE5C,CACA,OAAO,MAqDX,MAAO,CACHyB,cArBkBA,CAACC,IAAKC,aACxB,GAAID,IAAI1B,QAAU2B,WAA0B,GAAbA,UACtC,OAAOD,IAGA,MACME,QAAUF,IAAIG,MAAM,EAAGF,UAAYG,GAGnCC,UAAYH,QAAQI,YAAY,KACtC,OAAID,UAAY,EACLH,QAAQC,MAAM,EAAGE,WANX,IAUVH,QAVU,KAiBjBZ,UAAWA,UACXiB,iBArCsBnC,SACvB,MAAMoC,KAAOlB,UAAUnB,eAAeC,SACtC,OAAa,OAAToC,KACO,KAEJC,KAAKD,OAiCX7B,UAAWA,UACX+B,iBAhDqBA,CAACtC,OAAQQ,MAAOC,SACtCF,UAAUR,eAAeC,QAASuC,KAAK/B,OAAQC,QAgD9C+B,WAzKeA,CAACC,EAAGC,IACZD,EAAEE,QAAQ,QAASD,GAyK1BE,WAjKgBF,IAChB,GAAiB,iBAANA,GAAkBA,EAAExC,OAjBV,IAkBjB,OAAO,KAEX,IAAI2C,EAAIH,EAAEI,MAAM,sCAChB,OAAKD,EAGE,GAAGA,EAAE,MAAMA,EAAE,OAAOA,EAAE,OAAOA,EAAE,MAF3B,MA4JXE,WA7HgBC,aACD,IAAIC,WACAC,gBAAgBF,WAAY,aACpCG,gBAAgBC,YA2H3BC,cAlHmBzB,MACT,IAAIqB,WAAYC,gBAAgBtB,IAAK,aACpC0B,KAAKF,aAAe,GAiH/BG,WA1IgBC,UAChB,MAAMC,UAAYpB,KAAKmB,SACjBE,MAAQC,WAAWC,KAAKH,UAAYZ,GAAMA,EAAEgB,YAAY,IAC9D,OAAO,IAAIC,aAAcC,OAAOL,QAwIhCM,YApJgB,SAACvB,GAAiB,IAAdwB,IAAGhE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAC1B,OAAOiE,KAAKC,UAAU1B,EAAEpB,MAAM4C"}