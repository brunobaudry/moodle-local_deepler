{"version":3,"file":"ui.min.js","sources":["../../src/local/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// define(['core/str', 'core/modal', './selectors', './api', './translation', './utils'],\ndefine(['editor_tiny/editor', 'core/str', 'core/modal', './selectors', './translation', './utils'],\n    (TinyMCE, Str, Modal, Selectors, Translation, Utils) => {\n    const {getString} = Str;\n    let config = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    // Let sourceLang = \"\";\n    // let targetLang = \"\";\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @returns {Promise<void>}\n     * ui.js\n     */\n    const launchModal = async() => {\n        saveAllModal = await Modal.create({\n            title: getString('saveallmodaltitle', 'local_deepler'),\n            body: getString('saveallmodalbody', 'local_deepler'),\n        });\n        await saveAllModal.show();\n    };\n    /**\n     * Event listener for change events.\n     * @param {event} e\n     */\n    const handleChangeEvent = (e) => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    };\n    /**\n     * Multilang button handler\n     * @param {Event} e Event\n     * ui.js ok\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        let source = domQuery(Selectors.sourcetexts.keys, key);\n        let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n        source.classList.toggle(\"show\");\n        multilang.classList.toggle(\"show\");\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                showModal('Cannot call deepl', `<p>Both languages are the same ${config.lang}</p>`);\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n    };\n\n        /**\n         * @returns\n         */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        saveAllBtn.disabled = true;\n        launchModal().then(r => Utils.info('SaveAll Modal launched ' + r));\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config.userPrefs === 'textarea');\n    };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n        };\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     * ui.js\n     */\n    const onItemChecked = (e) => {\n        Utils.log(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n        const key = e.target.getAttribute('data-key');\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(key, e.target.checked);\n            countWordAndChar();\n        } else {\n            Translation.initTempForKey(\n                key, findEditor(key),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-sourcetext-raw\"),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-filedtext-raw\")\n            );\n        }\n    };\n    const registerUI = () => {\n        try {\n            saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n            Translation.setMainLangs(\n                domQuery(Selectors.actions.sourceSwitcher).value,\n                domQuery(Selectors.actions.targetSwitcher).value);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n           // SourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n            // targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n\n        } catch (e) {\n            if (config.debug) {\n                Utils.error(e.message);\n            }\n        }\n    };\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        // Check/uncheck checkboxes\n        if (e.target.checked) {\n            checkboxes.forEach((i) => {\n                // Toggle check box upon visibility\n                i.checked = !getParentRow(i).classList.contains('d-none');\n                toggleStatus(i.getAttribute('data-key'), i.checked);\n            });\n        } else {\n            checkboxes.forEach((i) => {\n                i.checked = false;\n                toggleStatus(i.getAttribute('data-key'), false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        autotranslateButton.disabled = true;\n        for (let i in checkboxes) {\n            let e = checkboxes[i];\n            if (e.checked) {\n                autotranslateButton.disabled = false;\n                break;\n            }\n        }\n    };\n    /**\n     *Get the tranlsation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', config.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body) => {\n        Modal.create({\n            title: title,\n            body: body,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n    /**\n     * Launch autotranslation.\n     * ui.js + translation.js (split)\n     */\n    const doAutotranslate = () => {\n        const keys = [];\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                keys.push(ckBox.getAttribute(\"data-key\"));\n            });\n        Translation.callTranslations(keys);\n    };\n    /**\n     * Row visibility.\n     *\n     * @param {HTMLElement} row\n     * @param {Boolean} checked\n     * ui.js\n     */\n    const toggleRowVisibility = (row, checked) => {\n        if (checked) {\n            row.classList.remove(\"d-none\");\n        } else {\n            row.classList.add(\"d-none\");\n        }\n    };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         * ui.js\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        refreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        const refreshTempTranslation = (key)=>{\n            Translation.initTempForKey(\n                key, findEditor(key),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-sourcetext-raw\"),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-filedtext-raw\"),\n                domQuery(Selectors.sourcetexts.sourcelangs, key).value\n            );\n        };\n    /**\n     * Shows/hides rows.\n     * @param {string} selector\n     * @param {boolean} selected\n     * ui.js ok\n     */\n    const showRows = (selector, selected) => {\n        const items = domQueryAll(selector);\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n        items.forEach((item) => {\n            let k = item.getAttribute('data-row-id');\n            toggleRowVisibility(item, selected);\n            // When a row is toggled then we don't want it to be selected and sent from translation.\n            try {\n                domQuery(Selectors.editors.multiples.checkBoxesWithKey, k).checked = allSelected && selected;\n                toggleStatus(k, false);\n            } catch (e) {\n                Utils.log(`${k} translation is disalbled`);\n            }\n\n        });\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {String} key\n     * @param {HTMLElement} editor\n     * @param {String} message\n     * ui.js\n     *\n    const errorMessageItem = (key, editor, message) => {\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        showErrorMessageForEditor(key, message);\n    };\n     */\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     * ui.js\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     * ui.js\n     *\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n     */\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"target_lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to switch source lang\n     * Hence reload the page and change the site main lang\n     * @param {Event} e\n     * ui.js\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     *\n     * ui.js\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0;\n        let cws = 0;\n        let cwos = 0;\n       domQueryAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n        let current = cwos + config.usage.character.count;\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n        if (current >= config.usage.character.limit) {\n            parent.classList.remove('alert-success');\n            parent.classList.add('alert-danger');\n        } else {\n            parent.classList.add('alert-success');\n            parent.classList.remove('alert-danger');\n        }\n    };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         * @todo MDL-0 get the editor from moodle db in the php.\n         * ui.js\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Utils.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Utils.log(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         * ui.js\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            TinyMCE.getAllInstances().forEach((k, v)=>{\n               // Window.console.log(k, v);\n                // window.console.log(v.attributes.name.value, k.getBody());\n                if (v.attributes.name.value === key) {\n                    return k.getBody();\n                }\n            });\n            return null;\n        };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     * ui.js\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n        config = cfg;\n        Utils.registerLoggers(cfg.debug);\n        Utils.info('WTF');\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = Translation.isTranslatable();\n        window.console.log(checkboxes);\n        // Window.console.log(TinyMCE.getAllInstances());\n        checkboxes.forEach((node) => {\n            // Window.console.info(node.dataset.key);\n            // const cfg = findEditor(node.dataset.key);\n            // window.console.log(cfg);\n            //  Translation.initTempForKey(node.dataset.key, findEditor(node.dataset.key));\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n        showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n    };\n    return {\n        init: init,\n        setIconStatus: setIconStatus,\n        findEditor: findEditor,\n        findEditorByType: findEditorByType,\n    };\n});\n"],"names":["define","TinyMCE","Str","Modal","Selectors","Translation","Utils","getString","config","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","handleChangeEvent","e","target","closest","actions","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","checkBoxes","sourceselect","onItemChecked","handleClickEvent","toggleMultilang","keyid","getAttribute","key","keyidToKey","source","domQuery","sourcetexts","keys","multilang","multilangs","classList","toggle","onToggleMultilang","autoTranslateBtn","currentlang","lang","undefined","showModal","doAutotranslate","toggleAllCheckboxes","toggleAutotranslateButton","saveAll","saveTranslations","selectedCheckboxes","domQueryAll","checkedCheckBoxes","length","disabled","async","create","title","body","show","launchModal","then","r","info","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","userPrefs","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","log","toggleStatus","countWordAndChar","initTempForKey","findEditor","i","getParentRow","contains","validatorBtn","setIconStatus","status","wait","isBtn","icon","add","remove","setAttribute","statusstrings","replace","node","replaceKey","parentrow","removeOnClose","ckBox","callTranslations","initTemp","totranslate","refreshTempTranslation","translated","failed","success","saved","sourcelangs","value","selector","selected","items","allSelected","item","k","row","checkBoxesWithKey","parent","alertChild","removeChild","url","URL","window","location","href","searchParams","set","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","indexOf","warn","findEditorByType","error","editor","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","trim","match","el","document","q","querySelector","querySelectorAll","init","cfg","registerLoggers","debug","setMainLangs","message","registerUI","addEventListener","isTranslatable","console"],"mappings":"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"}