{"version":3,"file":"ui.min.js","sources":["../../src/local/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log', 'editor_tiny/editor', 'core/str', 'core/modal', './selectors', './translation', './utils', './customevents'],\n    (Log, TinyMCE, Str, Modal, Selectors, Translation, Utils, Events) => {\n    const {getString} = Str;\n    let config = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    // Let sourceLang = \"\";\n    // let targetLang = \"\";\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n\n    const onDBFailed = () => {\n        showModal(errordbtitle, 'DB failed to save translations', 'Alert');\n    };\n    const onTranslationSuccess = (errors) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        if (errors.length > 0) {\n                getString('partialerrorstring', 'local_deepler', errors.length)\n                    .then((s) => {\n                     showModal(errordbtitle, s, 'Alert');\n                    });\n        }\n    };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_TRANSLATION_SUCCESS, onTranslationSuccess);\n        Events.on(Translation.ON_DB_FAILED, onDBFailed);\n        Events.on(Translation.ON_ITEM_SAVED, successMessageItem);\n        Events.on(Translation.ON_ITEM_NOT_SAVED, errorMessageItem);\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @returns {Promise<void>}\n     * ui.js\n     */\n    const launchModal = async() => {\n        saveAllModal = await Modal.create({\n            title: getString('saveallmodaltitle', 'local_deepler'),\n            body: getString('saveallmodalbody', 'local_deepler'),\n        });\n        await saveAllModal.show();\n    };\n    /**\n     * Event listener for change events.\n     * @param {event} e\n     */\n    const handleChangeEvent = (e) => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    };\n    /**\n     * Multilang button handler\n     * @param {Event} e Event\n     * ui.js ok\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        let source = domQuery(Selectors.sourcetexts.keys, key);\n        let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n        source.classList.toggle(\"show\");\n        multilang.classList.toggle(\"show\");\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                showModal('Cannot call deepl', `<p>Both languages are the same ${config.lang}</p>`);\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n    };\n\n        /**\n         * @returns\n         */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        saveAllBtn.disabled = true;\n        launchModal().then(r => Log.info('SaveAll Modal launched ' + r));\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n        };\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     * ui.js\n     */\n    const onItemChecked = (e) => {\n        Log.info(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n        // Check/uncheck checkboxes changes the charcount and icon status.\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n            countWordAndChar();\n        }\n        const editor = findEditor(e.target.getAttribute('data-key'));\n        Log.debug(`ui/onItemChecked:197`);\n        Log.debug(editor);\n    };\n    const registerUI = () => {\n        try {\n            saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n           // SourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n            // targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        // Check/uncheck checkboxes\n        if (e.target.checked) {\n            checkboxes.forEach((i) => {\n                // Toggle check box upon visibility\n                i.checked = !getParentRow(i).classList.contains('d-none');\n                toggleStatus(i.getAttribute('data-key'), i.checked);\n            });\n        } else {\n            checkboxes.forEach((i) => {\n                i.checked = false;\n                toggleStatus(i.getAttribute('data-key'), false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        autotranslateButton.disabled = true;\n        for (let i in checkboxes) {\n            let e = checkboxes[i];\n            if (e.checked) {\n                autotranslateButton.disabled = false;\n                break;\n            }\n        }\n    };\n    /**\n     *Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', config.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body, type = 'default') => {\n        Modal.create({\n            title: title,\n            body: body,\n            type: type,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n        const onTranslationFailed = (data) => {\n            const error = data.error;\n            const status = data.status;\n            showModal(errordbtitle, `${status} ${error}`, 'Alert');\n        };\n        /**\n         * Event listener for failed translations per item.\n         * @param {object} data\n         *\n        const onItemNotTranslated = (data) => {\n            errorMessageItem(data.key, findEditor(data.key), data.error);\n        };\n         */\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch autotranslation.\n     * ui.js + translation.js (split)\n     */\n    const doAutotranslate = () => {\n        const keys = [];\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                const key = ckBox.getAttribute(\"data-key\");\n                const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                const editor = findEditor(key);\n                Translation.initTempForKey(\n                    key, editor,\n                    sourceText.getAttribute(\"data-sourcetext-raw\"),\n                    sourceText.getAttribute(\"data-filedtext-raw\"),\n                    domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                );\n                keys.push(key);\n            });\n\n        Translation.callTranslations(keys);\n    };\n    /**\n     * Row visibility.\n     *\n     * @param {HTMLElement} row\n     * @param {Boolean} checked\n     * ui.js\n     */\n    const toggleRowVisibility = (row, checked) => {\n        if (checked) {\n            row.classList.remove(\"d-none\");\n        } else {\n            row.classList.add(\"d-none\");\n        }\n    };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         * ui.js\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /* Const refreshTempTranslation = (key)=>{\n            Translation.initTempForKey(\n                key, findEditor(key),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-sourcetext-raw\"),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-filedtext-raw\"),\n                domQuery(Selectors.sourcetexts.sourcelangs, key).value\n            );\n        };*/\n    /**\n     * Shows/hides rows.\n     * @param {string} selector\n     * @param {boolean} selected\n     * ui.js ok\n     */\n    const showRows = (selector, selected) => {\n        const items = domQueryAll(selector);\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n        items.forEach((item) => {\n            let k = item.getAttribute('data-row-id');\n            toggleRowVisibility(item, selected);\n            // When a row is toggled then we don't want it to be selected and sent from translation.\n            try {\n                domQuery(Selectors.editors.multiples.checkBoxesWithKey, k).checked = allSelected && selected;\n                toggleStatus(k, false);\n            } catch (e) {\n                Log.warn(`${k} translation is disalbled`);\n            }\n\n        });\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {string} key\n     * @param {string} error\n     */\n    const errorMessageItem = (key, error) => {\n        Log.warn(`ui/errorMessageItem:440`);\n        Log.warn(key);\n        Log.warn(error);\n        const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        editor.classList.add(\"local_deepler__error\");\n        // Display granular error messages.\n        const indexOfSET = error.indexOf(\"SET\");// Probably a text too long for the field if not -1.\n        const msg = indexOfSET === -1 ? error : error.substring(0, indexOfSET);\n        setIconStatus(key, Selectors.statuses.failed);\n        showErrorMessageForEditor(key, msg);\n    };\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {string} savedText\n     */\n    const successMessageItem = (key, savedText) => {\n        Log.debug(`ui/successMessageItem:471 > savedText`);\n        Log.debug(savedText);\n        domQuery(Selectors.editors.multiples.editorsWithKey, key)\n            .classList.add(\"local_deepler__success\");\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.success);\n        // Replace text in the multilang textarea.\n        const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n        multilangTextarea.innerHTML = savedText;\n        // Deselect the checkbox.\n        domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n        // Remove success message after a few seconds.\n        setTimeout(() => {\n            let multilangPill = domQuery(Selectors.statuses.multilang, key);\n            let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n\n            Log.debug(`ui/:488 > multilangPill`);\n            Log.debug(multilangPill);\n            Log.debug(`ui/:492 > multilangPill.classList.contains(\"disabled\")`);\n            Log.debug(multilangPill.classList.contains(\"disabled\"));\n\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n     /**/\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     * ui.js\n     */\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"target_lang\", e.target.value);\n        window.location = url.toString();\n\n        // Translation.setMainLangs('', e.target.value);\n        // Events.emit(ON_TARGET_LANG_CHANGE, e.target.value);\n        // DomQuery(Selectors.sourcetexts.targetlang).innerText = e.target.value;\n\n\n    };\n        /**\n         * Event listner for changes of target language.\n         * @param {string} e\n         *\n    const onTagrgetChanged = (e) => {\n        Translation.setMainLangs('', e);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n    };\n         */\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     *\n     * ui.js\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0;\n        let cws = 0;\n        let cwos = 0;\n       domQueryAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n        let current = cwos + config.usage.character.count;\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n        if (current >= config.usage.character.limit) {\n            parent.classList.remove('alert-success');\n            parent.classList.add('alert-danger');\n        } else {\n            parent.classList.add('alert-success');\n            parent.classList.remove('alert-danger');\n        }\n    };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         * @todo MDL-0 get the editor from moodle db in the php.\n         * ui.js\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         * ui.js\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     * ui.js\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n        config = cfg;\n        // Utils.registerLoggers(cfg.debug);\n        Log.info(cfg);\n        getString('errordbtitle', 'local_deepler')\n            .then((s)=>{\n                errordbtitle = s;\n            })\n            .catch((e)=>{\n                e('errordbtitle, could not get Moodle string!!!');\n            }\n        );\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        // OnTagrgetChanged(config.lang);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n        showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n    };\n    return {\n        init: init,\n        setIconStatus: setIconStatus,\n        findEditor: findEditor,\n        findEditorByType: findEditorByType,\n    };\n});\n"],"names":["define","Log","TinyMCE","Str","Modal","Selectors","Translation","Utils","Events","getString","config","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","onDBFailed","showModal","onTranslationSuccess","errors","isVisible","hide","length","then","s","handleChangeEvent","e","target","closest","actions","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","checkBoxes","sourceselect","onItemChecked","handleClickEvent","toggleMultilang","keyid","getAttribute","key","keyidToKey","source","domQuery","sourcetexts","keys","multilang","multilangs","classList","toggle","onToggleMultilang","autoTranslateBtn","currentlang","lang","undefined","doAutotranslate","toggleAllCheckboxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","selectedCheckboxes","domQueryAll","checkedCheckBoxes","disabled","async","create","title","body","show","launchModal","r","info","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","keyValidator","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","toggleStatus","countWordAndChar","editor","findEditor","debug","i","getParentRow","contains","validatorBtn","setIconStatus","status","wait","isBtn","icon","add","remove","setAttribute","statusstrings","replace","node","replaceKey","parentrow","type","removeOnClose","onTranslationFailed","error","onItemTranslated","ckBox","sourceText","initTempForKey","sourcelangdd","value","callTranslations","initTemp","totranslate","translated","failed","success","saved","selector","selected","items","allSelected","item","k","row","checkBoxesWithKey","warn","errorMessageItem","indexOfSET","indexOf","msg","substring","showErrorMessageForEditor","parent","alertChild","removeChild","successMessageItem","savedText","textAreas","innerHTML","setTimeout","multilangPill","prevTransStatus","message","errorMsg","document","createElement","appendChild","url","URL","window","location","href","searchParams","set","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","trim","match","el","q","querySelector","querySelectorAll","init","cfg","catch","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_TRANSLATION_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":";;;;;;AAuBAA,gCAAO,CAAC,WAAY,qBAAsB,WAAY,aAAc,cAAe,gBAAiB,UAAW,mBAC3G,CAACC,IAAKC,QAASC,IAAKC,MAAOC,UAAWC,YAAaC,MAAOC,gBACpDC,UAACA,WAAaN,QAChBO,OAAS,GACTC,oBAAsB,GACtBC,WAAa,GACbC,aAAe,GACfC,WAAa,GAGbC,OAAS,IAAIC,KAAKC,aAClBC,aAAe,GACfC,aAAe,SAEbC,WAAa,KACfC,UAAUF,aAAc,iCAAkC,UAExDG,qBAAwBC,SACL,OAAjBL,cAAyBA,aAAaM,WACtCN,aAAaO,OAEbF,OAAOG,OAAS,GACZjB,UAAU,qBAAsB,gBAAiBc,OAAOG,QACnDC,MAAMC,IACNP,UAAUF,aAAcS,EAAG,aAoCtCC,kBAAqBC,IACnBA,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQC,iBACnCC,aAAaL,GAEbA,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQG,iBACnCC,aAAaP,GAEbA,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQK,cACnCC,SAASlC,UAAUmC,SAASC,QAASX,EAAEC,OAAOW,SAE9CZ,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQU,iBACnCJ,SAASlC,UAAUmC,SAASI,YAAad,EAAEC,OAAOW,UAElDZ,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQY,aAAef,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQa,gBACrFC,cAAcjB,IAqBhBkB,iBAAoBlB,IAClBA,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQgB,kBAdhBnB,CAAAA,QACnBoB,MAAQpB,EAAEqB,aAAa,iBACvBC,IAAM7C,MAAM8C,WAAWH,OACvBI,OAASC,SAASlD,UAAUmD,YAAYC,KAAML,KAC9CM,UAAYH,SAASlD,UAAUmD,YAAYG,WAAYT,OAC3DI,OAAOM,UAAUC,OAAO,QACxBH,UAAUE,UAAUC,OAAO,SASvBC,CAAkBhC,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQgB,kBAErDnB,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQ8B,oBAC/BrD,OAAOsD,cAAgBtD,OAAOuD,WAAwBC,IAAhBxD,OAAOuD,KAC7C5C,UAAU,6DAAuDX,OAAOuD,cAExEE,mBAGJrC,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQpB,eACnCuD,oBAAoBtC,GAEpBA,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQY,aACnCwB,4BAGAvC,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQqC,UACnCC,mBAEAzC,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQuC,iBACnCC,sBAAsB3C,IAOxByC,iBAAmB,WACfG,mBAAqBC,YAAYtE,UAAUmC,SAASoC,sBAExB,IAA9BF,mBAAmBhD,cAGvBd,WAAWiE,UAAW,EAjFNC,WAChB5D,mBAAqBd,MAAM2E,OAAO,CAC9BC,MAAOvE,UAAU,oBAAqB,iBACtCwE,KAAMxE,UAAU,mBAAoB,yBAElCS,aAAagE,QA6EnBC,GAAcxD,MAAKyD,GAAKnF,IAAIoF,KAAK,0BAA4BD,WACvDE,KAAO,GACAC,MAAMC,KAAKd,oBAAoBe,KAAK3D,GAAMA,EAAE4D,QAAQtC,MAC5DuC,SAASvC,MACFwC,cAAcxC,OAAS/C,UAAUmC,SAASqD,SAC1CC,iBAAiB1C,KACjBkC,KAAKS,KAAKC,cAAc5C,UAIpC9C,YAAYiE,iBAAiBe,KAAM5E,SAMjC+D,sBAAyB3C,UACrBsB,IAAMtB,EAAEC,OAAOC,QAAQ3B,UAAU4B,QAAQuC,gBAAgBkB,QAAQO,aACnEL,cAAcxC,OAAS/C,UAAUmC,SAASqD,SAC1CC,iBAAiB1C,KACjB9C,YAAYiE,iBAAiB,CAACyB,cAAc5C,MAAO1C,UAQrDsF,cAAiB5C,YACb8C,QAAU3C,SAASlD,UAAU8F,QAAQC,UAAUC,eAAgBjD,WAC9D,CACHA,IAAKA,IACLkD,SAAU5F,OAAO4F,SACjBC,GAAIC,SAASN,QAAQ/C,aAAa,YAClCsD,IAAKP,QAAQ/C,aAAa,YAC1BuD,MAAOR,QAAQ/C,aAAa,cAC5BwD,MAAOT,QAAQ/C,aAAa,gBAQ9BJ,cAAiBjB,IACnB7B,IAAIoF,KAAK,YAAavD,EAAEC,OAAOoB,aAAa,YAAarB,EAAEC,OAAOoB,aAAa,gBAElC,2BAAzCrB,EAAEC,OAAOoB,aAAa,iBACtByD,aAAa9E,EAAEC,OAAOoB,aAAa,YAAarB,EAAEC,OAAOW,SACzDmE,0BAEEC,OAASC,WAAWjF,EAAEC,OAAOoB,aAAa,aAChDlD,IAAI+G,8BACJ/G,IAAI+G,MAAMF,SAqBR1C,oBAAuBtC,IAErBA,EAAEC,OAAOW,QACT5B,WAAW6E,SAASsB,IAEhBA,EAAEvE,SAAWwE,aAAaD,GAAGrD,UAAUuD,SAAS,UAChDP,aAAaK,EAAE9D,aAAa,YAAa8D,EAAEvE,YAG/C5B,WAAW6E,SAASsB,IAChBA,EAAEvE,SAAU,EACZkE,aAAaK,EAAE9D,aAAa,aAAa,MAGjDkB,4BACAwC,oBAKExC,0BAA4B,KAC9B1D,oBAAoBkE,UAAW,MAC1B,IAAIoC,KAAKnG,WAAY,IACdA,WAAWmG,GACbvE,QAAS,CACX/B,oBAAoBkE,UAAW,WAWrCe,cAAiBxC,KACZG,SAASlD,UAAU4B,QAAQmF,aAAchE,KAAKD,aAAa,eAShEkE,cAAgB,SAACjE,SAAKkE,8DAASjH,UAAUmC,SAAS+E,KAAMC,8DACtDC,KAAOlE,SAASlD,UAAU4B,QAAQmF,aAAchE,KAC/CoE,OASIC,KAAK7D,UAAUuD,SAAS,SACzBM,KAAK7D,UAAU8D,IAAI,OACnBD,KAAK7D,UAAU8D,IAAI,0BAEnBD,KAAK7D,UAAUuD,SAAS,YACxBM,KAAK7D,UAAU+D,OAAO,aAbrBF,KAAK7D,UAAUuD,SAAS,YACzBM,KAAK7D,UAAU8D,IAAI,WAEnBD,KAAK7D,UAAUuD,SAAS,SACxBM,KAAK7D,UAAU+D,OAAO,OACtBF,KAAK7D,UAAU+D,OAAO,2BAW9BF,KAAKG,aAAa,OAAQJ,MAAQ,SAAW,UAC7CC,KAAKG,aAAa,cAAeN,QACjCG,KAAKG,aAAa,QAASlH,OAAOmH,cAAcP,OAAOQ,QAAQ,iBAAkB,OAO/EZ,aAAgBa,MACXA,KAAK/F,QAAQzB,MAAMyH,WAAW3H,UAAUmD,YAAYyE,UAAWF,KAAK5E,aAAa,cAEtF9B,UAAY,SAAC2D,MAAOC,UAAMiD,4DAAO,UACnC9H,MAAM2E,OAAO,CACTC,MAAOA,MACPC,KAAMA,KACNiD,KAAMA,KACNhD,MAAM,EACNiD,eAAe,KAGbC,oBAAuB9C,aACnB+C,MAAQ/C,KAAK+C,MACbf,OAAShC,KAAKgC,OACpBjG,UAAUF,uBAAiBmG,mBAAUe,OAAS,UAehDC,iBAAoBlF,MAEtBiE,cAAcjE,IAAK/C,UAAUmC,SAASqD,QAAQ,IAM5C1B,gBAAkB,WACdV,KAAO,GACb7C,WAAWiE,UAAW,EACtBF,YAAYtE,UAAUmC,SAASoC,mBAC1Be,SAAS4C,cACAnF,IAAMmF,MAAMpF,aAAa,YACzBqF,WAAajF,SAASlD,UAAUmD,YAAYC,KAAML,KAClD0D,OAASC,WAAW3D,KAC1B9C,YAAYmI,eACRrF,IAAK0D,OACL0B,WAAWrF,aAAa,uBACxBqF,WAAWrF,aAAa,sBACxBI,SAASlD,UAAUmD,YAAYkF,aAActF,KAAKuF,OAEtDlF,KAAKsC,KAAK3C,QAGlB9C,YAAYsI,iBAAiBnF,OAuBvBmD,aAAe,CAACxD,IAAKV,kBACRa,SAASlD,UAAU4B,QAAQmF,aAAchE,KAAKsC,QAAQ4B,aAE5DjH,UAAUmC,SAAS+E,KACpBjH,YAAYuI,SAASzF,KACjBV,SACA2E,cAAcjE,IAAK/C,UAAUmC,SAASsG,wBAIzCzI,UAAUmC,SAASsG,YAEhBpG,SAAWpC,YAAYyI,WAAW3F,KAClCiE,cAAcjE,IAAK/C,UAAUmC,SAASqD,QAAQ,GAE9CwB,cAAcjE,IAAK/C,UAAUmC,SAAS+E,iBAGzClH,UAAUmC,SAASqD,OACfnD,SACD2E,cAAcjE,IAAK/C,UAAUmC,SAASsG,wBAGzCzI,UAAUmC,SAASwG,YAEnB3I,UAAUmC,SAASyG,mBAEnB5I,UAAUmC,SAAS0G,MACpB5I,YAAYuI,SAASzF,OAkB/Bb,SAAW,CAAC4G,SAAUC,kBAClBC,MAAQ1E,YAAYwE,UACpBG,YAAc/F,SAASlD,UAAU4B,QAAQpB,cAAc6B,QAC7D2G,MAAM1D,SAAS4D,WACPC,EAAID,KAAKpG,aAAa,eAhEN,IAACsG,IAAAA,IAiEDF,KAAMH,SA/D1BK,IAAI7F,UAAU+D,OAAO,UAErB8B,IAAI7F,UAAU8D,IAAI,cAgEdnE,SAASlD,UAAU8F,QAAQC,UAAUsD,kBAAmBF,GAAG9G,QAAU4G,aAAeF,SACpFxC,aAAa4C,GAAG,GAClB,MAAO1H,GACL7B,IAAI0J,eAAQH,oCAIpBnF,4BACAwC,oBAQE+C,iBAAmB,CAACxG,IAAKiF,SAC3BpI,IAAI0J,gCACJ1J,IAAI0J,KAAKvG,KACTnD,IAAI0J,KAAKtB,OACM9E,SAASlD,UAAU8F,QAAQC,UAAUC,eAAgBjD,KAC7DQ,UAAU8D,IAAI,8BAEfmC,WAAaxB,MAAMyB,QAAQ,OAC3BC,KAAsB,IAAhBF,WAAoBxB,MAAQA,MAAM2B,UAAU,EAAGH,YAC3DxC,cAAcjE,IAAK/C,UAAUmC,SAASwG,QACtCiB,0BAA0B7G,IAAK2G,MAO7BjE,iBAAoB1C,UAClB8G,OAAS3G,SAASlD,UAAU8F,QAAQC,UAAUC,eAAgBjD,KAC9D+G,WAAa5G,SAAS,gBAAiB,GAAI2G,QAC3CC,YACAD,OAAOE,YAAYD,aASrBE,mBAAqB,CAACjH,IAAKkH,aAC7BrK,IAAI+G,+CACJ/G,IAAI+G,MAAMsD,WACV/G,SAASlD,UAAU8F,QAAQC,UAAUC,eAAgBjD,KAChDQ,UAAU8D,IAAI,0BAEnBL,cAAcjE,IAAK/C,UAAUmC,SAASyG,SAEZ1F,SAASlD,UAAU8F,QAAQC,UAAUmE,UAAWnH,KACxDoH,UAAYF,UAE9B/G,SAASlD,UAAU8F,QAAQC,UAAUsD,kBAAmBtG,KAAKV,SAAU,EAEvE+H,YAAW,SACHC,cAAgBnH,SAASlD,UAAUmC,SAASkB,UAAWN,KACrCG,SAASlD,UAAUmC,SAASmI,gBAAiBvH,KACnDQ,UAAY,iCAE5B3D,IAAI+G,iCACJ/G,IAAI+G,MAAM0D,eACVzK,IAAI+G,gEACJ/G,IAAI+G,MAAM0D,cAAc9G,UAAUuD,SAAS,aAEvCuD,cAAc9G,UAAUuD,SAAS,aACjCuD,cAAc9G,UAAU+D,OAAO,YAEnCN,cAAcjE,IAAK/C,UAAUmC,SAAS0G,WAUxCe,0BAA4B,CAAC7G,IAAKwH,eAChCV,OAAS3G,SAASlD,UAAU8F,QAAQC,UAAUC,eAAgBjD,WAC5DyH,SAAWC,SAASC,cAAc,OACxCF,SAAStE,GAAK,0BACdsE,SAASjH,UAAY,CAAC,sBACtBiH,SAASL,UAAYI,QACrBV,OAAOc,YAAYH,WAOjB1I,aAAgBL,QACdmJ,IAAM,IAAIC,IAAIC,OAAOC,SAASC,MACfJ,IAAIK,aACVC,IAAI,cAAezJ,EAAEC,OAAO4G,OACzCwC,OAAOC,SAAWH,IAAIO,YAwBpBnJ,aAAgBP,QACdmJ,IAAM,IAAIC,IAAIC,OAAOC,SAASC,MACfJ,IAAIK,aACVC,IAAI,OAAQzJ,EAAEC,OAAO4G,OAClCwC,OAAOC,SAAWH,IAAIO,YAOpB3E,iBAAmB,SACjB4E,MAAQ,EACRC,IAAM,EACNC,KAAO,EACZhH,YAAYtE,UAAUmC,SAASoC,mBAC7Be,SAAS4C,YACFnF,IAAMmF,MAAMpF,aAAa,YACzByI,QAAUC,SAASzI,KACvBqI,OAASG,QAAQE,UACjBH,MAAQC,QAAQG,oBAChBL,KAAOE,QAAQI,0BAEbF,UAAYvI,SAASlD,UAAUmC,SAASyJ,WACxCC,cAAgB3I,SAASlD,UAAUmC,SAASwJ,kBAC5CG,YAAc5I,SAASlD,UAAUmC,SAASuJ,qBAC1CK,aAAe7I,SAASlD,UAAUmC,SAAS6J,YAC3CC,aAAe/I,SAASlD,UAAUmC,SAAS+J,UAC3CrC,OAAS3G,SAASlD,UAAUmC,SAASgK,0BACvCC,QAAUd,KAAOjL,OAAOgM,MAAMC,UAAUC,MAC5Cd,UAAUe,UAAYpB,MACtBS,cAAcW,UAAYnB,IAC1BS,YAAYU,UAAYlB,KACxBS,aAAaS,UAAY9L,OAAOA,OAAO0L,SACvCH,aAAaO,UAA6C,OAAjCnM,OAAOgM,MAAMC,UAAUG,MAAiB,IAAM/L,OAAOA,OAAOL,OAAOgM,MAAMC,UAAUG,OACxGL,SAAW/L,OAAOgM,MAAMC,UAAUG,OAClC5C,OAAOtG,UAAU+D,OAAO,iBACxBuC,OAAOtG,UAAU8D,IAAI,kBAErBwC,OAAOtG,UAAU8D,IAAI,iBACrBwC,OAAOtG,UAAU+D,OAAO,kBAUtBZ,WAAc3D,UACZtB,EAAIyB,SAASlD,UAAU8F,QAAQ4G,MAAMC,MAAO5J,QAEtC,OAANtB,EAAY,KACRsD,EAAI,SAEqC,IAD7B,CAAC,OAAQ,OAAQ,UAAW,YAC9B0E,QAAQpJ,OAAOuM,WACzBhN,IAAI0J,KAAK,sBAAwBjJ,OAAOuM,oBAIpC7H,EAAI8H,iBAAiB9J,IAAK1C,OAAOuM,WACnC,MAAO5E,OAELpI,IAAIkN,kCAA2BzM,OAAOuM,8BAAqB7J,aAG5DgC,QAEA,CAAC0B,OAAQhF,EAAGsL,WAjBd,UA0BPF,iBAAmB,CAAC9J,IAAKgK,kBACvBC,GAAK,QACLC,GAAK,YACDF,gBACC,OACDC,GAAK,SACLC,GAAK/J,SAASlD,UAAU8F,QAAQ4G,MAAMQ,KAAMnK,eAE3C,OACDiK,GAAK,SACLC,GAAKE,sBAAsBpK,eAE1B,cACA,WACDkK,GAAK/J,SAASlD,UAAU8F,QAAQ4G,MAAMU,MAAOrK,WAG9C,CAAC0D,OAAQwG,GAAIF,WAAYC,KAO9BG,sBAAyBpK,UACvB0D,OAAS,YACb5G,QAAQwN,kBAAkBC,OAAM,CAACnE,EAAGoE,IACY,GAAxCA,EAAEC,WAAWC,KAAKnF,MAAMmB,QAAQ1G,OAChC0D,OAAS0C,EAAEuE,WACJ,KAIRjH,QAST+E,SAAYzI,YAER4K,IADOzK,SAASlD,UAAUmD,YAAYC,KAAML,KACjCD,aAAa,uBAExB8K,WAAa1N,MAAM2N,cAAc3N,MAAM4N,WAAWH,MAAMI,aACvD,YACWH,WAAWI,MAAM,SAAW,IAAI3M,wBAC1BuM,WAAWvM,2BACRuM,WAAWnG,QAAQ,OAAQ,IAAIpG,SAWxD6B,SAAW,SAAC4F,cAAU/F,2DAAM,GAAIrB,8DAAS,WACrCuM,GAAKvM,MAAAA,OAAAA,OAAU+I,SACfyD,EAAY,KAARnL,IAAa+F,SAAWA,SAASrB,QAAQ,QAAS1E,YACrDkL,GAAGE,cAAcD,IAWlB5J,YAAc,SAACwE,cAAU/F,2DAAM,GAAIrB,8DAAS,WACxCuM,GAAKvM,MAAAA,OAAAA,OAAU+I,SACfyD,EAAY,KAARnL,IAAa+F,SAAWA,SAASrB,QAAQ,QAAS1E,YACrDkL,GAAGG,iBAAiBF,UA8B5B,CACHG,KAzBUC,MACVjO,OAASiO,IAET1O,IAAIoF,KAAKsJ,KACTlO,UAAU,eAAgB,iBACrBkB,MAAMC,IACHT,aAAeS,KAElBgN,OAAO9M,IACJA,EAAE,mDAvgBK,UAEXlB,WAAakK,SAAS0D,cAAcnO,UAAU4B,QAAQqC,SACtDzD,aAAe0C,SAASlD,UAAU4B,QAAQpB,cAG1CF,oBAAsB4C,SAASlD,UAAU4B,QAAQ8B,kBACjDjD,WAAa6D,YAAYtE,UAAU4B,QAAQY,YAE7C,MAAOf,GACDpB,OAAOsG,OACP/G,IAAIoI,MAAMvG,EAAE8I,WA+fpBiE,GAnqBA/D,SAASgE,iBAAiB,SAAUjN,mBACpCiJ,SAASgE,iBAAiB,QAAS9L,kBAGnCxC,OAAOuO,GAAGzO,YAAY0O,mBAAoB1G,kBAC1C9H,OAAOuO,GAAGzO,YAAY2O,sBAAuB7G,qBAC7C5H,OAAOuO,GAAGzO,YAAY4O,uBAAwB5N,sBAC9Cd,OAAOuO,GAAGzO,YAAY6O,aAAc/N,YACpCZ,OAAOuO,GAAGzO,YAAY8O,cAAe/E,oBACrC7J,OAAOuO,GAAGzO,YAAY+O,kBAAmBzF,kBA4pBzCvF,4BAEAzD,WAAWiE,UAAW,EACtBhE,aAAagE,UAAYvE,YAAYgP,iBACrCxO,WAAW6E,SAASoC,OAChBA,KAAKlD,SAAWhE,aAAagE,YAEjCtC,SAASlC,UAAUmC,SAASC,QAASc,SAASlD,UAAU4B,QAAQK,aAAaI,SAC7EH,SAASlC,UAAUmC,SAASI,YAAaW,SAASlD,UAAU4B,QAAQU,gBAAgBD,UAIpF2E,cAAeA,cACfN,WAAYA,WACZmG,iBAAkBA"}