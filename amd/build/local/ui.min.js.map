{"version":3,"file":"ui.min.js","sources":["../../src/local/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './tinychecker'],\n    (Log, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events, TinyChecker) => {\n    let config = {};\n    let langstrings = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    // Let sourceLang = \"\";\n    // let targetLang = \"\";\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n\n    const onDBFailed = (error, status) => {\n        showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n    };\n    const onDbSavedSuccess = (errors) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        if (errors.length > 0) {\n            let s = config.uistrings.errordbpartial;\n            s.replace('{$a}', errors.length);\n            showModal(errordbtitle, s, 'Alert');\n        }\n    };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n        Events.on(Translation.ON_DB_FAILED, onDBFailed);\n        Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n        Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @returns {Promise<void>}\n     * ui.js\n     */\n    const launchModal = async() => {\n        saveAllModal = await Modal.create({\n            title: config.uistrings.saveallmodaltitle,\n            body: config.uistrings.saveallmodalbody,\n        });\n        await saveAllModal.show();\n    };\n\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n    const handleChangeEvent = (e) => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceselect)) {\n            onSourceChange(e);\n        }\n    };\n    /**\n     * Multilang button handler\n     * @param {Event} e Event\n     * ui.js ok\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        let source = domQuery(Selectors.sourcetexts.keys, key);\n        let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n        source.classList.toggle(\"show\");\n        multilang.classList.toggle(\"show\");\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.deeplsourcelang === config.targetlang || config.targetlang === undefined) {\n                showModal('Cannot call deepl', `<p>Both languages are the same ${config.targetlang}</p>`);\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n    };\n\n        /**\n         * @returns\n         */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        // Prepare the UI for the save process.\n        saveAllBtn.disabled = true;\n        launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n            Log.error(reason);\n        });\n        // Prepare the data to be saved.\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n            // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n            cmid: element.getAttribute(\"data-cmid\"),\n        };\n    };\n\n    const onSourceChange = (e) => {\n        // Do check source and target and propose rephrase if PRO.\n        Log.debug(`ui/onSourceChange:203 > e`);\n        Log.debug(e.target.getAttribute('data-key'));\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     * ui.js\n     */\n    const onItemChecked = (e) => {\n        Log.info(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n        // Check/uncheck checkboxes changes the charcount and icon status.\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n            countWordAndChar();\n        }\n        const editor = findEditor(e.target.getAttribute('data-key'));\n        Log.debug(`ui/onItemChecked:197`);\n        Log.debug(editor);\n    };\n    const registerUI = () => {\n        try {\n            langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n            errordbtitle = langstrings.uistrings.errordbtitle;\n            saveAllBtn = domQuery(Selectors.actions.saveAll);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n           // SourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n            // targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        // Check/uncheck checkboxes\n        if (e.target.checked) {\n            checkboxes.forEach((i) => {\n                // Toggle check box upon visibility\n                i.checked = !getParentRow(i).classList.contains('d-none');\n                toggleStatus(i.getAttribute('data-key'), i.checked);\n            });\n        } else {\n            checkboxes.forEach((i) => {\n                i.checked = false;\n                toggleStatus(i.getAttribute('data-key'), false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        autotranslateButton.disabled = true;\n        for (let i in checkboxes) {\n            let e = checkboxes[i];\n            if (e.checked) {\n                autotranslateButton.disabled = false;\n                break;\n            }\n        }\n    };\n    /**\n     *Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body, type = 'default') => {\n        Modal.create({\n            title: title,\n            body: body,\n            type: type,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n        const onTranslationFailed = (error) => {\n            let s = langstrings.uistrings.deeplapiexception;\n            showModal(s, error, 'Alert');\n        };\n        /**\n         * Event listener for failed translations per item.\n         * @param {object} data\n         *\n        const onItemNotTranslated = (data) => {\n            onErrorMessageItem(data.key, findEditor(data.key), data.error);\n        };\n         */\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch autotranslation.\n     * ui.js + translation.js (split)\n     */\n    const doAutotranslate = () => {\n        const keys = [];\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                const key = ckBox.getAttribute(\"data-key\");\n                const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                const editor = findEditor(key);\n                Translation.initTempForKey(\n                    key, editor,\n                    sourceText.getAttribute(\"data-sourcetext-raw\"),\n                    sourceText.getAttribute(\"data-filedtext-raw\"),\n                    domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                );\n                keys.push(key);\n            });\n\n        Translation.callTranslations(keys);\n    };\n    /**\n     * Row visibility.\n     *\n     * @param {HTMLElement} row\n     * @param {Boolean} checked\n     * ui.js\n     */\n    const toggleRowVisibility = (row, checked) => {\n        if (checked) {\n            row.classList.remove(\"d-none\");\n        } else {\n            row.classList.add(\"d-none\");\n        }\n    };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         * ui.js\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /* Const refreshTempTranslation = (key)=>{\n            Translation.initTempForKey(\n                key, findEditor(key),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-sourcetext-raw\"),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-filedtext-raw\"),\n                domQuery(Selectors.sourcetexts.sourcelangs, key).value\n            );\n        };*/\n    /**\n     * Shows/hides rows.\n     * @param {string} selector\n     * @param {boolean} selected\n     * ui.js ok\n     */\n    const showRows = (selector, selected) => {\n        const items = domQueryAll(selector);\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n        items.forEach((item) => {\n            let k = item.getAttribute('data-row-id');\n            toggleRowVisibility(item, selected);\n            // When a row is toggled then we don't want it to be selected and sent from translation.\n            try {\n                domQuery(Selectors.editors.multiples.checkBoxesWithKey, k).checked = allSelected && selected;\n                toggleStatus(k, false);\n            } catch (e) {\n                Log.warn(`${k} translation is disalbled`);\n            }\n\n        });\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {string} key\n     * @param {string} error\n     */\n    const onErrorMessageItem = (key, error) => {\n        Log.warn(`ui/errorMessageItem:440`);\n        Log.warn(key);\n        Log.warn(error);\n        const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        // Display granular error messages.\n        const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n        if (indexOfSET === -1) {\n            showErrorMessageForEditor(key, error);\n        } else {\n            let s = langstrings.uistrings.errortoolong;\n            showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n        }\n    };\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {string} savedText\n     */\n    const onSuccessMessageItem = (key, savedText) => {\n        Log.debug(`ui/successMessageItem:471 > savedText`);\n        Log.debug(savedText);\n        domQuery(Selectors.editors.multiples.editorsWithKey, key)\n            .classList.add(\"local_deepler__success\");\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.success);\n        // Replace text in the multilang textarea.\n        const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n        multilangTextarea.innerHTML = savedText;\n        // Deselect the checkbox.\n        domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n        // Remove success message after a few seconds.\n        setTimeout(() => {\n            let multilangPill = domQuery(Selectors.statuses.multilang, key);\n            let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n\n            Log.debug(`ui/:488 > multilangPill`);\n            Log.debug(multilangPill);\n            Log.debug(`ui/:492 > multilangPill.classList.contains(\"disabled\")`);\n            Log.debug(multilangPill.classList.contains(\"disabled\"));\n\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n     /**/\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     * ui.js\n     */\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"target_lang\", e.target.value);\n        window.location = url.toString();\n\n        // Translation.setMainLangs('', e.target.value);\n        // Events.emit(ON_TARGET_LANG_CHANGE, e.target.value);\n        // DomQuery(Selectors.sourcetexts.targetlang).innerText = e.target.value;\n\n\n    };\n        /**\n         * Event listner for changes of target language.\n         * @param {string} e\n         *\n    const onTagrgetChanged = (e) => {\n        Translation.setMainLangs('', e);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n    };\n         */\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     *\n     * ui.js\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0;\n        let cws = 0;\n        let cwos = 0;\n       domQueryAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n        let current = cwos + config.usage.character.count;\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n        if (current >= config.usage.character.limit) {\n            parent.classList.remove('alert-success');\n            parent.classList.add('alert-danger');\n        } else {\n            parent.classList.add('alert-success');\n            parent.classList.remove('alert-danger');\n        }\n    };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         * @todo MDL-0 get the editor from moodle db in the php.\n         * ui.js\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         * ui.js\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     * ui.js\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n        Translation.init(cfg);\n        TinyChecker.init();\n        config = cfg;\n        // Utils.registerLoggers(cfg.debug);\n        Log.info(cfg);\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        // OnTagrgetChanged(config.lang);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n        showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n    };\n    return {\n        init: init,\n        setIconStatus: setIconStatus,\n        findEditor: findEditor,\n        findEditorByType: findEditorByType,\n    };\n});\n"],"names":["define","Log","TinyMCE","Modal","Selectors","Translation","Utils","Events","TinyChecker","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","handleChangeEvent","e","target","closest","actions","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","checkBoxes","onItemChecked","sourceselect","onSourceChange","handleClickEvent","toggleMultilang","keyid","getAttribute","key","keyidToKey","source","domQuery","sourcetexts","keys","multilang","multilangs","classList","toggle","onToggleMultilang","autoTranslateBtn","deeplsourcelang","targetlang","undefined","doAutotranslate","toggleAllCheckboxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","selectedCheckboxes","domQueryAll","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","then","r","info","catch","reason","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","keyValidator","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","cmid","debug","toggleStatus","countWordAndChar","editor","findEditor","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","remove","setAttribute","statusstrings","node","replaceKey","parentrow","type","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","ckBox","sourceText","initTempForKey","sourcelangdd","value","callTranslations","initTemp","totranslate","translated","failed","success","saved","selector","selected","items","allSelected","item","k","row","checkBoxesWithKey","warn","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","parent","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","innerHTML","setTimeout","multilangPill","prevTransStatus","message","errorMsg","document","createElement","appendChild","url","URL","window","location","href","searchParams","set","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","trim","match","el","q","querySelector","querySelectorAll","init","cfg","JSON","parse","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":";;;;;;AAuBAA,gCAAO,CAAC,WACA,qBACA,aACA,cACA,gBACA,UACA,iBACA,kBACJ,CAACC,IAAKC,QACLC,MACAC,UACAC,YACAC,MACAC,OAAQC,mBACLC,OAAS,GACTC,YAAc,GACdC,oBAAsB,GACtBC,WAAa,GACbC,aAAe,GACfC,WAAa,GAGbC,OAAS,IAAIC,KAAKC,aAClBC,aAAe,GACfC,aAAe,SAEbC,WAAa,CAACC,MAAOC,UACvBC,oBAAaJ,yBAAgBG,kDAA6CD,OAAS,UAEjFG,iBAAoBC,YACD,OAAjBP,cAAyBA,aAAaQ,WACtCR,aAAaS,OAEbF,OAAOG,OAAS,EAAG,KACfC,EAAIpB,OAAOqB,UAAUC,eACzBF,EAAEG,QAAQ,OAAQP,OAAOG,QACzBL,UAAUJ,aAAcU,EAAG,WAoC7BI,kBAAqBC,IACnBA,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQC,iBACnCC,aAAaL,GAEbA,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQG,iBACnCC,aAAaP,GAEbA,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQK,cACnCC,SAASvC,UAAUwC,SAASC,QAASX,EAAEC,OAAOW,SAE9CZ,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQU,iBACnCJ,SAASvC,UAAUwC,SAASI,YAAad,EAAEC,OAAOW,SAElDZ,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQY,aACnCC,cAAchB,GAEdA,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQc,eACnCC,eAAelB,IAqBjBmB,iBAAoBnB,IAClBA,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQiB,kBAdhBpB,CAAAA,QACnBqB,MAAQrB,EAAEsB,aAAa,iBACvBC,IAAMnD,MAAMoD,WAAWH,OACvBI,OAASC,SAASxD,UAAUyD,YAAYC,KAAML,KAC9CM,UAAYH,SAASxD,UAAUyD,YAAYG,WAAYT,OAC3DI,OAAOM,UAAUC,OAAO,QACxBH,UAAUE,UAAUC,OAAO,SASvBC,CAAkBjC,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQiB,kBAErDpB,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQ+B,oBAC/B3D,OAAO4D,kBAAoB5D,OAAO6D,iBAAoCC,IAAtB9D,OAAO6D,WACvD/C,UAAU,6DAAuDd,OAAO6D,oBAExEE,mBAGJtC,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQxB,eACnC4D,oBAAoBvC,GAEpBA,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQY,aACnCyB,4BAGAxC,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQsC,UACnCC,mBAEA1C,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQwC,iBACnCC,sBAAsB5C,IAOxB0C,iBAAmB,WACfG,mBAAqBC,YAAY5E,UAAUwC,SAASqC,sBACxB,IAA9BF,mBAAmBnD,cAIvBhB,WAAWsE,UAAW,EArFNC,WAChBjE,mBAAqBf,MAAMiF,OAAO,CAC9BC,MAAO5E,OAAOqB,UAAUwD,kBACxBC,KAAM9E,OAAOqB,UAAU0D,yBAErBtE,aAAauE,QAiFnBC,GAAcC,MAAKC,GAAK3F,IAAI4F,KAAK,0BAA4BD,KAAIE,OAAOC,SACpE9F,IAAIoB,MAAM0E,iBAGRC,KAAO,GACAC,MAAMC,KAAKnB,oBAAoBoB,KAAKjE,GAAMA,EAAEkE,QAAQ3C,MAC5D4C,SAAS5C,MAEF6C,cAAc7C,OAASrD,UAAUwC,SAAS2D,SAC1CC,iBAAiB/C,KACjBuC,KAAKS,KAAKC,cAAcjD,UAIpCpD,YAAYuE,iBAAiBoB,KAAMvF,SAMjCqE,sBAAyB5C,UACrBuB,IAAMvB,EAAEC,OAAOC,QAAQhC,UAAUiC,QAAQwC,gBAAgBuB,QAAQO,aACnEL,cAAc7C,OAASrD,UAAUwC,SAAS2D,SAC1CC,iBAAiB/C,KACjBpD,YAAYuE,iBAAiB,CAAC8B,cAAcjD,MAAOhD,UAQrDiG,cAAiBjD,YACbmD,QAAUhD,SAASxD,UAAUyG,QAAQC,UAAUC,eAAgBtD,WAC9D,CACHA,IAAKA,IACLuD,SAAUvG,OAAOuG,SACjBC,GAAIC,SAASN,QAAQpD,aAAa,YAClC2D,IAAKP,QAAQpD,aAAa,YAC1B4D,MAAOR,QAAQpD,aAAa,cAC5B6D,MAAOT,QAAQpD,aAAa,cAC5B8D,KAAMV,QAAQpD,aAAa,eAI7BJ,eAAkBlB,IAEpBjC,IAAIsH,mCACJtH,IAAIsH,MAAMrF,EAAEC,OAAOqB,aAAa,cAO9BN,cAAiBhB,IACnBjC,IAAI4F,KAAK,YAAa3D,EAAEC,OAAOqB,aAAa,YAAatB,EAAEC,OAAOqB,aAAa,gBAElC,2BAAzCtB,EAAEC,OAAOqB,aAAa,iBACtBgE,aAAatF,EAAEC,OAAOqB,aAAa,YAAatB,EAAEC,OAAOW,SACzD2E,0BAEEC,OAASC,WAAWzF,EAAEC,OAAOqB,aAAa,aAChDvD,IAAIsH,8BACJtH,IAAIsH,MAAMG,SAuBRjD,oBAAuBvC,IAErBA,EAAEC,OAAOW,QACThC,WAAWuF,SAASuB,IAEhBA,EAAE9E,SAAW+E,aAAaD,GAAG3D,UAAU6D,SAAS,UAChDN,aAAaI,EAAEpE,aAAa,YAAaoE,EAAE9E,YAG/ChC,WAAWuF,SAASuB,IAChBA,EAAE9E,SAAU,EACZ0E,aAAaI,EAAEpE,aAAa,aAAa,MAGjDkB,4BACA+C,oBAKE/C,0BAA4B,KAC9B/D,oBAAoBuE,UAAW,MAC1B,IAAI0C,KAAK9G,WAAY,IACdA,WAAW8G,GACb9E,QAAS,CACXnC,oBAAoBuE,UAAW,WAWrCoB,cAAiB7C,KACZG,SAASxD,UAAUiC,QAAQ0F,aAActE,KAAKD,aAAa,eAShEwE,cAAgB,SAACvE,SAAKnC,8DAASlB,UAAUwC,SAASqF,KAAMC,8DACtDC,KAAOvE,SAASxD,UAAUiC,QAAQ0F,aAActE,KAC/CyE,OASIC,KAAKlE,UAAU6D,SAAS,SACzBK,KAAKlE,UAAUmE,IAAI,OACnBD,KAAKlE,UAAUmE,IAAI,0BAEnBD,KAAKlE,UAAU6D,SAAS,YACxBK,KAAKlE,UAAUoE,OAAO,aAbrBF,KAAKlE,UAAU6D,SAAS,YACzBK,KAAKlE,UAAUmE,IAAI,WAEnBD,KAAKlE,UAAU6D,SAAS,SACxBK,KAAKlE,UAAUoE,OAAO,OACtBF,KAAKlE,UAAUoE,OAAO,2BAW9BF,KAAKG,aAAa,OAAQJ,MAAQ,SAAW,UAC7CC,KAAKG,aAAa,cAAehH,QACjC6G,KAAKG,aAAa,QAAS5H,YAAY6H,cAAcjH,OAAOU,QAAQ,iBAAkB,OAOpF6F,aAAgBW,MACXA,KAAKpG,QAAQ9B,MAAMmI,WAAWrI,UAAUyD,YAAY6E,UAAWF,KAAKhF,aAAa,cAEtFjC,UAAY,SAAC8D,MAAOE,UAAMoD,4DAAO,UACnCxI,MAAMiF,OAAO,CACTC,MAAOA,MACPE,KAAMA,KACNoD,KAAMA,KACNlD,MAAM,EACNmD,eAAe,KAGbC,oBAAuBxH,YACrBQ,EAAInB,YAAYoB,UAAUgH,kBAC9BvH,UAAUM,EAAGR,MAAO,UAetB0H,iBAAoBtF,MAEtBuE,cAAcvE,IAAKrD,UAAUwC,SAAS2D,QAAQ,IAM5C/B,gBAAkB,WACdV,KAAO,GACblD,WAAWsE,UAAW,EACtBF,YAAY5E,UAAUwC,SAASqC,mBAC1BoB,SAAS2C,cACAvF,IAAMuF,MAAMxF,aAAa,YACzByF,WAAarF,SAASxD,UAAUyD,YAAYC,KAAML,KAClDiE,OAASC,WAAWlE,KAC1BpD,YAAY6I,eACRzF,IAAKiE,OACLuB,WAAWzF,aAAa,uBACxByF,WAAWzF,aAAa,sBACxBI,SAASxD,UAAUyD,YAAYsF,aAAc1F,KAAK2F,OAEtDtF,KAAK2C,KAAKhD,QAGlBpD,YAAYgJ,iBAAiBvF,OAuBvB0D,aAAe,CAAC/D,IAAKX,kBACRc,SAASxD,UAAUiC,QAAQ0F,aAActE,KAAK2C,QAAQ9E,aAE5DlB,UAAUwC,SAASqF,KACpB5H,YAAYiJ,SAAS7F,KACjBX,SACAkF,cAAcvE,IAAKrD,UAAUwC,SAAS2G,wBAIzCnJ,UAAUwC,SAAS2G,YAEhBzG,SAAWzC,YAAYmJ,WAAW/F,KAClCuE,cAAcvE,IAAKrD,UAAUwC,SAAS2D,QAAQ,GAE9CyB,cAAcvE,IAAKrD,UAAUwC,SAASqF,iBAGzC7H,UAAUwC,SAAS2D,OACfzD,SACDkF,cAAcvE,IAAKrD,UAAUwC,SAAS2G,wBAGzCnJ,UAAUwC,SAAS6G,YAEnBrJ,UAAUwC,SAAS8G,mBAEnBtJ,UAAUwC,SAAS+G,MACpBtJ,YAAYiJ,SAAS7F,OAkB/Bd,SAAW,CAACiH,SAAUC,kBAClBC,MAAQ9E,YAAY4E,UACpBG,YAAcnG,SAASxD,UAAUiC,QAAQxB,cAAciC,QAC7DgH,MAAMzD,SAAS2D,WACPC,EAAID,KAAKxG,aAAa,eAhEN,IAAC0G,IAAAA,IAiEDF,KAAMH,SA/D1BK,IAAIjG,UAAUoE,OAAO,UAErB6B,IAAIjG,UAAUmE,IAAI,cAgEdxE,SAASxD,UAAUyG,QAAQC,UAAUqD,kBAAmBF,GAAGnH,QAAUiH,aAAeF,SACpFrC,aAAayC,GAAG,GAClB,MAAO/H,GACLjC,IAAImK,eAAQH,oCAIpBvF,4BACA+C,oBAQE4C,mBAAqB,CAAC5G,IAAKpC,SAC7BpB,IAAImK,gCACJnK,IAAImK,KAAK3G,KACTxD,IAAImK,KAAK/I,OACMuC,SAASxD,UAAUyG,QAAQC,UAAUC,eAAgBtD,KAC7DQ,UAAUmE,IAAI,wBACrBJ,cAAcvE,IAAKrD,UAAUwC,SAAS6G,YAGlB,IADDpI,MAAMiJ,QAAQ,iBAE7BC,0BAA0B9G,IAAKpC,WAC5B,KACCQ,EAAInB,YAAYoB,UAAU0I,aAC9BD,0BAA0B9G,cAAQpC,MAAMoJ,UAAU,EAAGpJ,MAAMiJ,QAAQ,2BAAkBzI,MAQvF2E,iBAAoB/C,UAClBiH,OAAS9G,SAASxD,UAAUyG,QAAQC,UAAUC,eAAgBtD,KAC9DkH,WAAa/G,SAAS,gBAAiB,GAAI8G,QAC3CC,YACAD,OAAOE,YAAYD,aASrBE,qBAAuB,CAACpH,IAAKqH,aAC/B7K,IAAIsH,+CACJtH,IAAIsH,MAAMuD,WACVlH,SAASxD,UAAUyG,QAAQC,UAAUC,eAAgBtD,KAChDQ,UAAUmE,IAAI,0BAEnBJ,cAAcvE,IAAKrD,UAAUwC,SAAS8G,SAEZ9F,SAASxD,UAAUyG,QAAQC,UAAUiE,UAAWtH,KACxDuH,UAAYF,UAE9BlH,SAASxD,UAAUyG,QAAQC,UAAUqD,kBAAmB1G,KAAKX,SAAU,EAEvEmI,YAAW,SACHC,cAAgBtH,SAASxD,UAAUwC,SAASmB,UAAWN,KACrCG,SAASxD,UAAUwC,SAASuI,gBAAiB1H,KACnDQ,UAAY,iCAE5BhE,IAAIsH,iCACJtH,IAAIsH,MAAM2D,eACVjL,IAAIsH,gEACJtH,IAAIsH,MAAM2D,cAAcjH,UAAU6D,SAAS,aAEvCoD,cAAcjH,UAAU6D,SAAS,aACjCoD,cAAcjH,UAAUoE,OAAO,YAEnCL,cAAcvE,IAAKrD,UAAUwC,SAAS+G,WAUxCY,0BAA4B,CAAC9G,IAAK2H,eAChCV,OAAS9G,SAASxD,UAAUyG,QAAQC,UAAUC,eAAgBtD,WAC5D4H,SAAWC,SAASC,cAAc,OACxCF,SAASpE,GAAK,0BACdoE,SAASpH,UAAY,CAAC,sBACtBoH,SAASL,UAAYI,QACrBV,OAAOc,YAAYH,WAOjB9I,aAAgBL,QACduJ,IAAM,IAAIC,IAAIC,OAAOC,SAASC,MACfJ,IAAIK,aACVC,IAAI,cAAe7J,EAAEC,OAAOiH,OACzCuC,OAAOC,SAAWH,IAAIO,YAwBpBvJ,aAAgBP,QACduJ,IAAM,IAAIC,IAAIC,OAAOC,SAASC,MACfJ,IAAIK,aACVC,IAAI,OAAQ7J,EAAEC,OAAOiH,OAClCuC,OAAOC,SAAWH,IAAIO,YAOpBvE,iBAAmB,SACjBwE,MAAQ,EACRC,IAAM,EACNC,KAAO,EACZnH,YAAY5E,UAAUwC,SAASqC,mBAC7BoB,SAAS2C,YACFvF,IAAMuF,MAAMxF,aAAa,YACzB4I,QAAUC,SAAS5I,KACvBwI,OAASG,QAAQE,UACjBH,MAAQC,QAAQG,oBAChBL,KAAOE,QAAQI,0BAEbF,UAAY1I,SAASxD,UAAUwC,SAAS6J,WACxCC,cAAgB9I,SAASxD,UAAUwC,SAAS4J,kBAC5CG,YAAc/I,SAASxD,UAAUwC,SAAS2J,qBAC1CK,aAAehJ,SAASxD,UAAUwC,SAASiK,YAC3CC,aAAelJ,SAASxD,UAAUwC,SAASmK,UAC3CrC,OAAS9G,SAASxD,UAAUwC,SAASoK,0BACvCC,QAAUd,KAAO1L,OAAOyM,MAAMC,UAAUC,MAC5Cd,UAAUe,UAAYpB,MACtBS,cAAcW,UAAYnB,IAC1BS,YAAYU,UAAYlB,KACxBS,aAAaS,UAAYtM,OAAOA,OAAOkM,SACvCH,aAAaO,UAA6C,OAAjC5M,OAAOyM,MAAMC,UAAUG,MAAiB,IAAMvM,OAAOA,OAAON,OAAOyM,MAAMC,UAAUG,OACxGL,SAAWxM,OAAOyM,MAAMC,UAAUG,OAClC5C,OAAOzG,UAAUoE,OAAO,iBACxBqC,OAAOzG,UAAUmE,IAAI,kBAErBsC,OAAOzG,UAAUmE,IAAI,iBACrBsC,OAAOzG,UAAUoE,OAAO,kBAUtBV,WAAclE,UACZvB,EAAI0B,SAASxD,UAAUyG,QAAQ0G,MAAMC,MAAO/J,QAEtC,OAANvB,EAAY,KACR0D,EAAI,SAEqC,IAD7B,CAAC,OAAQ,OAAQ,UAAW,YAC9B0E,QAAQ7J,OAAOgN,WACzBxN,IAAImK,KAAK,sBAAwB3J,OAAOgN,oBAIpC7H,EAAI8H,iBAAiBjK,IAAKhD,OAAOgN,WACnC,MAAOpM,OAELpB,IAAI0N,kCAA2BlN,OAAOgN,8BAAqBhK,aAG5DmC,QAEA,CAAC8B,OAAQxF,EAAG0L,WAjBd,UA0BPF,iBAAmB,CAACjK,IAAKmK,kBACvBC,GAAK,QACLC,GAAK,YACDF,gBACC,OACDC,GAAK,SACLC,GAAKlK,SAASxD,UAAUyG,QAAQ0G,MAAMQ,KAAMtK,eAE3C,OACDoK,GAAK,SACLC,GAAKE,sBAAsBvK,eAE1B,cACA,WACDqK,GAAKlK,SAASxD,UAAUyG,QAAQ0G,MAAMU,MAAOxK,WAG9C,CAACiE,OAAQoG,GAAIF,WAAYC,KAO9BG,sBAAyBvK,UACvBiE,OAAS,YACbxH,QAAQgO,kBAAkBC,OAAM,CAAClE,EAAGmE,IACY,GAAxCA,EAAEC,WAAWC,KAAKlF,MAAMkB,QAAQ7G,OAChCiE,OAASuC,EAAEsE,WACJ,KAIR7G,QAST2E,SAAY5I,YAER+K,IADO5K,SAASxD,UAAUyD,YAAYC,KAAML,KACjCD,aAAa,uBAExBiL,WAAanO,MAAMoO,cAAcpO,MAAMqO,WAAWH,MAAMI,aACvD,YACWH,WAAWI,MAAM,SAAW,IAAIjN,wBAC1B6M,WAAW7M,2BACR6M,WAAWzM,QAAQ,OAAQ,IAAIJ,SAWxDgC,SAAW,SAACgG,cAAUnG,2DAAM,GAAItB,8DAAS,WACrC2M,GAAK3M,MAAAA,OAAAA,OAAUmJ,SACfyD,EAAY,KAARtL,IAAamG,SAAWA,SAAS5H,QAAQ,QAASyB,YACrDqL,GAAGE,cAAcD,IAWlB/J,YAAc,SAAC4E,cAAUnG,2DAAM,GAAItB,8DAAS,WACxC2M,GAAK3M,MAAAA,OAAAA,OAAUmJ,SACfyD,EAAY,KAARtL,IAAamG,SAAWA,SAAS5H,QAAQ,QAASyB,YACrDqL,GAAGG,iBAAiBF,UAwB5B,CACHG,KAnBUC,MACV9O,YAAY6O,KAAKC,KACjB3O,YAAY0O,OACZzO,OAAS0O,IAETlP,IAAI4F,KAAKsJ,KAxgBM,UAEXzO,YAAc0O,KAAKC,MAAMzL,SAASxD,UAAUK,OAAOC,aAAa8C,aAAa,qBAC7ErC,aAAeT,YAAYoB,UAAUX,aACrCP,WAAagD,SAASxD,UAAUiC,QAAQsC,SACxC9D,aAAe+C,SAASxD,UAAUiC,QAAQxB,cAG1CF,oBAAsBiD,SAASxD,UAAUiC,QAAQ+B,kBACjDtD,WAAakE,YAAY5E,UAAUiC,QAAQY,YAE7C,MAAOf,GACDzB,OAAO8G,OACPtH,IAAIoB,MAAMa,EAAEkJ,WA4fpBkE,GAjrBAhE,SAASiE,iBAAiB,SAAUtN,mBACpCqJ,SAASiE,iBAAiB,QAASlM,kBAGnC9C,OAAOiP,GAAGnP,YAAYoP,mBAAoB1G,kBAC1CxI,OAAOiP,GAAGnP,YAAYqP,sBAAuB7G,qBAC7CtI,OAAOiP,GAAGnP,YAAYsP,mBAAoBnO,kBAC1CjB,OAAOiP,GAAGnP,YAAYuP,aAAcxO,YACpCb,OAAOiP,GAAGnP,YAAYwP,cAAehF,sBACrCtK,OAAOiP,GAAGnP,YAAYyP,kBAAmBzF,oBA0qBzC3F,4BAEA9D,WAAWsE,UAAW,EACtBrE,aAAaqE,UAAY7E,YAAY0P,iBACrCjP,WAAWuF,SAASmC,OAChBA,KAAKtD,SAAWrE,aAAaqE,YAEjCvC,SAASvC,UAAUwC,SAASC,QAASe,SAASxD,UAAUiC,QAAQK,aAAaI,SAC7EH,SAASvC,UAAUwC,SAASI,YAAaY,SAASxD,UAAUiC,QAAQU,gBAAgBD,UAIpFkF,cAAeA,cACfL,WAAYA,WACZ+F,iBAAkBA"}