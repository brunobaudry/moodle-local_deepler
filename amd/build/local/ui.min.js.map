{"version":3,"file":"ui.min.js","sources":["../../src/local/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/log', 'editor_tiny/editor', 'core/str', 'core/modal', './selectors', './translation', './utils', './customevents'],\n    (Log, TinyMCE, Str, Modal, Selectors, Translation, Utils, Events) => {\n    const {getString} = Str;\n    let config = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    // Let sourceLang = \"\";\n    // let targetLang = \"\";\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n    // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON, onItemTranslated);\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @returns {Promise<void>}\n     * ui.js\n     */\n    const launchModal = async() => {\n        saveAllModal = await Modal.create({\n            title: getString('saveallmodaltitle', 'local_deepler'),\n            body: getString('saveallmodalbody', 'local_deepler'),\n        });\n        await saveAllModal.show();\n    };\n    /**\n     * Event listener for change events.\n     * @param {event} e\n     */\n    const handleChangeEvent = (e) => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    };\n    /**\n     * Multilang button handler\n     * @param {Event} e Event\n     * ui.js ok\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        let source = domQuery(Selectors.sourcetexts.keys, key);\n        let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n        source.classList.toggle(\"show\");\n        multilang.classList.toggle(\"show\");\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                showModal('Cannot call deepl', `<p>Both languages are the same ${config.lang}</p>`);\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n    };\n\n        /**\n         * @returns\n         */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        saveAllBtn.disabled = true;\n        launchModal().then(r => Log.info('SaveAll Modal launched ' + r));\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        Log.warn(key);\n        Log.warn(getIconStatus(key));\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n        };\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     * ui.js\n     */\n    const onItemChecked = (e) => {\n\n        Log.info(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n        const key = e.target.getAttribute('data-key');\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(key, e.target.checked);\n            countWordAndChar();\n        } else {\n            Translation.initTempForKey(\n                key, findEditor(key),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-sourcetext-raw\"),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-filedtext-raw\")\n            );\n        }\n    };\n    const registerUI = () => {\n        try {\n            saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n            Translation.setMainLangs(\n                config.currentlang,\n                config.lang);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n           // SourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n            // targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        // Check/uncheck checkboxes\n        if (e.target.checked) {\n            checkboxes.forEach((i) => {\n                // Toggle check box upon visibility\n                i.checked = !getParentRow(i).classList.contains('d-none');\n                toggleStatus(i.getAttribute('data-key'), i.checked);\n            });\n        } else {\n            checkboxes.forEach((i) => {\n                i.checked = false;\n                toggleStatus(i.getAttribute('data-key'), false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        autotranslateButton.disabled = true;\n        for (let i in checkboxes) {\n            let e = checkboxes[i];\n            if (e.checked) {\n                autotranslateButton.disabled = false;\n                break;\n            }\n        }\n    };\n    /**\n     *Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', config.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body) => {\n        Modal.create({\n            title: title,\n            body: body,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch autotranslation.\n     * ui.js + translation.js (split)\n     */\n    const doAutotranslate = () => {\n        const keys = [];\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                keys.push(ckBox.getAttribute(\"data-key\"));\n            });\n\n        Translation.callTranslations(keys);\n    };\n    /**\n     * Row visibility.\n     *\n     * @param {HTMLElement} row\n     * @param {Boolean} checked\n     * ui.js\n     */\n    const toggleRowVisibility = (row, checked) => {\n        if (checked) {\n            row.classList.remove(\"d-none\");\n        } else {\n            row.classList.add(\"d-none\");\n        }\n    };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         * ui.js\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        refreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        const refreshTempTranslation = (key)=>{\n            Translation.initTempForKey(\n                key, findEditor(key),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-sourcetext-raw\"),\n                domQuery(Selectors.sourcetexts.keys, key).getAttribute(\"data-filedtext-raw\"),\n                domQuery(Selectors.sourcetexts.sourcelangs, key).value\n            );\n        };\n    /**\n     * Shows/hides rows.\n     * @param {string} selector\n     * @param {boolean} selected\n     * ui.js ok\n     */\n    const showRows = (selector, selected) => {\n        const items = domQueryAll(selector);\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n        items.forEach((item) => {\n            let k = item.getAttribute('data-row-id');\n            toggleRowVisibility(item, selected);\n            // When a row is toggled then we don't want it to be selected and sent from translation.\n            try {\n                domQuery(Selectors.editors.multiples.checkBoxesWithKey, k).checked = allSelected && selected;\n                toggleStatus(k, false);\n            } catch (e) {\n                Log.trace(`${k} translation is disalbled`);\n            }\n\n        });\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {String} key\n     * @param {HTMLElement} editor\n     * @param {String} message\n     * ui.js\n     *\n    const errorMessageItem = (key, editor, message) => {\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        showErrorMessageForEditor(key, message);\n    };\n     */\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     * ui.js\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {HTMLElement} element\n     * ui.js\n     *\n    const successMessageItem = (key, element) => {\n        element.classList.add(\"local_deepler__success\");\n        // Add saved indicator\n        setIconStatus(key, Selectors.statuses.success);\n        // Remove success message after a few seconds\n        setTimeout(() => {\n            let multilangPill = document.querySelector(Utils.replaceKey(Selectors.statuses.multilang, key));\n            let prevTransStatus = document.querySelector(Utils.replaceKey(Selectors.statuses.prevTransStatus, key));\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n     */\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     * ui.js\n     *\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n     */\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"target_lang\", e.target.value);\n        window.location = url.toString();\n\n        // Translation.setMainLangs('', e.target.value);\n        // Events.emit(ON_TARGET_LANG_CHANGE, e.target.value);\n        // DomQuery(Selectors.sourcetexts.targetlang).innerText = e.target.value;\n\n\n    };\n        /**\n         * Event listner for changes of target language.\n         * @param {string} e\n         */\n    const onTagrgetChanged = (e) => {\n        Translation.setMainLangs('', e);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n    };\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     *\n     * ui.js\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0;\n        let cws = 0;\n        let cwos = 0;\n       domQueryAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n        let current = cwos + config.usage.character.count;\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n        if (current >= config.usage.character.limit) {\n            parent.classList.remove('alert-success');\n            parent.classList.add('alert-danger');\n        } else {\n            parent.classList.add('alert-success');\n            parent.classList.remove('alert-danger');\n        }\n    };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         * @todo MDL-0 get the editor from moodle db in the php.\n         * ui.js\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         * ui.js\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            TinyMCE.getAllInstances().forEach((k, v)=>{\n               // Window.console.log(k, v);\n                // window.console.log(v.attributes.name.value, k.getBody());\n                if (v.attributes.name.value === key) {\n                    return k.getBody();\n                }\n            });\n            return null;\n        };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     * ui.js\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n        config = cfg;\n        // Utils.registerLoggers(cfg.debug);\n        Log.info(cfg);\n        getString('errordbtitle', 'local_deepler')\n            .then((s)=>{\n                errordbtitle = s;\n            })\n            .catch((e)=>{\n                e('errordbtitle, could not get Moodle string!!!');\n            }\n        );\n        Log.info(errordbtitle);\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        onTagrgetChanged(config.lang);\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n        showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n    };\n    return {\n        init: init,\n        setIconStatus: setIconStatus,\n        findEditor: findEditor,\n        findEditorByType: findEditorByType,\n    };\n});\n"],"names":["define","Log","TinyMCE","Str","Modal","Selectors","Translation","Utils","Events","getString","config","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","handleChangeEvent","e","target","closest","actions","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","checkBoxes","sourceselect","onItemChecked","handleClickEvent","toggleMultilang","keyid","getAttribute","key","keyidToKey","source","domQuery","sourcetexts","keys","multilang","multilangs","classList","toggle","onToggleMultilang","autoTranslateBtn","currentlang","lang","undefined","showModal","doAutotranslate","toggleAllCheckboxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","selectedCheckboxes","domQueryAll","checkedCheckBoxes","length","disabled","async","create","title","body","show","launchModal","then","r","info","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","keyValidator","warn","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","toggleStatus","countWordAndChar","initTempForKey","findEditor","i","getParentRow","contains","validatorBtn","setIconStatus","status","wait","isBtn","icon","add","remove","setAttribute","statusstrings","replace","node","replaceKey","parentrow","removeOnClose","onItemTranslated","ckBox","callTranslations","initTemp","totranslate","refreshTempTranslation","translated","failed","success","saved","sourcelangs","value","selector","selected","items","allSelected","item","k","row","checkBoxesWithKey","trace","parent","alertChild","removeChild","url","URL","window","location","href","searchParams","set","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","indexOf","userPrefs","findEditorByType","error","editor","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","trim","match","el","document","q","querySelector","querySelectorAll","init","cfg","s","catch","setMainLangs","debug","message","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON","isTranslatable"],"mappings":"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"}