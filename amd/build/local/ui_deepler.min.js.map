{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/loader',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy',\n    './api'\n    ],\n    (Log, TinyMCEinit, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy,\n     Api) => {\n        let hideiframes = {};\n        // Store removed iframes and their parent/next sibling for restoration.\n        let removedIframes = [];\n\n        let config = {};\n        let langstrings = {};\n        let autotranslateButton = {};\n        let saveAllBtn = {};\n        let selectAllBtn = {};\n        let checkboxes = [];\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        let errordbtitle = '';\n        let settingsUI = {};\n        let allDataFormatOne = [];\n        let glossaryDetailViewr;\n        /**\n         * When a main error with the DB occurs.\n         *\n         * @param {string} error\n         * @param {int} status\n         */\n        const onDBFailed = (error, status) => {\n            showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n        };\n        /**\n         *\n         * @param {array} errors\n         */\n        const onDbSavedSuccess = (errors) => {\n            if (saveAllModal !== null && saveAllModal.isVisible) {\n                saveAllModal.hide();\n            }\n            if (errors.length > 0) {\n                let s = langstrings.uistrings.errordbpartial;\n                s = s.replace('{$a}', errors.length);\n                showModal(errordbtitle, s, 'Alert');\n            }\n        };\n\n\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n        /**\n         * Event factories.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', handleChangeEvent);\n            document.addEventListener('click', handleClickEvent);\n            document.addEventListener('focusin', handleFocusEvent);\n\n            // Translation events.\n            Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n            Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n            Events.on(Translation.ON_DB_FAILED, onDBFailed);\n            Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n            Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n            Events.on(Api.GLOSSARY_DB_ALL_FAILED, onGlossaryDbAllfailed);\n            Events.on(Api.GLOSSARY_DB_FAILED, onGlossaryDbfailed);\n            Events.on(Api.GLOSSARY_DB_SUCCESS, onGlossaryDbSuccess);\n            Events.on(Api.GLOSSARY_ENTRIES_SUCCESS, showEntriesModal);\n            Events.on(Api.GLOSSARY_ENTRIES_FAILED, (e)=>window.console.error(e));\n        };\n        const showEntriesModal = (ajaxResponse)=>{\n            const glossaryid = ajaxResponse.glossaryid;\n            const entries = JSON.parse(ajaxResponse.entries);\n            const status = ajaxResponse.status;\n            const message = ajaxResponse.message;\n            if (status === 'success') {\n                const table = document.createElement('table');\n                table.className = 'generaltable';\n                // Create the header.\n                const thead = document.createElement('thead');\n                thead.innerHTML = `<tr><th>${ajaxResponse.source.toUpperCase()}</th>\n                <th>${ajaxResponse.target.toUpperCase()}</th></tr>`;\n                table.appendChild(thead);\n\n                const tbody = document.createElement('tbody');\n\n                Object.entries(entries).forEach(([key, value]) => {\n                    const row = document.createElement('tr');\n                    row.innerHTML = `<td>${key}</td><td>${value}</td>`;\n                    tbody.appendChild(row);\n                });\n\n                table.appendChild(tbody);\n\n                Modal.create({\n                    title: 'Entries',\n                    body: table,\n                    type: 'default',\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                Modal.create({\n                    title: `Error fetching entries for<br/><em>${glossaryid}</em>`,\n                    body: message,\n                    type: 'default',\n                    show: true,\n                    removeOnClose: true,\n                });\n            }\n        };\n        const onGlossaryDbAllfailed = (obj)=> {\n            Log.info('onGlossaryDbAllfailed');\n            Log.error(obj);\n        };\n\n        const onGlossaryDbfailed = (obj)=> {\n            Log.info('onGlossaryDbfailed');\n            Log.error(obj);\n        };\n\n        const onGlossaryDbSuccess = (obj)=> {\n            Log.info('onGlossaryDbSuccess');\n            Log.info(obj);\n        };\n        const resizeEditors = ()=>{\n\n            allDataFormatOne.forEach((editable)=>{\n                const key = editable.id.replace('tiny_', '');\n                const selector = `[data-sourcetext-key=\"${key}\"]`;\n                let parent = domQuery(selector);\n                const grandparent = parent.parentElement;\n\n                const updateEditableHeight = ()=> {\n                    const totalHeight = grandparent.offsetHeight + 80; // Tiny header average height is 80.\n                    editable.style.height = totalHeight + 'px';\n                };\n\n                // Observe size changes in parent and grandparent.\n                const resizeObserver = new ResizeObserver(() => {\n                    updateEditableHeight();\n                });\n\n                resizeObserver.observe(parent);\n                resizeObserver.observe(grandparent);\n\n            });\n        };\n        /**\n         * Register UI elements.\n         */\n        const registerUI = () => {\n\n            try {\n                allDataFormatOne = domQueryAll(Selectors.editors.targetarea);\n                hideiframes = domQuery(Selectors.actions.hideiframes);\n                langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n                errordbtitle = langstrings.uistrings.errordbtitle;\n                saveAllBtn = domQuery(Selectors.actions.saveAll);\n                selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n                autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n                checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n                glossaryDetailViewr = domQuery(Selectors.glossary.entriesviewerPage);\n                settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n                settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n                settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n                settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n                settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n                settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n                settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n                settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n                settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n                settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n                settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n                if (!config.isfree) {\n                    settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n                }\n                settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n                settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n                fetchCookies();\n                resizeEditors();\n            } catch (e) {\n                if (config.debug) {\n                    Log.error(e.message);\n                }\n            }\n        };\n        /**\n         * Get the stored settings for this course and lang pair.\n         */\n        const fetchCookies = () => {\n            if (!config.targetlang) {\n                return;\n            }\n            const glossaryCookie = Utils.getCookie(config);\n            const newCookie = Utils.getEncodedCookie(config);\n            if (newCookie !== null) {\n                const settingsCookie = JSON.parse(newCookie);\n                for (const selector in settingsUI) {\n                    if (settingsCookie[selector] !== undefined) {\n                        switch (settingsUI[selector].type) {\n                            case 'select-one' :\n                                // eslint-disable-next-line no-case-declarations\n                                let optionToSelect = domQuery(`option[value=\"${settingsCookie[selector]}\"]`);\n                                if (optionToSelect) {\n                                    optionToSelect.selected = true;\n                                }\n                                break;\n                            case 'checkbox' :\n                                settingsUI[selector].checked = settingsCookie[selector];\n                                break;\n                            case 'radio' :\n                                domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                                break;\n                            default:\n                                settingsUI[selector].value = settingsCookie[selector];\n                                break;\n                        }\n\n                    }\n                }\n            }\n            if (glossaryCookie !== null) {\n                // Legacy cookie.\n                settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: langstrings.uistrings.saveallmodaltitle,\n                body: langstrings.uistrings.saveallmodalbody,\n            });\n            await saveAllModal.show();\n        };\n        const handleFocusEvent = (e)=>{\n            if (e.target.closest(Selectors.editors.targetarea)) {\n                if (getIconStatus(e.target.id.replace('tiny_', '')) === Selectors.statuses.tosave) {\n                    const options = {\n                        subdirs: false,\n                        maxbytes: 10240,\n                        maxfiles: 0,\n                        noclean: true,\n                        trusttext: true,\n                        enable_filemanagement: false,\n                        autosave: false,\n                        removeorphaneddrafts: true,\n                        plugins: []\n                    };\n                    TinyMCEinit.getTinyMCE().then(\n                        ()=>{\n                            TinyMCE.setupForTarget(e.target, options)\n                                .then(()=>{\n                                    Log.info('tiny loaded for ' + e.target.id);\n                                })\n                                .catch((r)=>{\n                                    Log.error(r);\n                                });\n                        }\n                    );\n                }\n\n            }\n        };\n        /**\n         * Event listener for click events.\n         *\n         * @param {event} e\n         */\n        const handleClickEvent = (e) => {\n            if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n            }\n            if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                    showModal('Cannot call deepl', `<p>${langstrings.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n                } else {\n                    callDeeplServices();\n                }\n            }\n            if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                toggleAllCheckboxes(e);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                toggleAutotranslateButton();\n            }\n            if (e.target.closest(Selectors.actions.saveAll)) {\n                saveTranslations();\n            }\n            if (e.target.closest(Selectors.actions.validatorsBtns)) {\n                saveSingleTranslation(e);\n            }\n            if (e.target.closest(Selectors.glossary.entriesviewerPage)) {\n                window.console.info('CLICK');\n                window.console.info(settingsUI[Selectors.deepl.glossaryId].value);\n                Api.getGlossariesEntries(\n                    settingsUI[Selectors.deepl.glossaryId].value,\n                    config.deeplsourcelang,\n                    config.targetlang\n                );\n            }\n        };\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n        const handleChangeEvent = (e) => {\n\n            if (e.target.closest(Selectors.actions.hideiframes)) {\n                doHideiframes(hideiframes.checked);\n            }\n            if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                switchTarget(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                switchSource(e);\n            }\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                showRows(Selectors.statuses.updated, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                showRows(Selectors.statuses.needsupdate, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                showRows(Selectors.statuses.hidden, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                onItemChecked(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceselect)) {\n                onSourceChange(e);\n            }\n            if (e.target.closest(Selectors.deepl.glossaryId)) {\n                if (settingsUI[Selectors.deepl.glossaryId].value !== '') {\n                    glossaryDetailViewr.style.display = 'block';\n                } else {\n                    glossaryDetailViewr.style.display = 'none';\n                }\n            }\n        };\n        /**\n         * Toggle iFrames in sourcetexts.\n         * @param {boolean} isChecked\n         */\n        function doHideiframes(isChecked) {\n            const allIframes = domQueryAll(Selectors.sourcetexts.iframes);\n            if (!isChecked && allIframes.length > 0) {\n                removedIframes = [];\n                allIframes.forEach(iframe => {\n                    removedIframes.push({\n                        parent: iframe.parentNode,\n                        nextSibling: iframe.nextSibling,\n                        html: iframe.outerHTML\n                    });\n                    iframe.remove();\n                });\n            } else if (removedIframes.length > 0) {\n                // Restore all previously removed iframes.\n                removedIframes.forEach(info => {\n                    // Create a new element from the stored HTML.\n                    const tempDiv = document.createElement('div');\n                    tempDiv.innerHTML = info.html;\n                    const newIframe = tempDiv.firstChild;\n                    // Insert it back into the DOM\n                    if (info.nextSibling) {\n                        info.parent.insertBefore(newIframe, info.nextSibling);\n                    } else {\n                        info.parent.appendChild(newIframe);\n                    }\n                });\n                removedIframes = [];\n            }\n        }\n\n\n        /**\n         * Multilang button handler\n         *\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = Utils.keyidToKey(keyid);\n            if (key === null) {\n                Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n            } else {\n                let source = domQuery(Selectors.sourcetexts.keys, key);\n                let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n                source.classList.toggle(\"show\");\n                multilang.classList.toggle(\"show\");\n            }\n        };\n\n        /**\n         * @returns void\n         */\n        const saveTranslations = () => {\n            const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n            if (selectedCheckboxes.length === 0) {\n                return;\n            }\n            // Prepare the UI for the save process.\n            saveAllBtn.disabled = true;\n            launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n                Log.error(reason);\n            });\n            // Prepare the data to be saved.\n            const data = [];\n            const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n            keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                    if (getIconStatus(key) === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDBitem(key));\n                    }\n                }\n            );\n            Translation.saveTranslations(data, config);\n        };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n        const saveSingleTranslation = (e)=> {\n            const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n            if (getIconStatus(key) === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                Translation.saveTranslations([prepareDBitem(key)], config);\n            }\n        };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n        const prepareDBitem = (key) => {\n            const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            return {\n                key: key,\n                courseid: config.courseid,\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\"),\n                cmid: element.getAttribute(\"data-cmid\"),\n            };\n        };\n        /**\n         * Listener for individual source change.\n         * @todo MDL-000 implement in v1.4.0\n         *\n         * @param {event} e\n         */\n        const onSourceChange = (e) => {\n            // Do check source and target and propose rephrase if PRO.\n            Log.info('source changed');\n            Log.info(e.target.getAttribute('data-key'));\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n         */\n        const onItemChecked = (e) => {\n            // Check/uncheck checkboxes changes the charcount and icon status.\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n                countWordAndChar();\n            }\n        };\n\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Get the translation row status icon.\n         *\n         * @param {string} key\n         * @returns {*}\n         */\n        const getIconStatus = (key)=> {\n            return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n        };\n        /**\n         * Change translation process status icon.\n         *\n         * @param {string} key\n         * @param {string} status\n         * @param {boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = domQuery(Selectors.actions.validatorBtn, key);\n            if (!isBtn) {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            } else {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Fetch the parent row of the translation.\n         * @param {Node} node\n         * @returns {*}\n         */\n        const getParentRow = (node) => {\n            return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        const showModal = (title, body, type = 'default') => {\n            Modal.create({\n                title: title,\n                body: body,\n                type: type,\n                show: true,\n                removeOnClose: true,\n            });\n        };\n        /**\n         * Event Listener when DeepL API call failed.\n         * @param {string} error\n         */\n        const onTranslationFailed = (error) => {\n            let s = langstrings.uistrings.deeplapiexception;\n            showModal(s, error, 'Alert');\n        };\n        /**\n         * Event listener for the translations process to dispaly the status.\n         *\n         * @param {string} key\n         */\n        const onItemTranslated = (key) => {\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.tosave, true);\n        };\n        /**\n         * Launch deepl services.\n         */\n        const callDeeplServices = () => {\n            const keys = [];\n            const [cookie, settings] = prepareSettingsAndCookieValues();\n            saveAllBtn.disabled = false;\n            domQueryAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    const key = ckBox.getAttribute(\"data-key\");\n                    const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                    const editor = findEditor(key);\n                    Translation.initTempForKey(\n                        key, editor,\n                        sourceText.getAttribute(\"data-sourcetext-raw\"),\n                        sourceText.getAttribute(\"data-filedtext-raw\"),\n                        domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                    );\n                    keys.push(key);\n                });\n            const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n            Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), config.cookieduration);\n            Translation.callTranslations(keys, config, settings);\n        };\n        /**\n         * Parse the advanced settings UI and map the values for cookies and Deepl.\n         *\n         * @returns {[{},{}]}\n         */\n        const prepareSettingsAndCookieValues = () => {\n            let settings = {};\n            let cookie = {};\n            for (const selector in settingsUI) {\n                if (settingsUI[selector] === null) {\n                    Log.warn(`prepareSettingsAndCookieValues. Could not find selector ${selector}`);\n                    window.console.warn(settingsUI);\n                } else {\n                    switch (settingsUI[selector].type) {\n                        case 'select-one':\n                            cookie[selector] = settingsUI[selector].value;\n                            settings[selector] = settingsUI[selector].value;\n                            break;\n                        case 'textarea':\n                            cookie[selector] = settingsUI[selector].value;\n                            // Deepl needs an array.\n                            settings[selector] = Utils.toJsonArray(cookie[selector]);\n                            break;\n                        case 'checkbox':\n                            if (selector === Selectors.deepl.tagHandling) {\n                                cookie[selector] = settingsUI[selector].checked;\n                                // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                                settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                            } else {\n                                settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                            }\n                            break;\n                        case 'radio':\n                            settings[selector] = cookie[selector] = queryRadioValue(selector);\n                            break;\n                        default: // Text.\n                            settings[selector] = cookie[selector] = settingsUI[selector].value;\n                            break;\n                    }\n                }\n            }\n            return [cookie, settings];\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = domQueryAll(selector);\n            const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n            const shoudlcheck = allSelected && selected;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                if (selected) {\n                    item.classList.remove(\"d-none\");\n                } else {\n                    item.classList.add(\"d-none\");\n                }\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                    if (single !== null) {\n                        single.checked = shoudlcheck;\n                        toggleStatus(k, false);\n                    }\n                    const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                    if (allchilds !== null && allchilds.length > 0) {\n                        allchilds.forEach(c => {\n                            const key = c.getAttribute('data-key');\n                            c.checked = shoudlcheck;\n                            toggleStatus(key, false);\n                        });\n                    }\n                } catch (e) {\n                    Log.warn(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {string} key\n         * @param {string} error\n         */\n        const onErrorMessageItem = (key, error) => {\n            Log.warn(`ui/errorMessageItem`);\n            Log.warn(key);\n            Log.warn(error);\n            const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            // Display granular error messages.\n            const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n            if (indexOfSET === -1) {\n                showErrorMessageForEditor(key, error);\n            } else {\n                let s = langstrings.uistrings.errortoolong;\n                showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n            }\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            let alertChild = domQuery('.alert-danger', '', parent);\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {string} savedText\n         */\n        const onSuccessMessageItem = (key, savedText) => {\n            domQuery(Selectors.editors.multiples.editorsWithKey, key)\n                .classList.add(\"local_deepler__success\");\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.success);\n            // Replace text in the multilang textarea.\n            const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n            multilangTextarea.innerHTML = savedText;\n            // Deselect the checkbox.\n            domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n            // Remove success message after a few seconds.\n            setTimeout(() => {\n                let multilangPill = domQuery(Selectors.statuses.multilang, key);\n                let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n         /**/\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n            searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang,\n         * Hence reload the page and change the site main lang.\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n           domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                let key = ckBox.getAttribute(\"data-key\");\n                let results = getCount(key);\n                wrdsc += results.wordCount;\n                cwos += results.charNumWithOutSpace;\n                cws += results.charNumWithSpace;\n            });\n            const wordCount = domQuery(Selectors.statuses.wordcount);\n            const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n            const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n            let current = cws + config.usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n            if (current >= config.usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = domQuery(Selectors.sourcetexts.keys, key);\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Wrapper for radios value.\n         *\n         * @param {string} selector\n         * @returns {*}\n         */\n        const queryRadioValue = (selector) => {\n            return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n        };\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {element}\n         */\n        const domQuery = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelector(q);\n        };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n        /**\n         * Event listener to switch source lang.\n         * @param {*} cfg\n         */\n        const init = (cfg) => {\n            ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n                {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100, crumbsmaxlen: cfg.crumbsmaxlen});\n            Translation.init(cfg);\n            config = cfg;\n            Log.info(cfg);\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            doHideiframes(hideiframes.checked);\n            saveAllBtn.disabled = true;\n            selectAllBtn.disabled = !Translation.isTranslatable();\n            checkboxes.forEach((node) => {\n                node.disabled = selectAllBtn.disabled;\n            });\n            showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Api to be used by the other modules.\n         */\n        return {\n            init: init\n        };\n});\n"],"names":["define","Log","TinyMCEinit","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","Api","glossaryDetailViewr","hideiframes","removedIframes","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","allDataFormatOne","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","showEntriesModal","ajaxResponse","glossaryid","entries","JSON","parse","message","table","document","createElement","className","thead","innerHTML","source","toUpperCase","target","appendChild","tbody","Object","forEach","_ref","key","value","row","create","title","body","type","show","removeOnClose","onGlossaryDbAllfailed","obj","info","onGlossaryDbfailed","onGlossaryDbSuccess","resizeEditors","editable","id","selector","parent","domQuery","grandparent","parentElement","resizeObserver","ResizeObserver","totalHeight","offsetHeight","style","height","updateEditableHeight","observe","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","undefined","optionToSelect","selected","checked","deepl","glossaryId","handleFocusEvent","e","closest","editors","targetarea","getIconStatus","statuses","tosave","options","subdirs","maxbytes","maxfiles","noclean","trusttext","enable_filemanagement","autosave","removeorphaneddrafts","plugins","getTinyMCE","then","setupForTarget","catch","r","handleClickEvent","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","glossary","entriesviewerPage","window","console","getGlossariesEntries","handleChangeEvent","doHideiframes","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","display","isChecked","allIframes","domQueryAll","sourcetexts","iframes","iframe","push","parentNode","nextSibling","html","outerHTML","remove","tempDiv","newIframe","firstChild","insertBefore","keyid","getAttribute","keyidToKey","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","checkedCheckBoxes","disabled","async","saveallmodaltitle","saveallmodalbody","launchModal","reason","data","Array","from","map","dataset","hideErrorMessage","prepareDBitem","keyValidator","element","multiples","editorsWithKey","courseid","parseInt","tid","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","setAttribute","statusstrings","node","replaceKey","parentrow","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","cookieduration","callTranslations","warn","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","setTimeout","multilangPill","prevTransStatus","errorMsg","url","URL","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","crumbsmaxlen","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","GLOSSARY_DB_ALL_FAILED","GLOSSARY_DB_FAILED","GLOSSARY_DB_SUCCESS","GLOSSARY_ENTRIES_SUCCESS","GLOSSARY_ENTRIES_FAILED","isTranslatable"],"mappings":"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"}