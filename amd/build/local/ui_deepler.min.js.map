{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n    'editor_tiny/loader',\n    'editor_tiny/editor',\n    'core/modal',\n    './selectors',\n    './translation',\n    './utils',\n    './customevents',\n    './scrollspy',\n    './api'\n], (Log, TinyMCEinit, TinyMCE,\n    Modal,\n    Selectors,\n    Translation,\n    Utils,\n    Events,\n    ScrollSpy,\n    Api) => {\n\n    /**\n     * Debounce for performance\n     *\n     * @param {function} fn\n     * @param {int} delay\n     * @returns {(function(...[*]): void)|*}\n     */\n    const debounce = (fn, delay) => {\n        let timer;\n        return (...args) => {\n            clearTimeout(timer);\n            timer = setTimeout(() => fn(...args), delay);\n            };\n    };\n\n    /**\n     *\n     * @type {(function(...[*]): void)|*}\n     */\n    const debouncedShowRows = debounce(() => {\n showRows();\n}, 100);\n\n\n// Cached DOM elements\nconst cachedSelectors = {\n    wordCount: document.querySelector(Selectors.statuses.wordcount),\n    charWithSpace: document.querySelector(Selectors.statuses.charNumWithSpace),\n    charWOSpace: document.querySelector(Selectors.statuses.charNumWithOutSpace),\n    deeplUseSpan: document.querySelector(Selectors.statuses.deeplUsage),\n    deeplMaxSpan: document.querySelector(Selectors.statuses.deeplMax),\n    deeplStatusContainer: document.querySelector(Selectors.statuses.deeplStatusContainer)\n};\n\n\n    let hideiframes = {};\n    // Store removed iframes and their parent/next sibling for restoration.\n    let removedIframes = [];\n\n    let config = {};\n    let langstrings = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n    let settingsUI = {};\n    let allDataFormatOne = [];\n    let glossaryDetailViewr;\n    let filterTimeout;\n    /**\n     * When a main error with the DB occurs.\n     *\n     * @param {string} error\n     * @param {int} status\n     */\n    const onDBFailed = (error, status) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n    };\n    /**\n     *\n     * @param {array} errors\n     */\n    const onDbSavedSuccess = (errors) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        if (errors.length > 0) {\n            let s = langstrings.uistrings.errordbpartial;\n            s = s.replace('{$a}', errors.length);\n            showModal(errordbtitle, s, 'Alert');\n        }\n    };\n\n\n    // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n        document.addEventListener('focusin', handleFocusEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_TRANSLATION_DONE, onTranslationDone);\n        Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n        Events.on(Translation.ON_DB_FAILED, onDBFailed);\n        Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n        Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        Events.on(Api.GLOSSARY_DB_ALL_FAILED, onGlossaryDbAllfailed);\n        Events.on(Api.GLOSSARY_DB_FAILED, onGlossaryDbfailed);\n        Events.on(Api.GLOSSARY_DB_SUCCESS, onGlossaryDbSuccess);\n        Events.on(Api.GLOSSARY_ENTRIES_SUCCESS, showEntriesModal);\n        Events.on(Api.GLOSSARY_ENTRIES_FAILED, (e)=>Log.error(e));\n    };\n    const showEntriesModal = (ajaxResponse)=>{\n        const glossaryid = ajaxResponse.glossaryid;\n        const entries = JSON.parse(ajaxResponse.entries);\n        const status = ajaxResponse.status;\n        const message = ajaxResponse.message;\n        if (status === 'success') {\n            const table = document.createElement('table');\n            table.className = 'generaltable';\n            // Create the header.\n            const thead = document.createElement('thead');\n            thead.innerHTML = `<tr><th>${ajaxResponse.source.toUpperCase()}</th>\n                <th>${ajaxResponse.target.toUpperCase()}</th></tr>`;\n            table.appendChild(thead);\n\n            const tbody = document.createElement('tbody');\n\n            Object.entries(entries).forEach(([key, value]) => {\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${key}</td><td>${value}</td>`;\n                tbody.appendChild(row);\n            });\n\n            table.appendChild(tbody);\n\n            Modal.create({\n                title: 'Entries',\n                body: table,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        } else {\n            Modal.create({\n                title: `Error fetching entries for<br/><em>${glossaryid}</em>`,\n                body: message,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        }\n    };\n    const onGlossaryDbAllfailed = (obj)=> {\n        Log.info('onGlossaryDbAllfailed');\n        Log.error(obj);\n    };\n\n    const onGlossaryDbfailed = (obj)=> {\n        Log.info('onGlossaryDbfailed');\n        Log.error(obj);\n    };\n\n    const onGlossaryDbSuccess = (obj)=> {\n        Log.info('onGlossaryDbSuccess');\n        Log.info(obj);\n    };\n    const resizeEditors = ()=>{\n\n        allDataFormatOne.forEach((editable)=>{\n            const key = editable.id.replace('tiny_', '');\n            const selector = `[data-sourcetext-key=\"${key}\"]`;\n            let parent = domQuery(selector);\n            const grandparent = parent.parentElement;\n\n            const updateEditableHeight = ()=> {\n                const totalHeight = grandparent.offsetHeight + 80; // Tiny header average height is 80.\n                editable.style.height = totalHeight + 'px';\n            };\n\n            // Observe size changes in parent and grandparent.\n            const resizeObserver = new ResizeObserver(() => {\n                updateEditableHeight();\n            });\n\n            resizeObserver.observe(parent);\n            resizeObserver.observe(grandparent);\n\n        });\n    };\n    /**\n     * Register UI elements.\n     */\n    const registerUI = () => {\n\n        try {\n            allDataFormatOne = domQueryAll(Selectors.editors.targetarea);\n            hideiframes = domQuery(Selectors.actions.hideiframes);\n            langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n            errordbtitle = langstrings.uistrings.errordbtitle;\n            saveAllBtn = domQuery(Selectors.actions.saveAll);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n\nif (!glossaryDetailViewr && document.querySelector(Selectors.glossary.entriesviewerPage)) {\n    glossaryDetailViewr = document.querySelector(Selectors.glossary.entriesviewerPage);\n}\n\n            settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n            settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n            settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n            settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n            settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n            settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n            settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n            settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n            settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n            settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n            settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n            if (!config.isfree) {\n                settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n            }\n            settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n            settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n            fetchCookies();\n            resizeEditors();\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    /**\n     * Get the stored settings for this course and lang pair.\n     */\n    const fetchCookies = () => {\n        if (!config.targetlang) {\n            return;\n        }\n        const glossaryCookie = Utils.getCookie(config);\n        const newCookie = Utils.getEncodedCookie(config);\n        if (newCookie !== null) {\n            const settingsCookie = JSON.parse(newCookie);\n            for (const selector in settingsUI) {\n                if (settingsCookie[selector] !== undefined) {\n                    switch (settingsUI[selector].type) {\n                        case 'select-one' :\n                            setOptionFromCookie(settingsCookie[selector]);\n                            break;\n                        case 'checkbox' :\n                            settingsUI[selector].checked = settingsCookie[selector];\n                            break;\n                        case 'radio' :\n                            domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                            break;\n                        default:\n                            settingsUI[selector].value = settingsCookie[selector];\n                            break;\n                    }\n\n                }\n            }\n        }\n        if (glossaryCookie !== null) {\n            // Legacy cookie.\n            settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n        }\n    };\n    /**\n     * Selects a dd based on its value.\n     * @param {string} value\n     */\n    const setOptionFromCookie = (value)=>{\n        let optionToSelect = domQuery(`option[value=\"${value}\"]`);\n        if (optionToSelect) {\n            optionToSelect.selected = true;\n        }\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @param {object} messageObject\n     * @returns {Promise<void>}\n     */\n    const launchModal = async(messageObject) => {\n        saveAllModal = await Modal.create(messageObject);\n        await saveAllModal.show();\n    };\n    const handleFocusEvent = (e)=>{\n        if (e.target.closest(Selectors.editors.targetarea)) {\n            if (getIconStatus(e.target.id.replace('tiny_', '')) === Selectors.statuses.tosave) {\n                const options = {\n                    subdirs: false,\n                    maxbytes: 10240,\n                    maxfiles: 0,\n                    noclean: true,\n                    trusttext: true,\n                    // eslint-disable-next-line camelcase\n                    enable_filemanagement: false,\n                    autosave: false,\n                    removeorphaneddrafts: true,\n                    plugins: []\n                };\n                // eslint-disable-next-line promise/catch-or-return\n                TinyMCEinit.getTinyMCE().then(\n                    // eslint-disable-next-line promise/always-return\n                    ()=>{\n                        // eslint-disable-next-line promise/no-nesting\n                        TinyMCE.setupForTarget(e.target, options)\n                            // eslint-disable-next-line promise/always-return\n                            .then(()=>{\n                                Log.info('tiny loaded for ' + e.target.id);\n                            })\n                            .catch((r)=>{\n                                Log.error(r);\n                            });\n                    }\n                );\n            }\n\n        }\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                showModal('Cannot call deepl', `<p>${langstrings.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n            } else {\n                callDeeplServices();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n        if (e.target.closest(Selectors.glossary.entriesviewerPage)) {\n            Log.info('CLICK');\n            Log.info(settingsUI[Selectors.deepl.glossaryId].value);\n            Api.getGlossariesEntries(\n                settingsUI[Selectors.deepl.glossaryId].value,\n                config.deeplsourcelang,\n                config.targetlang\n            );\n        }\n    };\n    /**\n     * Event listener for change events.\n     * @param {event} e\n     */\n    const handleChangeEvent = (e) => {\n\n        if (e.target.closest(Selectors.actions.hideiframes)) {\n            doHideiframes(hideiframes.checked);\n        }\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sectionSwitcher)) {\n            switchSection(e);\n        }\n        if (e.target.closest(Selectors.actions.moduleSwitcher)) {\n            switchModules(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        clearTimeout(filterTimeout);\n        filterTimeout = setTimeout(() => {\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                debouncedShowRows();\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                debouncedShowRows();\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                debouncedShowRows();\n            }\n        }, 30);\n        /* If (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showHidden)) {\n            showRows(Selectors.statuses.hidden, e.target.checked);\n        }*/\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceselect)) {\n            onSourceChange(e);\n        }\n        if (e.target.closest(Selectors.deepl.glossaryId)) {\n            if (settingsUI[Selectors.deepl.glossaryId].value !== '') {\n                glossaryDetailViewr.style.display = 'block';\n            } else {\n                glossaryDetailViewr.style.display = 'none';\n            }\n        }\n    };\n    /**\n     * Toggle iFrames in sourcetexts.\n     * @param {boolean} isChecked\n     */\n    function doHideiframes(isChecked) {\n        const allIframes = domQueryAll(Selectors.sourcetexts.iframes);\n        if (!isChecked && allIframes.length > 0) {\n            removedIframes = [];\n            allIframes.forEach(iframe => {\n                removedIframes.push({\n                    parent: iframe.parentNode,\n                    nextSibling: iframe.nextSibling,\n                    html: iframe.outerHTML\n                });\n                iframe.remove();\n            });\n        } else if (removedIframes.length > 0) {\n            // Restore all previously removed iframes.\n            removedIframes.forEach(info => {\n                // Create a new element from the stored HTML.\n                const tempDiv = document.createElement('div');\n                tempDiv.innerHTML = info.html;\n                const newIframe = tempDiv.firstChild;\n                // Insert it back into the DOM\n                if (info.nextSibling) {\n                    info.parent.insertBefore(newIframe, info.nextSibling);\n                } else {\n                    info.parent.appendChild(newIframe);\n                }\n            });\n            removedIframes = [];\n        }\n    }\n\n\n    /**\n     * Multilang button handler\n     *\n     * @param {Event} e Event\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        if (key === null) {\n            Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n        } else {\n            let source = domQuery(Selectors.sourcetexts.keys, key);\n            let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n            source.classList.toggle(\"show\");\n            multilang.classList.toggle(\"show\");\n        }\n    };\n\n    /**\n     * @returns void\n     */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        // Prepare the UI for the save process.\n        saveAllBtn.disabled = true;\n        launchModal({\n            title: langstrings.uistrings.saveallmodaltitle,\n            body: langstrings.uistrings.saveallmodalbody,\n        }).then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n            Log.error(reason);\n        });\n        // Prepare the data to be saved.\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n    /**\n     * Saving a single translation to DB.\n     * @param {Event} e\n     */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n    /**\n     *\n     * @param {string} key\n     * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n     */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n            cmid: element.getAttribute(\"data-cmid\"),\n        };\n    };\n    /**\n     * Listener for individual source change.\n     * @todo MDL-000 implement in v1.4.0\n     *\n     * @param {event} e\n     */\n    const onSourceChange = (e) => {\n        // Do check source and target and propose rephrase if PRO.\n        Log.info('source changed');\n        Log.info(e.target.getAttribute('data-key'));\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     */\n    const onItemChecked = (e) => {\n        // Check/uncheck checkboxes changes the charcount and icon status.\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n            countWordAndChar();\n        }\n    };\n\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        const checked = e.target.checked;\n        const updates = [];\n\n        // Prepare all updates without applying immediately.\n        checkboxes.forEach(checkbox => {\n            const shouldCheck = checked ? !getParentRow(checkbox).classList.contains('d-none') : false;\n\n            if (checkbox.checked !== shouldCheck) {\n                updates.push({checkbox, shouldCheck});\n            }\n        });\n\n        // Apply updates in the next animation frame, batching DOM writes.\n        requestAnimationFrame(() => {\n            updates.forEach(({checkbox, shouldCheck}) => {\n                checkbox.checked = shouldCheck;\n                toggleStatus(checkbox.getAttribute('data-key'), shouldCheck);\n            });\n\n            toggleAutotranslateButton();\n            countWordAndChar();\n        });\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        // Use Array.some() for early exit when a checked checkbox is found\n        autotranslateButton.disabled = !Array.from(checkboxes).some(e => e.checked);\n    };\n    /**\n     * Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body, type = 'default') => {\n        Modal.create({\n            title: title,\n            body: body,\n            type: type,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n    /**\n     * Event Listener when DeepL API call failed.\n     * @param {string} error\n     */\n    const onTranslationFailed = (error) => {\n        let s = langstrings.uistrings.deeplapiexception;\n        onTranslationDone();\n        showModal(s, error, 'Alert');\n    };\n    /**\n     * Event Listener when DeepL API call finished.\n     */\n    const onTranslationDone = () => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n    };\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch deepl services.\n     */\n    const callDeeplServices = () => {\n        saveAllModal = launchModal(\n            {\n                title: langstrings.uistrings.translatemodaltitle,\n                body: langstrings.uistrings.translatemodalbody,\n            }\n        );\n        const keys = [];\n        const [cookie, settings] = prepareSettingsAndCookieValues();\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                const key = ckBox.getAttribute(\"data-key\");\n                const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                const editor = findEditor(key);\n                Translation.initTempForKey(\n                    key, editor,\n                    sourceText.getAttribute(\"data-sourcetext-raw\"),\n                    sourceText.getAttribute(\"data-filedtext-raw\"),\n                    domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                );\n                keys.push(key);\n            });\n        const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n        Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), config.cookieduration);\n        Translation.callTranslations(keys, config, settings);\n    };\n    /**\n     * Parse the advanced settings UI and map the values for cookies and Deepl.\n     *\n     * @returns {[{},{}]}\n     */\n    const prepareSettingsAndCookieValues = () => {\n        let settings = {};\n        let cookie = {};\n        for (const selector in settingsUI) {\n            if (settingsUI[selector] === null) {\n                Log.warn(`prepareSettingsAndCookieValues. Could not find selector ${selector}`);\n                Log.warn(settingsUI);\n            } else {\n                switch (settingsUI[selector].type) {\n                    case 'select-one':\n                        cookie[selector] = settingsUI[selector].value;\n                        settings[selector] = settingsUI[selector].value;\n                        break;\n                    case 'textarea':\n                        cookie[selector] = settingsUI[selector].value;\n                        // Deepl needs an array.\n                        settings[selector] = Utils.toJsonArray(cookie[selector]);\n                        break;\n                    case 'checkbox':\n                        if (selector === Selectors.deepl.tagHandling) {\n                            cookie[selector] = settingsUI[selector].checked;\n                            // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                            settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                        } else {\n                            settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                        }\n                        break;\n                    case 'radio':\n                        settings[selector] = cookie[selector] = queryRadioValue(selector);\n                        break;\n                    default: // Text.\n                        settings[selector] = cookie[selector] = settingsUI[selector].value;\n                        break;\n                }\n            }\n        }\n        return [cookie, settings];\n    };\n    /**\n     * Factory to display process' statuses for each item.\n     *\n     * @param {String} key\n     * @param {Boolean} checked\n     */\n    const toggleStatus = (key, checked) => {\n        const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n        switch (status) {\n            case Selectors.statuses.wait :\n                Translation.initTemp(key); // Reset the translation.\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.totranslate :\n                if (checked && Translation.translated[key]) {\n                    setIconStatus(key, Selectors.statuses.tosave, true);\n                } else {\n                    setIconStatus(key, Selectors.statuses.wait);\n                }\n                break;\n            case Selectors.statuses.tosave :\n                if (!checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.failed :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.success :\n                break;\n            case Selectors.statuses.saved :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                Translation.initTemp(key);\n                break;\n        }\n    };\n    /**\n     * Shows/hides rows.\n     */\n    const showRows = () => {\n        // Map each selector to its corresponding checkbox checked state\n        const selectorMap = {\n            [Selectors.statuses.updated]: domQuery(Selectors.actions.showUpdated).checked,\n            [Selectors.statuses.needsupdate]: domQuery(Selectors.actions.showNeedUpdate).checked,\n            [Selectors.statuses.hidden]: domQuery(Selectors.actions.showHidden).checked\n        };\n\n        // Combine all selectors into one comma-separated string for batch querying.\n        const mergedSelector = Object.keys(selectorMap).join(\",\");\n\n        // Query all items matching any of the selectors once.\n        const allItems = domQueryAll(mergedSelector);\n\n        // Cache the global \"select all\" button checked state once.\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n\n        allItems.forEach(item => {\n            // Determine which selector this item matches so we can apply the right checkbox state.\n            let shouldShow = false;\n            let shouldCheck = false;\n            for (const [selector, checked] of Object.entries(selectorMap)) {\n                if (item.matches(selector)) {\n                    shouldShow = checked;\n                    shouldCheck = allSelected && checked;\n                    break;\n                }\n            }\n\n            // Show or hide item based on checkbox state.\n            item.classList.toggle(\"d-none\", !shouldShow);\n\n            // Handle checkbox selection for this item or its children.\n            let rowId = item.getAttribute('data-row-id');\n            if (rowId === null) {\n                // For items without row-id, toggle checkboxes of their child rows.\n                const childs = domQueryAll(Selectors.statuses.hiddenForStudentRows, '', item);\n                childs.forEach(child => {\n                    const childId = child.getAttribute('data-row-id');\n                    toggleChildCheckBoxSelection(childId, shouldCheck);\n                });\n            } else {\n                toggleChildCheckBoxSelection(rowId, shouldCheck);\n            }\n        });\n\n        // Call global UI update functions once\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Manages selection and icon status of fields.\n     *\n     * @param {string} key\n     * @param {bool} shouldBeChecked\n     */\n    const toggleChildCheckBoxSelection = (key, shouldBeChecked)=>{\n        const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, key);\n        single.checked = shouldBeChecked;\n        toggleStatus(key, false);\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {string} key\n     * @param {string} error\n     */\n    const onErrorMessageItem = (key, error) => {\n        Log.warn(`ui/errorMessageItem`);\n        Log.warn(key);\n        Log.warn(error);\n        const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        // Display granular error messages.\n        const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n        if (indexOfSET === -1) {\n            showErrorMessageForEditor(key, error);\n        } else {\n            let s = langstrings.uistrings.errortoolong;\n            showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n        }\n    };\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {string} savedText\n     */\n    const onSuccessMessageItem = (key, savedText) => {\n        domQuery(Selectors.editors.multiples.editorsWithKey, key)\n            .classList.add(\"local_deepler__success\");\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.success);\n        // Replace text in the multilang textarea.\n        const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n        multilangTextarea.innerHTML = savedText;\n        // Deselect the checkbox.\n        domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n        // Remove success message after a few seconds.\n        setTimeout(() => {\n            let multilangPill = domQuery(Selectors.statuses.multilang, key);\n            let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n    /**/\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     */\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to filter sections.\n     * @param {Event} e\n     */\n    const switchSection = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"section_id\", e.target.value.trim());\n        if (searchParams.has(\"activity_id\")) {\n            searchParams.delete(\"activity_id\");\n        }\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to filter modules.\n     * @param {Event} e\n     */\n    const switchModules = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"activity_id\", e.target.value.trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0,\n        cws = 0,\n        cwos = 0;\n\n        // Cache checkboxes matching selector once, convert to array if needed.\n        const checkedBoxes = Array.from(domQueryAll(Selectors.statuses.checkedCheckBoxes));\n\n        // Aggregate counts in one loop.\n        checkedBoxes.forEach(ckBox => {\n            const key = ckBox.getAttribute(\"data-key\");\n            const results = getCount(key);\n            wrdsc += results.wordCount;\n            cws += results.charNumWithSpace;\n            cwos += results.charNumWithOutSpace;\n        });\n\n        // Cache DOM elements once for output instead of querying repeatedly.\n        const wordCount = cachedSelectors.wordCount;\n        const charWithSpace = cachedSelectors.charWithSpace;\n        const charWOSpace = cachedSelectors.charWOSpace;\n        const deeplUseSpan = cachedSelectors.deeplUseSpan;\n        const deeplMaxSpan = cachedSelectors.deeplMaxSpan;\n        const parent = cachedSelectors.deeplStatusContainer;\n\n        // Calculate current usage once.\n        const current = cws + config.usage.character.count;\n\n        // Update UI in one batch (minimizes layout thrashing).\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n\n        // Toggle classes efficiently.\n        parent.classList.toggle('alert-success', current < config.usage.character.limit || config.usage.character.limit === null);\n        parent.classList.toggle('alert-danger', current >= config.usage.character.limit && config.usage.character.limit !== null);\n    };\n    /**\n     * Get the editor container based on recieved current user's editor preference.\n     *\n     * @param {string} key Translation Key\n     */\n    const findEditor = (key) => {\n        let e = domQuery(Selectors.editors.types.basic, key);\n        let et = 'basic';\n        if (e === null) {\n            let r = null;\n            let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n            if (editorTab.indexOf(config.userPrefs) === -1) {\n                Log.warn('Unsupported editor ' + config.userPrefs);\n            } else {\n                // First let's try the current editor.\n                try {\n                    r = findEditorByType(key, config.userPrefs);\n                } catch (error) {\n                    // Content was edited by another editor.\n                    Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                }\n            }\n            return r;\n        } else {\n            return {editor: e, editorType: et};\n        }\n    };\n    /**\n     * @param {string} key\n     * @param {object} editorType\n     * @returns {{editor: object, editorType: string}}\n     */\n    const findEditorByType = (key, editorType) => {\n        let et = 'basic';\n        let ed = null;\n        switch (editorType) {\n            case \"atto\" :\n                et = 'iframe';\n                ed = domQuery(Selectors.editors.types.atto, key);\n                break;\n            case \"tiny\":\n                et = 'iframe';\n                ed = findTinyInstanceByKey(key);\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                ed = domQuery(Selectors.editors.types.other, key);\n                break;\n        }\n        return {editor: ed, editorType: et};\n    };\n    /**\n     * Finds TinyMCE instance.\n     * @param {string} key\n     * @returns {Node}\n     */\n    const findTinyInstanceByKey = (key)=> {\n        let editor = null;\n        TinyMCE.getAllInstances().every((k, v)=>{\n            if (v.attributes.name.value.indexOf(key) == 0) {\n                editor = k.getBody();\n                return false;\n            }\n            return true;\n        });\n        return editor;\n    };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Wrapper for radios value.\n     *\n     * @param {string} selector\n     * @returns {*}\n     */\n    const queryRadioValue = (selector) => {\n        return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {NodeList}\n     */\n    const domQueryAll = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelectorAll(q);\n    };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n\n        ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n            {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100, crumbsmaxlen: cfg.crumbsmaxlen});\n        Translation.init(cfg);\n        config = cfg;\n        Log.info(cfg);\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        doHideiframes(hideiframes.checked);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        debouncedShowRows();\n    };\n    /**\n     * Api to be used by the other modules.\n     */\n    return {\n        init: init\n    };\n});\n"],"names":["define","Log","TinyMCEinit","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","Api","debouncedShowRows","fn","delay","timer","args","clearTimeout","setTimeout","debounce","showRows","cachedSelectors","wordCount","document","querySelector","statuses","wordcount","charWithSpace","charNumWithSpace","charWOSpace","charNumWithOutSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","glossaryDetailViewr","filterTimeout","hideiframes","removedIframes","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","allDataFormatOne","onDBFailed","error","status","isVisible","hide","showModal","onDbSavedSuccess","errors","length","s","uistrings","errordbpartial","replace","showEntriesModal","ajaxResponse","glossaryid","entries","JSON","parse","message","table","createElement","className","thead","innerHTML","source","toUpperCase","target","appendChild","tbody","Object","forEach","_ref","key","value","row","create","title","body","type","show","removeOnClose","onGlossaryDbAllfailed","obj","info","onGlossaryDbfailed","onGlossaryDbSuccess","resizeEditors","editable","id","selector","parent","domQuery","grandparent","parentElement","resizeObserver","ResizeObserver","totalHeight","offsetHeight","style","height","updateEditableHeight","observe","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","undefined","setOptionFromCookie","checked","deepl","glossaryId","optionToSelect","selected","launchModal","async","messageObject","handleFocusEvent","e","closest","editors","targetarea","getIconStatus","tosave","options","subdirs","maxbytes","maxfiles","noclean","trusttext","enable_filemanagement","autosave","removeorphaneddrafts","plugins","getTinyMCE","then","setupForTarget","catch","r","handleClickEvent","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","glossary","entriesviewerPage","getGlossariesEntries","handleChangeEvent","doHideiframes","targetSwitcher","switchTarget","sectionSwitcher","switchSection","moduleSwitcher","switchModules","sourceSwitcher","switchSource","showUpdated","showNeedUpdate","showHidden","onItemChecked","sourceselect","onSourceChange","display","isChecked","allIframes","domQueryAll","sourcetexts","iframes","iframe","push","parentNode","nextSibling","html","outerHTML","remove","tempDiv","newIframe","firstChild","insertBefore","keyid","getAttribute","keyidToKey","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","checkedCheckBoxes","disabled","saveallmodaltitle","saveallmodalbody","reason","data","Array","from","map","dataset","hideErrorMessage","prepareDBitem","keyValidator","element","multiples","editorsWithKey","courseid","parseInt","tid","field","cmid","toggleStatus","countWordAndChar","updates","checkbox","shouldCheck","getParentRow","contains","requestAnimationFrame","_ref2","some","validatorBtn","setIconStatus","wait","isBtn","icon","add","setAttribute","statusstrings","node","replaceKey","parentrow","onTranslationFailed","deeplapiexception","onTranslationDone","onItemTranslated","translatemodaltitle","translatemodalbody","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","cookieduration","callTranslations","warn","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","selectorMap","updated","needsupdate","hidden","mergedSelector","join","allItems","allSelected","item","shouldShow","matches","rowId","hiddenForStudentRows","child","childId","toggleChildCheckBoxSelection","shouldBeChecked","checkBoxesWithKey","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","multilangPill","prevTransStatus","errorMsg","url","URL","window","location","href","searchParams","set","rephrasesymbol","trim","toString","has","delete","wrdsc","cws","cwos","results","getCount","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","k","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","crumbsmaxlen","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_TRANSLATION_DONE","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","GLOSSARY_DB_ALL_FAILED","GLOSSARY_DB_FAILED","GLOSSARY_DB_SUCCESS","GLOSSARY_ENTRIES_SUCCESS","GLOSSARY_ENTRIES_FAILED","isTranslatable"],"mappings":"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"}