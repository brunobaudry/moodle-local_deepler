{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n    'editor_tiny/loader',\n    'editor_tiny/editor',\n    'core/modal',\n    './selectors',\n    './translation',\n    './utils',\n    './customevents',\n    './scrollspy',\n    './api'\n], (Log, TinyMCEinit, TinyMCE,\n    Modal,\n    Selectors,\n    Translation,\n    Utils,\n    Events,\n    ScrollSpy,\n    Api) => {\n    let hideiframes = {};\n    // Store removed iframes and their parent/next sibling for restoration.\n    let removedIframes = [];\n\n    let config = {};\n    let langstrings = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n    let settingsUI = {};\n    let allDataFormatOne = [];\n    let glossaryDetailViewr;\n    let filterTimeout;\n    /**\n     * When a main error with the DB occurs.\n     *\n     * @param {string} error\n     * @param {int} status\n     */\n    const onDBFailed = (error, status) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n    };\n    /**\n     *\n     * @param {array} errors\n     */\n    const onDbSavedSuccess = (errors) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        if (errors.length > 0) {\n            let s = langstrings.uistrings.errordbpartial;\n            s = s.replace('{$a}', errors.length);\n            showModal(errordbtitle, s, 'Alert');\n        }\n    };\n\n\n    // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n        document.addEventListener('focusin', handleFocusEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_TRANSLATION_DONE, onTranslationDone);\n        Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n        Events.on(Translation.ON_DB_FAILED, onDBFailed);\n        Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n        Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        Events.on(Api.GLOSSARY_DB_ALL_FAILED, onGlossaryDbAllfailed);\n        Events.on(Api.GLOSSARY_DB_FAILED, onGlossaryDbfailed);\n        Events.on(Api.GLOSSARY_DB_SUCCESS, onGlossaryDbSuccess);\n        Events.on(Api.GLOSSARY_ENTRIES_SUCCESS, showEntriesModal);\n        Events.on(Api.GLOSSARY_ENTRIES_FAILED, (e)=>Log.error(e));\n    };\n    const showEntriesModal = (ajaxResponse)=>{\n        const glossaryid = ajaxResponse.glossaryid;\n        const entries = JSON.parse(ajaxResponse.entries);\n        const status = ajaxResponse.status;\n        const message = ajaxResponse.message;\n        if (status === 'success') {\n            const table = document.createElement('table');\n            table.className = 'generaltable';\n            // Create the header.\n            const thead = document.createElement('thead');\n            thead.innerHTML = `<tr><th>${ajaxResponse.source.toUpperCase()}</th>\n                <th>${ajaxResponse.target.toUpperCase()}</th></tr>`;\n            table.appendChild(thead);\n\n            const tbody = document.createElement('tbody');\n\n            Object.entries(entries).forEach(([key, value]) => {\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${key}</td><td>${value}</td>`;\n                tbody.appendChild(row);\n            });\n\n            table.appendChild(tbody);\n\n            Modal.create({\n                title: 'Entries',\n                body: table,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        } else {\n            Modal.create({\n                title: `Error fetching entries for<br/><em>${glossaryid}</em>`,\n                body: message,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        }\n    };\n    const onGlossaryDbAllfailed = (obj)=> {\n        Log.info('onGlossaryDbAllfailed');\n        Log.error(obj);\n    };\n\n    const onGlossaryDbfailed = (obj)=> {\n        Log.info('onGlossaryDbfailed');\n        Log.error(obj);\n    };\n\n    const onGlossaryDbSuccess = (obj)=> {\n        Log.info('onGlossaryDbSuccess');\n        Log.info(obj);\n    };\n    const resizeEditors = ()=>{\n\n        allDataFormatOne.forEach((editable)=>{\n            const key = editable.id.replace('tiny_', '');\n            const selector = `[data-sourcetext-key=\"${key}\"]`;\n            let parent = domQuery(selector);\n            const grandparent = parent.parentElement;\n\n            const updateEditableHeight = ()=> {\n                const totalHeight = grandparent.offsetHeight + 80; // Tiny header average height is 80.\n                editable.style.height = totalHeight + 'px';\n            };\n\n            // Observe size changes in parent and grandparent.\n            const resizeObserver = new ResizeObserver(() => {\n                updateEditableHeight();\n            });\n\n            resizeObserver.observe(parent);\n            resizeObserver.observe(grandparent);\n\n        });\n    };\n    /**\n     * Register UI elements.\n     */\n    const registerUI = () => {\n\n        try {\n            allDataFormatOne = domQueryAll(Selectors.editors.targetarea);\n            hideiframes = domQuery(Selectors.actions.hideiframes);\n            langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n            errordbtitle = langstrings.uistrings.errordbtitle;\n            saveAllBtn = domQuery(Selectors.actions.saveAll);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n            glossaryDetailViewr = domQuery(Selectors.glossary.entriesviewerPage);\n            settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n            settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n            settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n            settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n            settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n            settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n            settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n            settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n            settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n            settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n            settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n            if (!config.isfree) {\n                settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n            }\n            settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n            settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n            fetchCookies();\n            resizeEditors();\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    /**\n     * Get the stored settings for this course and lang pair.\n     */\n    const fetchCookies = () => {\n        if (!config.targetlang) {\n            return;\n        }\n        const glossaryCookie = Utils.getCookie(config);\n        const newCookie = Utils.getEncodedCookie(config);\n        if (newCookie !== null) {\n            const settingsCookie = JSON.parse(newCookie);\n            for (const selector in settingsUI) {\n                if (settingsCookie[selector] !== undefined) {\n                    switch (settingsUI[selector].type) {\n                        case 'select-one' :\n                            setOptionFromCookie(settingsCookie[selector]);\n                            break;\n                        case 'checkbox' :\n                            settingsUI[selector].checked = settingsCookie[selector];\n                            break;\n                        case 'radio' :\n                            domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                            break;\n                        default:\n                            settingsUI[selector].value = settingsCookie[selector];\n                            break;\n                    }\n\n                }\n            }\n        }\n        if (glossaryCookie !== null) {\n            // Legacy cookie.\n            settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n        }\n    };\n    /**\n     * Selects a dd based on its value.\n     * @param {string} value\n     */\n    const setOptionFromCookie = (value)=>{\n        let optionToSelect = domQuery(`option[value=\"${value}\"]`);\n        if (optionToSelect) {\n            optionToSelect.selected = true;\n        }\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @param {object} messageObject\n     * @returns {Promise<void>}\n     */\n    const launchModal = async(messageObject) => {\n        saveAllModal = await Modal.create(messageObject);\n        await saveAllModal.show();\n    };\n    const handleFocusEvent = (e)=>{\n        if (e.target.closest(Selectors.editors.targetarea)) {\n            if (getIconStatus(e.target.id.replace('tiny_', '')) === Selectors.statuses.tosave) {\n                const options = {\n                    subdirs: false,\n                    maxbytes: 10240,\n                    maxfiles: 0,\n                    noclean: true,\n                    trusttext: true,\n                    // eslint-disable-next-line camelcase\n                    enable_filemanagement: false,\n                    autosave: false,\n                    removeorphaneddrafts: true,\n                    plugins: []\n                };\n                // eslint-disable-next-line promise/catch-or-return\n                TinyMCEinit.getTinyMCE().then(\n                    // eslint-disable-next-line promise/always-return\n                    ()=>{\n                        // eslint-disable-next-line promise/no-nesting\n                        TinyMCE.setupForTarget(e.target, options)\n                            // eslint-disable-next-line promise/always-return\n                            .then(()=>{\n                                Log.info('tiny loaded for ' + e.target.id);\n                            })\n                            .catch((r)=>{\n                                Log.error(r);\n                            });\n                    }\n                );\n            }\n\n        }\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                showModal('Cannot call deepl', `<p>${langstrings.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n            } else {\n                callDeeplServices();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n        if (e.target.closest(Selectors.glossary.entriesviewerPage)) {\n            Log.info('CLICK');\n            Log.info(settingsUI[Selectors.deepl.glossaryId].value);\n            Api.getGlossariesEntries(\n                settingsUI[Selectors.deepl.glossaryId].value,\n                config.deeplsourcelang,\n                config.targetlang\n            );\n        }\n    };\n    /**\n     * Event listener for change events.\n     * @param {event} e\n     */\n    const handleChangeEvent = (e) => {\n\n        if (e.target.closest(Selectors.actions.hideiframes)) {\n            doHideiframes(hideiframes.checked);\n        }\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sectionSwitcher)) {\n            switchSection(e);\n        }\n        if (e.target.closest(Selectors.actions.moduleSwitcher)) {\n            switchModules(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        clearTimeout(filterTimeout);\n        filterTimeout = setTimeout(() => {\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                showRows();\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                showRows();\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                showRows();\n            }\n        }, 30);\n        /* If (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showHidden)) {\n            showRows(Selectors.statuses.hidden, e.target.checked);\n        }*/\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceselect)) {\n            onSourceChange(e);\n        }\n        if (e.target.closest(Selectors.deepl.glossaryId)) {\n            if (settingsUI[Selectors.deepl.glossaryId].value !== '') {\n                glossaryDetailViewr.style.display = 'block';\n            } else {\n                glossaryDetailViewr.style.display = 'none';\n            }\n        }\n    };\n    /**\n     * Toggle iFrames in sourcetexts.\n     * @param {boolean} isChecked\n     */\n    function doHideiframes(isChecked) {\n        const allIframes = domQueryAll(Selectors.sourcetexts.iframes);\n        if (!isChecked && allIframes.length > 0) {\n            removedIframes = [];\n            allIframes.forEach(iframe => {\n                removedIframes.push({\n                    parent: iframe.parentNode,\n                    nextSibling: iframe.nextSibling,\n                    html: iframe.outerHTML\n                });\n                iframe.remove();\n            });\n        } else if (removedIframes.length > 0) {\n            // Restore all previously removed iframes.\n            removedIframes.forEach(info => {\n                // Create a new element from the stored HTML.\n                const tempDiv = document.createElement('div');\n                tempDiv.innerHTML = info.html;\n                const newIframe = tempDiv.firstChild;\n                // Insert it back into the DOM\n                if (info.nextSibling) {\n                    info.parent.insertBefore(newIframe, info.nextSibling);\n                } else {\n                    info.parent.appendChild(newIframe);\n                }\n            });\n            removedIframes = [];\n        }\n    }\n\n\n    /**\n     * Multilang button handler\n     *\n     * @param {Event} e Event\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        if (key === null) {\n            Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n        } else {\n            let source = domQuery(Selectors.sourcetexts.keys, key);\n            let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n            source.classList.toggle(\"show\");\n            multilang.classList.toggle(\"show\");\n        }\n    };\n\n    /**\n     * @returns void\n     */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        // Prepare the UI for the save process.\n        saveAllBtn.disabled = true;\n        launchModal({\n            title: langstrings.uistrings.saveallmodaltitle,\n            body: langstrings.uistrings.saveallmodalbody,\n        }).then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n            Log.error(reason);\n        });\n        // Prepare the data to be saved.\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n    /**\n     * Saving a single translation to DB.\n     * @param {Event} e\n     */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n    /**\n     *\n     * @param {string} key\n     * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n     */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n            cmid: element.getAttribute(\"data-cmid\"),\n        };\n    };\n    /**\n     * Listener for individual source change.\n     * @todo MDL-000 implement in v1.4.0\n     *\n     * @param {event} e\n     */\n    const onSourceChange = (e) => {\n        // Do check source and target and propose rephrase if PRO.\n        Log.info('source changed');\n        Log.info(e.target.getAttribute('data-key'));\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     */\n    const onItemChecked = (e) => {\n        // Check/uncheck checkboxes changes the charcount and icon status.\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n            countWordAndChar();\n        }\n    };\n\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        const checked = e.target.checked;\n        const updates = [];\n\n        // Prepare all updates without applying immediately.\n        checkboxes.forEach(checkbox => {\n            const shouldCheck = checked ? !getParentRow(checkbox).classList.contains('d-none') : false;\n\n            if (checkbox.checked !== shouldCheck) {\n                updates.push({checkbox, shouldCheck});\n            }\n        });\n\n        // Apply updates in the next animation frame, batching DOM writes.\n        requestAnimationFrame(() => {\n            updates.forEach(({checkbox, shouldCheck}) => {\n                checkbox.checked = shouldCheck;\n                toggleStatus(checkbox.getAttribute('data-key'), shouldCheck);\n            });\n\n            toggleAutotranslateButton();\n            countWordAndChar();\n        });\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        // Use Array.some() for early exit when a checked checkbox is found\n        autotranslateButton.disabled = !Array.from(checkboxes).some(e => e.checked);\n    };\n    /**\n     * Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body, type = 'default') => {\n        Modal.create({\n            title: title,\n            body: body,\n            type: type,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n    /**\n     * Event Listener when DeepL API call failed.\n     * @param {string} error\n     */\n    const onTranslationFailed = (error) => {\n        let s = langstrings.uistrings.deeplapiexception;\n        onTranslationDone();\n        showModal(s, error, 'Alert');\n    };\n    /**\n     * Event Listener when DeepL API call finished.\n     */\n    const onTranslationDone = () => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n    };\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch deepl services.\n     */\n    const callDeeplServices = () => {\n        saveAllModal = launchModal(\n            {\n                title: langstrings.uistrings.translatemodaltitle,\n                body: langstrings.uistrings.translatemodalbody,\n            }\n        );\n        const keys = [];\n        const [cookie, settings] = prepareSettingsAndCookieValues();\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                const key = ckBox.getAttribute(\"data-key\");\n                const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                const editor = findEditor(key);\n                Translation.initTempForKey(\n                    key, editor,\n                    sourceText.getAttribute(\"data-sourcetext-raw\"),\n                    sourceText.getAttribute(\"data-filedtext-raw\"),\n                    domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                );\n                keys.push(key);\n            });\n        const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n        Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), config.cookieduration);\n        Translation.callTranslations(keys, config, settings);\n    };\n    /**\n     * Parse the advanced settings UI and map the values for cookies and Deepl.\n     *\n     * @returns {[{},{}]}\n     */\n    const prepareSettingsAndCookieValues = () => {\n        let settings = {};\n        let cookie = {};\n        for (const selector in settingsUI) {\n            if (settingsUI[selector] === null) {\n                Log.warn(`prepareSettingsAndCookieValues. Could not find selector ${selector}`);\n                Log.warn(settingsUI);\n            } else {\n                switch (settingsUI[selector].type) {\n                    case 'select-one':\n                        cookie[selector] = settingsUI[selector].value;\n                        settings[selector] = settingsUI[selector].value;\n                        break;\n                    case 'textarea':\n                        cookie[selector] = settingsUI[selector].value;\n                        // Deepl needs an array.\n                        settings[selector] = Utils.toJsonArray(cookie[selector]);\n                        break;\n                    case 'checkbox':\n                        if (selector === Selectors.deepl.tagHandling) {\n                            cookie[selector] = settingsUI[selector].checked;\n                            // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                            settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                        } else {\n                            settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                        }\n                        break;\n                    case 'radio':\n                        settings[selector] = cookie[selector] = queryRadioValue(selector);\n                        break;\n                    default: // Text.\n                        settings[selector] = cookie[selector] = settingsUI[selector].value;\n                        break;\n                }\n            }\n        }\n        return [cookie, settings];\n    };\n    /**\n     * Factory to display process' statuses for each item.\n     *\n     * @param {String} key\n     * @param {Boolean} checked\n     */\n    const toggleStatus = (key, checked) => {\n        const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n        switch (status) {\n            case Selectors.statuses.wait :\n                Translation.initTemp(key); // Reset the translation.\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.totranslate :\n                if (checked && Translation.translated[key]) {\n                    setIconStatus(key, Selectors.statuses.tosave, true);\n                } else {\n                    setIconStatus(key, Selectors.statuses.wait);\n                }\n                break;\n            case Selectors.statuses.tosave :\n                if (!checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.failed :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.success :\n                break;\n            case Selectors.statuses.saved :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                Translation.initTemp(key);\n                break;\n        }\n    };\n    /**\n     * Shows/hides rows.\n     */\n    const showRows = () => {\n        // Map each selector to its corresponding checkbox checked state\n        const selectorMap = {\n            [Selectors.statuses.updated]: domQuery(Selectors.actions.showUpdated).checked,\n            [Selectors.statuses.needsupdate]: domQuery(Selectors.actions.showNeedUpdate).checked,\n            [Selectors.statuses.hidden]: domQuery(Selectors.actions.showHidden).checked\n        };\n\n        // Combine all selectors into one comma-separated string for batch querying.\n        const mergedSelector = Object.keys(selectorMap).join(\",\");\n\n        // Query all items matching any of the selectors once.\n        const allItems = domQueryAll(mergedSelector);\n\n        // Cache the global \"select all\" button checked state once.\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n\n        allItems.forEach(item => {\n            // Determine which selector this item matches so we can apply the right checkbox state.\n            let shouldShow = false;\n            let shouldCheck = false;\n            for (const [selector, checked] of Object.entries(selectorMap)) {\n                if (item.matches(selector)) {\n                    shouldShow = checked;\n                    shouldCheck = allSelected && checked;\n                    break;\n                }\n            }\n\n            // Show or hide item based on checkbox state.\n            item.classList.toggle(\"d-none\", !shouldShow);\n\n            // Handle checkbox selection for this item or its children.\n            let rowId = item.getAttribute('data-row-id');\n            if (rowId === null) {\n                // For items without row-id, toggle checkboxes of their child rows.\n                const childs = domQueryAll(Selectors.statuses.hiddenForStudentRows, '', item);\n                childs.forEach(child => {\n                    const childId = child.getAttribute('data-row-id');\n                    toggleChildCheckBoxSelection(childId, shouldCheck);\n                });\n            } else {\n                toggleChildCheckBoxSelection(rowId, shouldCheck);\n            }\n        });\n\n        // Call global UI update functions once\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Manages selection and icon status of fields.\n     *\n     * @param {string} key\n     * @param {bool} shouldBeChecked\n     */\n    const toggleChildCheckBoxSelection = (key, shouldBeChecked)=>{\n        const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, key);\n        single.checked = shouldBeChecked;\n        toggleStatus(key, false);\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {string} key\n     * @param {string} error\n     */\n    const onErrorMessageItem = (key, error) => {\n        Log.warn(`ui/errorMessageItem`);\n        Log.warn(key);\n        Log.warn(error);\n        const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        // Display granular error messages.\n        const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n        if (indexOfSET === -1) {\n            showErrorMessageForEditor(key, error);\n        } else {\n            let s = langstrings.uistrings.errortoolong;\n            showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n        }\n    };\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {string} savedText\n     */\n    const onSuccessMessageItem = (key, savedText) => {\n        domQuery(Selectors.editors.multiples.editorsWithKey, key)\n            .classList.add(\"local_deepler__success\");\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.success);\n        // Replace text in the multilang textarea.\n        const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n        multilangTextarea.innerHTML = savedText;\n        // Deselect the checkbox.\n        domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n        // Remove success message after a few seconds.\n        setTimeout(() => {\n            let multilangPill = domQuery(Selectors.statuses.multilang, key);\n            let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n    /**/\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     */\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to filter sections.\n     * @param {Event} e\n     */\n    const switchSection = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"section_id\", e.target.value.trim());\n        if (searchParams.has(\"activity_id\")) {\n            searchParams.delete(\"activity_id\");\n        }\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to filter modules.\n     * @param {Event} e\n     */\n    const switchModules = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"activity_id\", e.target.value.trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0,\n        cws = 0,\n        cwos = 0;\n\n        // Cache checkboxes matching selector once, convert to array if needed.\n        const checkedBoxes = Array.from(domQueryAll(Selectors.statuses.checkedCheckBoxes));\n\n        // Aggregate counts in one loop.\n        checkedBoxes.forEach(ckBox => {\n            const key = ckBox.getAttribute(\"data-key\");\n            const results = getCount(key);\n            wrdsc += results.wordCount;\n            cws += results.charNumWithSpace;\n            cwos += results.charNumWithOutSpace;\n        });\n\n        // Cache DOM elements once for output instead of querying repeatedly.\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n\n        // Calculate current usage once.\n        const current = cws + config.usage.character.count;\n\n        // Update UI in one batch (minimizes layout thrashing).\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n\n        // Toggle classes efficiently.\n        parent.classList.toggle('alert-success', current < config.usage.character.limit || config.usage.character.limit === null);\n        parent.classList.toggle('alert-danger', current >= config.usage.character.limit && config.usage.character.limit !== null);\n    };\n    /**\n     * Get the editor container based on recieved current user's editor preference.\n     *\n     * @param {string} key Translation Key\n     */\n    const findEditor = (key) => {\n        let e = domQuery(Selectors.editors.types.basic, key);\n        let et = 'basic';\n        if (e === null) {\n            let r = null;\n            let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n            if (editorTab.indexOf(config.userPrefs) === -1) {\n                Log.warn('Unsupported editor ' + config.userPrefs);\n            } else {\n                // First let's try the current editor.\n                try {\n                    r = findEditorByType(key, config.userPrefs);\n                } catch (error) {\n                    // Content was edited by another editor.\n                    Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                }\n            }\n            return r;\n        } else {\n            return {editor: e, editorType: et};\n        }\n    };\n    /**\n     * @param {string} key\n     * @param {object} editorType\n     * @returns {{editor: object, editorType: string}}\n     */\n    const findEditorByType = (key, editorType) => {\n        let et = 'basic';\n        let ed = null;\n        switch (editorType) {\n            case \"atto\" :\n                et = 'iframe';\n                ed = domQuery(Selectors.editors.types.atto, key);\n                break;\n            case \"tiny\":\n                et = 'iframe';\n                ed = findTinyInstanceByKey(key);\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                ed = domQuery(Selectors.editors.types.other, key);\n                break;\n        }\n        return {editor: ed, editorType: et};\n    };\n    /**\n     * Finds TinyMCE instance.\n     * @param {string} key\n     * @returns {Node}\n     */\n    const findTinyInstanceByKey = (key)=> {\n        let editor = null;\n        TinyMCE.getAllInstances().every((k, v)=>{\n            if (v.attributes.name.value.indexOf(key) == 0) {\n                editor = k.getBody();\n                return false;\n            }\n            return true;\n        });\n        return editor;\n    };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Wrapper for radios value.\n     *\n     * @param {string} selector\n     * @returns {*}\n     */\n    const queryRadioValue = (selector) => {\n        return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {NodeList}\n     */\n    const domQueryAll = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelectorAll(q);\n    };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n\n        ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n            {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100, crumbsmaxlen: cfg.crumbsmaxlen});\n        Translation.init(cfg);\n        config = cfg;\n        Log.info(cfg);\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        doHideiframes(hideiframes.checked);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows();\n    };\n    /**\n     * Api to be used by the other modules.\n     */\n    return {\n        init: init\n    };\n});\n"],"names":["define","Log","TinyMCEinit","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","Api","glossaryDetailViewr","filterTimeout","hideiframes","removedIframes","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","allDataFormatOne","onDBFailed","error","status","isVisible","hide","showModal","onDbSavedSuccess","errors","length","s","uistrings","errordbpartial","replace","showEntriesModal","ajaxResponse","glossaryid","entries","JSON","parse","message","table","document","createElement","className","thead","innerHTML","source","toUpperCase","target","appendChild","tbody","Object","forEach","_ref","key","value","row","create","title","body","type","show","removeOnClose","onGlossaryDbAllfailed","obj","info","onGlossaryDbfailed","onGlossaryDbSuccess","resizeEditors","editable","id","selector","parent","domQuery","grandparent","parentElement","resizeObserver","ResizeObserver","totalHeight","offsetHeight","style","height","updateEditableHeight","observe","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","undefined","setOptionFromCookie","checked","deepl","glossaryId","optionToSelect","selected","launchModal","async","messageObject","handleFocusEvent","e","closest","editors","targetarea","getIconStatus","statuses","tosave","options","subdirs","maxbytes","maxfiles","noclean","trusttext","enable_filemanagement","autosave","removeorphaneddrafts","plugins","getTinyMCE","then","setupForTarget","catch","r","handleClickEvent","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","glossary","entriesviewerPage","getGlossariesEntries","handleChangeEvent","doHideiframes","targetSwitcher","switchTarget","sectionSwitcher","switchSection","moduleSwitcher","switchModules","sourceSwitcher","switchSource","clearTimeout","setTimeout","showUpdated","showRows","showNeedUpdate","showHidden","onItemChecked","sourceselect","onSourceChange","display","isChecked","allIframes","domQueryAll","sourcetexts","iframes","iframe","push","parentNode","nextSibling","html","outerHTML","remove","tempDiv","newIframe","firstChild","insertBefore","keyid","getAttribute","keyidToKey","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","checkedCheckBoxes","disabled","saveallmodaltitle","saveallmodalbody","reason","data","Array","from","map","dataset","hideErrorMessage","prepareDBitem","keyValidator","element","multiples","editorsWithKey","courseid","parseInt","tid","field","cmid","toggleStatus","countWordAndChar","updates","checkbox","shouldCheck","getParentRow","contains","requestAnimationFrame","_ref2","some","validatorBtn","setIconStatus","wait","isBtn","icon","add","setAttribute","statusstrings","node","replaceKey","parentrow","onTranslationFailed","deeplapiexception","onTranslationDone","onItemTranslated","translatemodaltitle","translatemodalbody","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","cookieduration","callTranslations","warn","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","selectorMap","updated","needsupdate","hidden","mergedSelector","join","allItems","allSelected","item","shouldShow","matches","rowId","hiddenForStudentRows","child","childId","toggleChildCheckBoxSelection","shouldBeChecked","checkBoxesWithKey","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","multilangPill","prevTransStatus","errorMsg","url","URL","window","location","href","searchParams","set","rephrasesymbol","trim","toString","has","delete","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithSpace","charNumWithOutSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","k","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","crumbsmaxlen","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_TRANSLATION_DONE","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","GLOSSARY_DB_ALL_FAILED","GLOSSARY_DB_FAILED","GLOSSARY_DB_SUCCESS","GLOSSARY_ENTRIES_SUCCESS","GLOSSARY_ENTRIES_FAILED","isTranslatable"],"mappings":"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"}