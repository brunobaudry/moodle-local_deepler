{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n    'editor_tiny/loader',\n    'editor_tiny/editor',\n    'core/modal',\n    './selectors',\n    './translation',\n    './utils',\n    './customevents',\n    './scrollspy',\n    './api'\n], (Log, TinyMCEinit, TinyMCE,\n    Modal,\n    Selectors,\n    Translation,\n    Utils,\n    Events,\n    ScrollSpy,\n    Api) => {\n    let hideiframes = {};\n    // Store removed iframes and their parent/next sibling for restoration.\n    let removedIframes = [];\n\n    let config = {};\n    let langstrings = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n    let settingsUI = {};\n    let allDataFormatOne = [];\n    let glossaryDetailViewr;\n    /**\n     * When a main error with the DB occurs.\n     *\n     * @param {string} error\n     * @param {int} status\n     */\n    const onDBFailed = (error, status) => {\n        showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n    };\n    /**\n     *\n     * @param {array} errors\n     */\n    const onDbSavedSuccess = (errors) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        if (errors.length > 0) {\n            let s = langstrings.uistrings.errordbpartial;\n            s = s.replace('{$a}', errors.length);\n            showModal(errordbtitle, s, 'Alert');\n        }\n    };\n\n\n    // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n        document.addEventListener('focusin', handleFocusEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n        Events.on(Translation.ON_DB_FAILED, onDBFailed);\n        Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n        Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        Events.on(Api.GLOSSARY_DB_ALL_FAILED, onGlossaryDbAllfailed);\n        Events.on(Api.GLOSSARY_DB_FAILED, onGlossaryDbfailed);\n        Events.on(Api.GLOSSARY_DB_SUCCESS, onGlossaryDbSuccess);\n        Events.on(Api.GLOSSARY_ENTRIES_SUCCESS, showEntriesModal);\n        Events.on(Api.GLOSSARY_ENTRIES_FAILED, (e)=>Log.error(e));\n    };\n    const showEntriesModal = (ajaxResponse)=>{\n        const glossaryid = ajaxResponse.glossaryid;\n        const entries = JSON.parse(ajaxResponse.entries);\n        const status = ajaxResponse.status;\n        const message = ajaxResponse.message;\n        if (status === 'success') {\n            const table = document.createElement('table');\n            table.className = 'generaltable';\n            // Create the header.\n            const thead = document.createElement('thead');\n            thead.innerHTML = `<tr><th>${ajaxResponse.source.toUpperCase()}</th>\n                <th>${ajaxResponse.target.toUpperCase()}</th></tr>`;\n            table.appendChild(thead);\n\n            const tbody = document.createElement('tbody');\n\n            Object.entries(entries).forEach(([key, value]) => {\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${key}</td><td>${value}</td>`;\n                tbody.appendChild(row);\n            });\n\n            table.appendChild(tbody);\n\n            Modal.create({\n                title: 'Entries',\n                body: table,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        } else {\n            Modal.create({\n                title: `Error fetching entries for<br/><em>${glossaryid}</em>`,\n                body: message,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        }\n    };\n    const onGlossaryDbAllfailed = (obj)=> {\n        Log.info('onGlossaryDbAllfailed');\n        Log.error(obj);\n    };\n\n    const onGlossaryDbfailed = (obj)=> {\n        Log.info('onGlossaryDbfailed');\n        Log.error(obj);\n    };\n\n    const onGlossaryDbSuccess = (obj)=> {\n        Log.info('onGlossaryDbSuccess');\n        Log.info(obj);\n    };\n    const resizeEditors = ()=>{\n\n        allDataFormatOne.forEach((editable)=>{\n            const key = editable.id.replace('tiny_', '');\n            const selector = `[data-sourcetext-key=\"${key}\"]`;\n            let parent = domQuery(selector);\n            const grandparent = parent.parentElement;\n\n            const updateEditableHeight = ()=> {\n                const totalHeight = grandparent.offsetHeight + 80; // Tiny header average height is 80.\n                editable.style.height = totalHeight + 'px';\n            };\n\n            // Observe size changes in parent and grandparent.\n            const resizeObserver = new ResizeObserver(() => {\n                updateEditableHeight();\n            });\n\n            resizeObserver.observe(parent);\n            resizeObserver.observe(grandparent);\n\n        });\n    };\n    /**\n     * Register UI elements.\n     */\n    const registerUI = () => {\n\n        try {\n            allDataFormatOne = domQueryAll(Selectors.editors.targetarea);\n            hideiframes = domQuery(Selectors.actions.hideiframes);\n            langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n            errordbtitle = langstrings.uistrings.errordbtitle;\n            saveAllBtn = domQuery(Selectors.actions.saveAll);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n            glossaryDetailViewr = domQuery(Selectors.glossary.entriesviewerPage);\n            settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n            settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n            settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n            settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n            settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n            settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n            settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n            settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n            settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n            settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n            settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n            if (!config.isfree) {\n                settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n            }\n            settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n            settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n            fetchCookies();\n            resizeEditors();\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    /**\n     * Get the stored settings for this course and lang pair.\n     */\n    const fetchCookies = () => {\n        if (!config.targetlang) {\n            return;\n        }\n        const glossaryCookie = Utils.getCookie(config);\n        const newCookie = Utils.getEncodedCookie(config);\n        if (newCookie !== null) {\n            const settingsCookie = JSON.parse(newCookie);\n            for (const selector in settingsUI) {\n                if (settingsCookie[selector] !== undefined) {\n                    switch (settingsUI[selector].type) {\n                        case 'select-one' :\n                            setOptionFromCookie(settingsCookie[selector]);\n                            break;\n                        case 'checkbox' :\n                            settingsUI[selector].checked = settingsCookie[selector];\n                            break;\n                        case 'radio' :\n                            domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                            break;\n                        default:\n                            settingsUI[selector].value = settingsCookie[selector];\n                            break;\n                    }\n\n                }\n            }\n        }\n        if (glossaryCookie !== null) {\n            // Legacy cookie.\n            settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n        }\n    };\n    /**\n     * Selects a dd based on its value.\n     * @param {string} value\n     */\n    const setOptionFromCookie = (value)=>{\n        let optionToSelect = domQuery(`option[value=\"${value}\"]`);\n        if (optionToSelect) {\n            optionToSelect.selected = true;\n        }\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @returns {Promise<void>}\n     */\n    const launchModal = async() => {\n        saveAllModal = await Modal.create({\n            title: langstrings.uistrings.saveallmodaltitle,\n            body: langstrings.uistrings.saveallmodalbody,\n        });\n        await saveAllModal.show();\n    };\n    const handleFocusEvent = (e)=>{\n        if (e.target.closest(Selectors.editors.targetarea)) {\n            if (getIconStatus(e.target.id.replace('tiny_', '')) === Selectors.statuses.tosave) {\n                const options = {\n                    subdirs: false,\n                    maxbytes: 10240,\n                    maxfiles: 0,\n                    noclean: true,\n                    trusttext: true,\n                    // eslint-disable-next-line camelcase\n                    enable_filemanagement: false,\n                    autosave: false,\n                    removeorphaneddrafts: true,\n                    plugins: []\n                };\n                // eslint-disable-next-line promise/catch-or-return\n                TinyMCEinit.getTinyMCE().then(\n                    // eslint-disable-next-line promise/always-return\n                    ()=>{\n                        // eslint-disable-next-line promise/no-nesting\n                        TinyMCE.setupForTarget(e.target, options)\n                            // eslint-disable-next-line promise/always-return\n                            .then(()=>{\n                                Log.info('tiny loaded for ' + e.target.id);\n                            })\n                            .catch((r)=>{\n                                Log.error(r);\n                            });\n                    }\n                );\n            }\n\n        }\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                showModal('Cannot call deepl', `<p>${langstrings.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n            } else {\n                callDeeplServices();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n        if (e.target.closest(Selectors.glossary.entriesviewerPage)) {\n            Log.info('CLICK');\n            Log.info(settingsUI[Selectors.deepl.glossaryId].value);\n            Api.getGlossariesEntries(\n                settingsUI[Selectors.deepl.glossaryId].value,\n                config.deeplsourcelang,\n                config.targetlang\n            );\n        }\n    };\n    /**\n     * Event listener for change events.\n     * @param {event} e\n     */\n    const handleChangeEvent = (e) => {\n\n        if (e.target.closest(Selectors.actions.hideiframes)) {\n            doHideiframes(hideiframes.checked);\n        }\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sectionSwitcher)) {\n            switchSection(e);\n        }\n        if (e.target.closest(Selectors.actions.moduleSwitcher)) {\n            switchModules(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showHidden)) {\n            showRows(Selectors.statuses.hidden, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceselect)) {\n            onSourceChange(e);\n        }\n        if (e.target.closest(Selectors.deepl.glossaryId)) {\n            if (settingsUI[Selectors.deepl.glossaryId].value !== '') {\n                glossaryDetailViewr.style.display = 'block';\n            } else {\n                glossaryDetailViewr.style.display = 'none';\n            }\n        }\n    };\n    /**\n     * Toggle iFrames in sourcetexts.\n     * @param {boolean} isChecked\n     */\n    function doHideiframes(isChecked) {\n        const allIframes = domQueryAll(Selectors.sourcetexts.iframes);\n        if (!isChecked && allIframes.length > 0) {\n            removedIframes = [];\n            allIframes.forEach(iframe => {\n                removedIframes.push({\n                    parent: iframe.parentNode,\n                    nextSibling: iframe.nextSibling,\n                    html: iframe.outerHTML\n                });\n                iframe.remove();\n            });\n        } else if (removedIframes.length > 0) {\n            // Restore all previously removed iframes.\n            removedIframes.forEach(info => {\n                // Create a new element from the stored HTML.\n                const tempDiv = document.createElement('div');\n                tempDiv.innerHTML = info.html;\n                const newIframe = tempDiv.firstChild;\n                // Insert it back into the DOM\n                if (info.nextSibling) {\n                    info.parent.insertBefore(newIframe, info.nextSibling);\n                } else {\n                    info.parent.appendChild(newIframe);\n                }\n            });\n            removedIframes = [];\n        }\n    }\n\n\n    /**\n     * Multilang button handler\n     *\n     * @param {Event} e Event\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        if (key === null) {\n            Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n        } else {\n            let source = domQuery(Selectors.sourcetexts.keys, key);\n            let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n            source.classList.toggle(\"show\");\n            multilang.classList.toggle(\"show\");\n        }\n    };\n\n    /**\n     * @returns void\n     */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        // Prepare the UI for the save process.\n        saveAllBtn.disabled = true;\n        launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n            Log.error(reason);\n        });\n        // Prepare the data to be saved.\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n    /**\n     * Saving a single translation to DB.\n     * @param {Event} e\n     */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n    /**\n     *\n     * @param {string} key\n     * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n     */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n            cmid: element.getAttribute(\"data-cmid\"),\n        };\n    };\n    /**\n     * Listener for individual source change.\n     * @todo MDL-000 implement in v1.4.0\n     *\n     * @param {event} e\n     */\n    const onSourceChange = (e) => {\n        // Do check source and target and propose rephrase if PRO.\n        Log.info('source changed');\n        Log.info(e.target.getAttribute('data-key'));\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     */\n    const onItemChecked = (e) => {\n        // Check/uncheck checkboxes changes the charcount and icon status.\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n            countWordAndChar();\n        }\n    };\n\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        // Check/uncheck checkboxes\n        if (e.target.checked) {\n            checkboxes.forEach((i) => {\n                // Toggle check box upon visibility\n                i.checked = !getParentRow(i).classList.contains('d-none');\n                toggleStatus(i.getAttribute('data-key'), i.checked);\n            });\n        } else {\n            checkboxes.forEach((i) => {\n                i.checked = false;\n                toggleStatus(i.getAttribute('data-key'), false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        autotranslateButton.disabled = true;\n        for (let i in checkboxes) {\n            let e = checkboxes[i];\n            if (e.checked) {\n                autotranslateButton.disabled = false;\n                break;\n            }\n        }\n    };\n    /**\n     * Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body, type = 'default') => {\n        Modal.create({\n            title: title,\n            body: body,\n            type: type,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n    /**\n     * Event Listener when DeepL API call failed.\n     * @param {string} error\n     */\n    const onTranslationFailed = (error) => {\n        let s = langstrings.uistrings.deeplapiexception;\n        showModal(s, error, 'Alert');\n    };\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch deepl services.\n     */\n    const callDeeplServices = () => {\n        const keys = [];\n        const [cookie, settings] = prepareSettingsAndCookieValues();\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                const key = ckBox.getAttribute(\"data-key\");\n                const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                const editor = findEditor(key);\n                Translation.initTempForKey(\n                    key, editor,\n                    sourceText.getAttribute(\"data-sourcetext-raw\"),\n                    sourceText.getAttribute(\"data-filedtext-raw\"),\n                    domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                );\n                keys.push(key);\n            });\n        const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n        Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), config.cookieduration);\n        Translation.callTranslations(keys, config, settings);\n    };\n    /**\n     * Parse the advanced settings UI and map the values for cookies and Deepl.\n     *\n     * @returns {[{},{}]}\n     */\n    const prepareSettingsAndCookieValues = () => {\n        let settings = {};\n        let cookie = {};\n        for (const selector in settingsUI) {\n            if (settingsUI[selector] === null) {\n                Log.warn(`prepareSettingsAndCookieValues. Could not find selector ${selector}`);\n                Log.warn(settingsUI);\n            } else {\n                switch (settingsUI[selector].type) {\n                    case 'select-one':\n                        cookie[selector] = settingsUI[selector].value;\n                        settings[selector] = settingsUI[selector].value;\n                        break;\n                    case 'textarea':\n                        cookie[selector] = settingsUI[selector].value;\n                        // Deepl needs an array.\n                        settings[selector] = Utils.toJsonArray(cookie[selector]);\n                        break;\n                    case 'checkbox':\n                        if (selector === Selectors.deepl.tagHandling) {\n                            cookie[selector] = settingsUI[selector].checked;\n                            // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                            settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                        } else {\n                            settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                        }\n                        break;\n                    case 'radio':\n                        settings[selector] = cookie[selector] = queryRadioValue(selector);\n                        break;\n                    default: // Text.\n                        settings[selector] = cookie[selector] = settingsUI[selector].value;\n                        break;\n                }\n            }\n        }\n        return [cookie, settings];\n    };\n    /**\n     * Factory to display process' statuses for each item.\n     *\n     * @param {String} key\n     * @param {Boolean} checked\n     */\n    const toggleStatus = (key, checked) => {\n        const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n        switch (status) {\n            case Selectors.statuses.wait :\n                Translation.initTemp(key); // Reset the translation.\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                    // RefreshTempTranslation(key);\n                }\n                break;\n            case Selectors.statuses.totranslate :\n                // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                if (checked && Translation.translated[key]) {\n                    setIconStatus(key, Selectors.statuses.tosave, true);\n                } else {\n                    setIconStatus(key, Selectors.statuses.wait);\n                }\n                break;\n            case Selectors.statuses.tosave :\n                if (!checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.failed :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.success :\n                break;\n            case Selectors.statuses.saved :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                Translation.initTemp(key);\n                break;\n        }\n    };\n    /**\n     * Shows/hides rows.\n     * @param {string} selector\n     * @param {boolean} selected\n     */\n    const showRows = (selector, selected) => {\n\n        const items = domQueryAll(selector);\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n        const shoudlcheck = allSelected && selected;\n        items.forEach((item) => {\n            let k = item.getAttribute('data-row-id');\n            if (selected) {\n                item.classList.remove(\"d-none\");\n            } else {\n                item.classList.add(\"d-none\");\n            }\n            // When a row is toggled then we don't want it to be selected and sent from translation.\n            try {\n                const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                if (single !== null) {\n                    single.checked = shoudlcheck;\n                    toggleStatus(k, false);\n                }\n            } catch (e) {\n                Log.warn(`${k} translation is disalbled`);\n            }\n\n        });\n        const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden);\n        if (allchilds !== null && allchilds.length > 0) {\n            allchilds.forEach(c => {\n                const key = c.getAttribute('data-key');\n                c.checked = false;\n                toggleStatus(key, false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {string} key\n     * @param {string} error\n     */\n    const onErrorMessageItem = (key, error) => {\n        Log.warn(`ui/errorMessageItem`);\n        Log.warn(key);\n        Log.warn(error);\n        const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        // Display granular error messages.\n        const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n        if (indexOfSET === -1) {\n            showErrorMessageForEditor(key, error);\n        } else {\n            let s = langstrings.uistrings.errortoolong;\n            showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n        }\n    };\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {string} savedText\n     */\n    const onSuccessMessageItem = (key, savedText) => {\n        domQuery(Selectors.editors.multiples.editorsWithKey, key)\n            .classList.add(\"local_deepler__success\");\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.success);\n        // Replace text in the multilang textarea.\n        const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n        multilangTextarea.innerHTML = savedText;\n        // Deselect the checkbox.\n        domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n        // Remove success message after a few seconds.\n        setTimeout(() => {\n            let multilangPill = domQuery(Selectors.statuses.multilang, key);\n            let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n    /**/\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     */\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to filter sections.\n     * @param {Event} e\n     */\n    const switchSection = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"section_id\", e.target.value.trim());\n        if (searchParams.has(\"activity_id\")) {\n            searchParams.delete(\"activity_id\");\n        }\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to filter modules.\n     * @param {Event} e\n     */\n    const switchModules = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"activity_id\", e.target.value.trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0;\n        let cws = 0;\n        let cwos = 0;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                let key = ckBox.getAttribute(\"data-key\");\n                let results = getCount(key);\n                wrdsc += results.wordCount;\n                cwos += results.charNumWithOutSpace;\n                cws += results.charNumWithSpace;\n            });\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n        let current = cws + config.usage.character.count;\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n        if (current >= config.usage.character.limit) {\n            parent.classList.remove('alert-success');\n            parent.classList.add('alert-danger');\n        } else {\n            parent.classList.add('alert-success');\n            parent.classList.remove('alert-danger');\n        }\n    };\n    /**\n     * Get the editor container based on recieved current user's editor preference.\n     *\n     * @param {string} key Translation Key\n     */\n    const findEditor = (key) => {\n        let e = domQuery(Selectors.editors.types.basic, key);\n        let et = 'basic';\n        if (e === null) {\n            let r = null;\n            let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n            if (editorTab.indexOf(config.userPrefs) === -1) {\n                Log.warn('Unsupported editor ' + config.userPrefs);\n            } else {\n                // First let's try the current editor.\n                try {\n                    r = findEditorByType(key, config.userPrefs);\n                } catch (error) {\n                    // Content was edited by another editor.\n                    Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                }\n            }\n            return r;\n        } else {\n            return {editor: e, editorType: et};\n        }\n    };\n    /**\n     * @param {string} key\n     * @param {object} editorType\n     * @returns {{editor: object, editorType: string}}\n     */\n    const findEditorByType = (key, editorType) => {\n        let et = 'basic';\n        let ed = null;\n        switch (editorType) {\n            case \"atto\" :\n                et = 'iframe';\n                ed = domQuery(Selectors.editors.types.atto, key);\n                break;\n            case \"tiny\":\n                et = 'iframe';\n                ed = findTinyInstanceByKey(key);\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                ed = domQuery(Selectors.editors.types.other, key);\n                break;\n        }\n        return {editor: ed, editorType: et};\n    };\n    /**\n     * Finds TinyMCE instance.\n     * @param {string} key\n     * @returns {Node}\n     */\n    const findTinyInstanceByKey = (key)=> {\n        let editor = null;\n        TinyMCE.getAllInstances().every((k, v)=>{\n            if (v.attributes.name.value.indexOf(key) == 0) {\n                editor = k.getBody();\n                return false;\n            }\n            return true;\n        });\n        return editor;\n    };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Wrapper for radios value.\n     *\n     * @param {string} selector\n     * @returns {*}\n     */\n    const queryRadioValue = (selector) => {\n        return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {NodeList}\n     */\n    const domQueryAll = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelectorAll(q);\n    };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n\n        ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n            {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100, crumbsmaxlen: cfg.crumbsmaxlen});\n        Translation.init(cfg);\n        config = cfg;\n        Log.info(cfg);\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        doHideiframes(hideiframes.checked);\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n        showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n        showRows(Selectors.statuses.hidden, domQuery(Selectors.actions.showHidden).checked);\n    };\n    /**\n     * Api to be used by the other modules.\n     */\n    return {\n        init: init\n    };\n});\n"],"names":["define","Log","TinyMCEinit","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","Api","glossaryDetailViewr","hideiframes","removedIframes","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","allDataFormatOne","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","showEntriesModal","ajaxResponse","glossaryid","entries","JSON","parse","message","table","document","createElement","className","thead","innerHTML","source","toUpperCase","target","appendChild","tbody","Object","forEach","_ref","key","value","row","create","title","body","type","show","removeOnClose","onGlossaryDbAllfailed","obj","info","onGlossaryDbfailed","onGlossaryDbSuccess","resizeEditors","editable","id","selector","parent","domQuery","grandparent","parentElement","resizeObserver","ResizeObserver","totalHeight","offsetHeight","style","height","updateEditableHeight","observe","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","undefined","setOptionFromCookie","checked","deepl","glossaryId","optionToSelect","selected","handleFocusEvent","e","closest","editors","targetarea","getIconStatus","statuses","tosave","options","subdirs","maxbytes","maxfiles","noclean","trusttext","enable_filemanagement","autosave","removeorphaneddrafts","plugins","getTinyMCE","then","setupForTarget","catch","r","handleClickEvent","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","glossary","entriesviewerPage","getGlossariesEntries","handleChangeEvent","doHideiframes","targetSwitcher","switchTarget","sectionSwitcher","switchSection","moduleSwitcher","switchModules","sourceSwitcher","switchSource","showUpdated","showRows","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","display","isChecked","allIframes","domQueryAll","sourcetexts","iframes","iframe","push","parentNode","nextSibling","html","outerHTML","remove","tempDiv","newIframe","firstChild","insertBefore","keyid","getAttribute","keyidToKey","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","checkedCheckBoxes","disabled","async","saveallmodaltitle","saveallmodalbody","launchModal","reason","data","Array","from","map","dataset","hideErrorMessage","prepareDBitem","keyValidator","element","multiples","editorsWithKey","courseid","parseInt","tid","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","setAttribute","statusstrings","node","replaceKey","parentrow","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","cookieduration","callTranslations","warn","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","setTimeout","multilangPill","prevTransStatus","errorMsg","url","URL","window","location","href","searchParams","set","rephrasesymbol","trim","toString","has","delete","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","crumbsmaxlen","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","GLOSSARY_DB_ALL_FAILED","GLOSSARY_DB_FAILED","GLOSSARY_DB_SUCCESS","GLOSSARY_ENTRIES_SUCCESS","GLOSSARY_ENTRIES_FAILED","isTranslatable"],"mappings":"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"}