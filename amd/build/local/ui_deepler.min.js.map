{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/loader',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy'\n    ],\n    (Log, TinyMCEinit, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy) => {\n        let hideiframes = {};\n        // Store removed iframes and their parent/next sibling for restoration.\n        let removedIframes = [];\n\n        let config = {};\n        let langstrings = {};\n        let autotranslateButton = {};\n        let saveAllBtn = {};\n        let selectAllBtn = {};\n        let checkboxes = [];\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        let errordbtitle = '';\n        let settingsUI = {};\n        let allDataFormatOne = [];\n        /**\n         * When a main error with the DB occurs.\n         *\n         * @param {string} error\n         * @param {int} status\n         */\n        const onDBFailed = (error, status) => {\n            showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n        };\n        /**\n         *\n         * @param {array} errors\n         */\n        const onDbSavedSuccess = (errors) => {\n            if (saveAllModal !== null && saveAllModal.isVisible) {\n                saveAllModal.hide();\n            }\n            if (errors.length > 0) {\n                let s = langstrings.uistrings.errordbpartial;\n                s = s.replace('{$a}', errors.length);\n                showModal(errordbtitle, s, 'Alert');\n            }\n        };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n        /**\n         * Event factories.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', handleChangeEvent);\n            document.addEventListener('click', handleClickEvent);\n            document.addEventListener('focusin', handleFocusEvent);\n\n            // Translation events.\n            Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n            Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n            Events.on(Translation.ON_DB_FAILED, onDBFailed);\n            Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n            Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        };\n        const resizeEditors = ()=>{\n\n            allDataFormatOne.forEach((editable)=>{\n                const key = editable.id.replace('tiny_', '');\n                const selector = `[data-sourcetext-key=\"${key}\"]`;\n                let parent = domQuery(selector);\n                const grandparent = parent.parentElement;\n\n                const updateEditableHeight = ()=> {\n                    const totalHeight = grandparent.offsetHeight + 80; // Tiny header average height is 80.\n                    editable.style.height = totalHeight + 'px';\n                };\n\n                // Observe size changes in parent and grandparent.\n                const resizeObserver = new ResizeObserver(() => {\n                    updateEditableHeight();\n                });\n\n                resizeObserver.observe(parent);\n                resizeObserver.observe(grandparent);\n\n            });\n        };\n        /**\n         * Register UI elements.\n         */\n        const registerUI = () => {\n            try {\n                allDataFormatOne = domQueryAll(Selectors.editors.targetarea);\n                hideiframes = domQuery(Selectors.actions.hideiframes);\n                langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n                errordbtitle = langstrings.uistrings.errordbtitle;\n                saveAllBtn = domQuery(Selectors.actions.saveAll);\n                selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n                autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n                checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n                settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n                settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n                settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n                settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n                settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n                settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n                settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n                settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n                settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n                settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n                settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n                if (!config.isfree) {\n                    settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n                }\n                settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n                settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n                fetchCookies();\n                resizeEditors();\n            } catch (e) {\n                if (config.debug) {\n                    Log.error(e.message);\n                }\n            }\n        };\n        /**\n         * Get the stored settings for this course and lang pair.\n         */\n        const fetchCookies = () => {\n            if (!config.targetlang) {\n                return;\n            }\n            const glossaryCookie = Utils.getCookie(config);\n            const newCookie = Utils.getEncodedCookie(config);\n            if (newCookie !== null) {\n                const settingsCookie = JSON.parse(newCookie);\n                for (const selector in settingsUI) {\n                    if (settingsCookie[selector] !== undefined) {\n                        switch (settingsUI[selector].type) {\n                            case 'select-one' :\n                                // eslint-disable-next-line no-case-declarations\n                                let optionToSelect = domQuery(`option[value=\"${settingsCookie[selector]}\"]`);\n                                if (optionToSelect) {\n                                    optionToSelect.selected = true;\n                                }\n                                break;\n                            case 'checkbox' :\n                                settingsUI[selector].checked = settingsCookie[selector];\n                                break;\n                            case 'radio' :\n                                domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                                break;\n                            default:\n                                settingsUI[selector].value = settingsCookie[selector];\n                                break;\n                        }\n\n                    }\n                }\n            }\n            if (glossaryCookie !== null) {\n                // Legacy cookie.\n                settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: langstrings.uistrings.saveallmodaltitle,\n                body: langstrings.uistrings.saveallmodalbody,\n            });\n            await saveAllModal.show();\n        };\n        const handleFocusEvent = (e)=>{\n            if (e.target.closest(Selectors.editors.targetarea)) {\n                if (getIconStatus(e.target.id.replace('tiny_', '')) === Selectors.statuses.tosave) {\n                    const options = {\n                        subdirs: false,\n                        maxbytes: 10240,\n                        maxfiles: 0,\n                        noclean: true,\n                        trusttext: true,\n                        enable_filemanagement: false,\n                        autosave: false,\n                        removeorphaneddrafts: true,\n                        plugins: []\n                    };\n                    TinyMCEinit.getTinyMCE().then(\n                        ()=>{\n                            TinyMCE.setupForTarget(e.target, options)\n                                .then(()=>{\n                                    Log.info('tiny loaded for ' + e.target.id);\n                                })\n                                .catch((r)=>{\n                                    Log.error(r);\n                                });\n                        }\n                    );\n                }\n\n            }\n        };\n        /**\n         * Event listener for click events.\n         *\n         * @param {event} e\n         */\n        const handleClickEvent = (e) => {\n            if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n            }\n            if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                    showModal('Cannot call deepl', `<p>${langstrings.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n                } else {\n                    callDeeplServices();\n                }\n            }\n            if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                toggleAllCheckboxes(e);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                toggleAutotranslateButton();\n            }\n            if (e.target.closest(Selectors.actions.saveAll)) {\n                saveTranslations();\n            }\n            if (e.target.closest(Selectors.actions.validatorsBtns)) {\n                saveSingleTranslation(e);\n            }\n        };\n\n        /**\n         * Toggle iFrames in sourcetexts.\n         * @param {boolean} isChecked\n         */\n        function doHideiframes(isChecked) {\n            const allIframes = domQueryAll(Selectors.sourcetexts.iframes);\n            if (!isChecked && allIframes.length > 0) {\n                removedIframes = [];\n                allIframes.forEach(iframe => {\n                    removedIframes.push({\n                        parent: iframe.parentNode,\n                        nextSibling: iframe.nextSibling,\n                        html: iframe.outerHTML\n                    });\n                    iframe.remove();\n                });\n            } else if (removedIframes.length > 0) {\n                // Restore all previously removed iframes.\n                removedIframes.forEach(info => {\n                    // Create a new element from the stored HTML.\n                    const tempDiv = document.createElement('div');\n                    tempDiv.innerHTML = info.html;\n                    const newIframe = tempDiv.firstChild;\n                    // Insert it back into the DOM\n                    if (info.nextSibling) {\n                        info.parent.insertBefore(newIframe, info.nextSibling);\n                    } else {\n                        info.parent.appendChild(newIframe);\n                    }\n                });\n                removedIframes = [];\n            }\n        }\n\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n        const handleChangeEvent = (e) => {\n            window.console.info('CHANGE');\n            if (e.target.closest(Selectors.actions.hideiframes)) {\n                doHideiframes(hideiframes.checked);\n            }\n            if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                switchTarget(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                switchSource(e);\n            }\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                showRows(Selectors.statuses.updated, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                showRows(Selectors.statuses.needsupdate, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                showRows(Selectors.statuses.hidden, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                onItemChecked(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceselect)) {\n                onSourceChange(e);\n            }\n        };\n        /**\n         * Multilang button handler\n         *\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = Utils.keyidToKey(keyid);\n            if (key === null) {\n                Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n            } else {\n                let source = domQuery(Selectors.sourcetexts.keys, key);\n                let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n                source.classList.toggle(\"show\");\n                multilang.classList.toggle(\"show\");\n            }\n        };\n\n        /**\n         * @returns void\n         */\n        const saveTranslations = () => {\n            const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n            if (selectedCheckboxes.length === 0) {\n                return;\n            }\n            // Prepare the UI for the save process.\n            saveAllBtn.disabled = true;\n            launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n                Log.error(reason);\n            });\n            // Prepare the data to be saved.\n            const data = [];\n            const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n            keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                    if (getIconStatus(key) === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDBitem(key));\n                    }\n                }\n            );\n            Translation.saveTranslations(data, config);\n        };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n        const saveSingleTranslation = (e)=> {\n            const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n            if (getIconStatus(key) === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                Translation.saveTranslations([prepareDBitem(key)], config);\n            }\n        };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n        const prepareDBitem = (key) => {\n            const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            return {\n                key: key,\n                courseid: config.courseid,\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\"),\n                cmid: element.getAttribute(\"data-cmid\"),\n            };\n        };\n        /**\n         * Listener for individual source change.\n         * @todo MDL-000 implement in v1.4.0\n         *\n         * @param {event} e\n         */\n        const onSourceChange = (e) => {\n            // Do check source and target and propose rephrase if PRO.\n            Log.info('source changed');\n            Log.info(e.target.getAttribute('data-key'));\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n         */\n        const onItemChecked = (e) => {\n            // Check/uncheck checkboxes changes the charcount and icon status.\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n                countWordAndChar();\n            }\n        };\n\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Get the translation row status icon.\n         *\n         * @param {string} key\n         * @returns {*}\n         */\n        const getIconStatus = (key)=> {\n            return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n        };\n        /**\n         * Change translation process status icon.\n         *\n         * @param {string} key\n         * @param {string} status\n         * @param {boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = domQuery(Selectors.actions.validatorBtn, key);\n            if (!isBtn) {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            } else {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Fetch the parent row of the translation.\n         * @param {Node} node\n         * @returns {*}\n         */\n        const getParentRow = (node) => {\n            return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        const showModal = (title, body, type = 'default') => {\n            Modal.create({\n                title: title,\n                body: body,\n                type: type,\n                show: true,\n                removeOnClose: true,\n            });\n        };\n        /**\n         * Event Listener when DeepL API call failed.\n         * @param {string} error\n         */\n        const onTranslationFailed = (error) => {\n            let s = langstrings.uistrings.deeplapiexception;\n            showModal(s, error, 'Alert');\n        };\n        /**\n         * Event listener for the translations process to dispaly the status.\n         *\n         * @param {string} key\n         */\n        const onItemTranslated = (key) => {\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.tosave, true);\n        };\n        /**\n         * Launch deepl services.\n         */\n        const callDeeplServices = () => {\n            const keys = [];\n            const [cookie, settings] = prepareSettingsAndCookieValues();\n            saveAllBtn.disabled = false;\n            domQueryAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    const key = ckBox.getAttribute(\"data-key\");\n                    const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                    const editor = findEditor(key);\n                    Translation.initTempForKey(\n                        key, editor,\n                        sourceText.getAttribute(\"data-sourcetext-raw\"),\n                        sourceText.getAttribute(\"data-filedtext-raw\"),\n                        domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                    );\n                    keys.push(key);\n                });\n            const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n            Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), config.cookieduration);\n            Translation.callTranslations(keys, config, settings);\n        };\n        /**\n         * Parse the advanced settings UI and map the values for cookies and Deepl.\n         *\n         * @returns {[{},{}]}\n         */\n        const prepareSettingsAndCookieValues = () => {\n            let settings = {};\n            let cookie = {};\n            for (const selector in settingsUI) {\n                if (settingsUI[selector] === null) {\n                    Log.warn(`prepareSettingsAndCookieValues. Could not find selector ${selector}`);\n                    window.console.warn(settingsUI);\n                } else {\n                    switch (settingsUI[selector].type) {\n                        case 'select-one':\n                            cookie[selector] = settingsUI[selector].value;\n                            settings[selector] = settingsUI[selector].value;\n                            break;\n                        case 'textarea':\n                            cookie[selector] = settingsUI[selector].value;\n                            // Deepl needs an array.\n                            settings[selector] = Utils.toJsonArray(cookie[selector]);\n                            break;\n                        case 'checkbox':\n                            if (selector === Selectors.deepl.tagHandling) {\n                                cookie[selector] = settingsUI[selector].checked;\n                                // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                                settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                            } else {\n                                settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                            }\n                            break;\n                        case 'radio':\n                            settings[selector] = cookie[selector] = queryRadioValue(selector);\n                            break;\n                        default: // Text.\n                            settings[selector] = cookie[selector] = settingsUI[selector].value;\n                            break;\n                    }\n                }\n            }\n            return [cookie, settings];\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = domQueryAll(selector);\n            const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n            const shoudlcheck = allSelected && selected;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                if (selected) {\n                    item.classList.remove(\"d-none\");\n                } else {\n                    item.classList.add(\"d-none\");\n                }\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                    if (single !== null) {\n                        single.checked = shoudlcheck;\n                        toggleStatus(k, false);\n                    }\n                    const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                    if (allchilds !== null && allchilds.length > 0) {\n                        allchilds.forEach(c => {\n                            const key = c.getAttribute('data-key');\n                            c.checked = shoudlcheck;\n                            toggleStatus(key, false);\n                        });\n                    }\n                } catch (e) {\n                    Log.warn(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {string} key\n         * @param {string} error\n         */\n        const onErrorMessageItem = (key, error) => {\n            Log.warn(`ui/errorMessageItem`);\n            Log.warn(key);\n            Log.warn(error);\n            const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            // Display granular error messages.\n            const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n            if (indexOfSET === -1) {\n                showErrorMessageForEditor(key, error);\n            } else {\n                let s = langstrings.uistrings.errortoolong;\n                showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n            }\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            let alertChild = domQuery('.alert-danger', '', parent);\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {string} savedText\n         */\n        const onSuccessMessageItem = (key, savedText) => {\n            domQuery(Selectors.editors.multiples.editorsWithKey, key)\n                .classList.add(\"local_deepler__success\");\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.success);\n            // Replace text in the multilang textarea.\n            const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n            multilangTextarea.innerHTML = savedText;\n            // Deselect the checkbox.\n            domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n            // Remove success message after a few seconds.\n            setTimeout(() => {\n                let multilangPill = domQuery(Selectors.statuses.multilang, key);\n                let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n         /**/\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n            searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang,\n         * Hence reload the page and change the site main lang.\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n           domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                let key = ckBox.getAttribute(\"data-key\");\n                let results = getCount(key);\n                wrdsc += results.wordCount;\n                cwos += results.charNumWithOutSpace;\n                cws += results.charNumWithSpace;\n            });\n            const wordCount = domQuery(Selectors.statuses.wordcount);\n            const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n            const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n            let current = cws + config.usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n            if (current >= config.usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = domQuery(Selectors.sourcetexts.keys, key);\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Wrapper for radios value.\n         *\n         * @param {string} selector\n         * @returns {*}\n         */\n        const queryRadioValue = (selector) => {\n            return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n        };\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {element}\n         */\n        const domQuery = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelector(q);\n        };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n        /**\n         * Event listener to switch source lang.\n         * @param {*} cfg\n         */\n        const init = (cfg) => {\n            ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n                {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100, crumbsmaxlen: cfg.crumbsmaxlen});\n            Translation.init(cfg);\n            config = cfg;\n            Log.info(cfg);\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            doHideiframes(hideiframes.checked);\n            saveAllBtn.disabled = true;\n            selectAllBtn.disabled = !Translation.isTranslatable();\n            checkboxes.forEach((node) => {\n                node.disabled = selectAllBtn.disabled;\n            });\n            showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Api to be used by the other modules.\n         */\n        return {\n            init: init\n        };\n});\n"],"names":["define","Log","TinyMCEinit","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","hideiframes","removedIframes","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","allDataFormatOne","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","resizeEditors","forEach","editable","key","id","selector","parent","domQuery","grandparent","parentElement","resizeObserver","ResizeObserver","totalHeight","offsetHeight","style","height","updateEditableHeight","observe","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","JSON","parse","undefined","type","optionToSelect","selected","checked","value","deepl","glossaryId","handleFocusEvent","e","target","closest","editors","targetarea","getIconStatus","statuses","tosave","options","subdirs","maxbytes","maxfiles","noclean","trusttext","enable_filemanagement","autosave","removeorphaneddrafts","plugins","getTinyMCE","then","setupForTarget","info","catch","r","handleClickEvent","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","doHideiframes","isChecked","allIframes","domQueryAll","sourcetexts","iframes","iframe","push","parentNode","nextSibling","html","outerHTML","remove","tempDiv","document","createElement","innerHTML","newIframe","firstChild","insertBefore","appendChild","handleChangeEvent","window","console","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","keyid","getAttribute","keyidToKey","source","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","reason","data","Array","from","map","dataset","hideErrorMessage","prepareDBitem","keyValidator","element","multiples","editorsWithKey","courseid","parseInt","tid","table","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","setAttribute","statusstrings","node","replaceKey","parentrow","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","cookieduration","callTranslations","warn","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","setTimeout","multilangPill","prevTransStatus","message","errorMsg","url","URL","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","crumbsmaxlen","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":"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"}