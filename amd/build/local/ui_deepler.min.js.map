{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy'\n    ],\n    (Log, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy) => {\n\n        let config = {};\n        let langstrings = {};\n        let autotranslateButton = {};\n        let saveAllBtn = {};\n        let selectAllBtn = {};\n        let checkboxes = [];\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        let errordbtitle = '';\n        let settingsUI = {};\n        /**\n         * When a main error with the DB occurs.\n         *\n         * @param {string} error\n         * @param {int} status\n         */\n        const onDBFailed = (error, status) => {\n            showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n        };\n        /**\n         *\n         * @param {array} errors\n         */\n        const onDbSavedSuccess = (errors) => {\n            if (saveAllModal !== null && saveAllModal.isVisible) {\n                saveAllModal.hide();\n            }\n            if (errors.length > 0) {\n                let s = config.uistrings.errordbpartial;\n                s.replace('{$a}', errors.length);\n                showModal(errordbtitle, s, 'Alert');\n            }\n        };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n        /**\n         * Event factories.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', handleChangeEvent);\n            document.addEventListener('click', handleClickEvent);\n\n            // Translation events.\n            Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n            Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n            Events.on(Translation.ON_DB_FAILED, onDBFailed);\n            Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n            Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        };\n        /**\n         * Register UI elements.\n         */\n        const registerUI = () => {\n            try {\n                langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n                errordbtitle = langstrings.uistrings.errordbtitle;\n                saveAllBtn = domQuery(Selectors.actions.saveAll);\n                selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n                autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n                checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n                settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n                settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n                settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n                settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n                settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n                settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n                settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n                settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n                settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n                settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n                settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n                if (!config.isfree) {\n                    settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n                }\n                settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n                settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n                fetchCookies();\n            } catch (e) {\n                if (config.debug) {\n                    Log.error(e.message);\n                }\n            }\n        };\n        /**\n         * Get the stored settings for this course and lang pair.\n         */\n        const fetchCookies = () => {\n            if (!config.targetlang) {\n                return;\n            }\n            const glossaryCookie = Utils.getCookie(config);\n            const newCookie = Utils.getEncodedCookie(config);\n            if (newCookie !== null) {\n                const settingsCookie = JSON.parse(newCookie);\n                for (const selector in settingsUI) {\n                    if (settingsCookie[selector] !== undefined) {\n                        switch (settingsUI[selector].type) {\n                            case 'checkbox' :\n                                settingsUI[selector].checked = settingsCookie[selector];\n                                break;\n                            case 'radio' :\n                                domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                                break;\n                            default:\n                                settingsUI[selector].value = settingsCookie[selector];\n                                break;\n                        }\n\n                    }\n                }\n            }\n            if (glossaryCookie !== null) {\n                // Legacy cookie.\n                settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: config.uistrings.saveallmodaltitle,\n                body: config.uistrings.saveallmodalbody,\n            });\n            await saveAllModal.show();\n        };\n        /**\n         * Event listener for click events.\n         *\n         * @param {event} e\n         */\n        const handleClickEvent = (e) => {\n\n            if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n            }\n            if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                    showModal('Cannot call deepl', `<p>${config.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n                } else {\n                    callDeeplServices();\n                }\n            }\n            if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                toggleAllCheckboxes(e);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                toggleAutotranslateButton();\n            }\n            if (e.target.closest(Selectors.actions.saveAll)) {\n                saveTranslations();\n            }\n            if (e.target.closest(Selectors.actions.validatorsBtns)) {\n                saveSingleTranslation(e);\n            }\n        };\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n        const handleChangeEvent = (e) => {\n            if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                switchTarget(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                switchSource(e);\n            }\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                showRows(Selectors.statuses.updated, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                showRows(Selectors.statuses.needsupdate, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                showRows(Selectors.statuses.hidden, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                onItemChecked(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceselect)) {\n                onSourceChange(e);\n            }\n        };\n        /**\n         * Multilang button handler\n         *\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = Utils.keyidToKey(keyid);\n            if (key === null) {\n                Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n            } else {\n                let source = domQuery(Selectors.sourcetexts.keys, key);\n                let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n                source.classList.toggle(\"show\");\n                multilang.classList.toggle(\"show\");\n            }\n        };\n\n        /**\n         * @returns void\n         */\n        const saveTranslations = () => {\n            const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n            if (selectedCheckboxes.length === 0) {\n                return;\n            }\n            // Prepare the UI for the save process.\n            saveAllBtn.disabled = true;\n            launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n                Log.error(reason);\n            });\n            // Prepare the data to be saved.\n            const data = [];\n            const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n            keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                    if (getIconStatus(key) === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDBitem(key));\n                    }\n                }\n            );\n            Translation.saveTranslations(data, config);\n        };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n        const saveSingleTranslation = (e)=> {\n            const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n            if (getIconStatus(key) === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                Translation.saveTranslations([prepareDBitem(key)], config);\n            }\n        };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n        const prepareDBitem = (key) => {\n            const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            return {\n                key: key,\n                courseid: config.courseid,\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\"),\n                cmid: element.getAttribute(\"data-cmid\"),\n            };\n        };\n        /**\n         * Listener for individual source change.\n         * @todo MDL-000 implement in v1.4.0\n         *\n         * @param {event} e\n         */\n        const onSourceChange = (e) => {\n            // Do check source and target and propose rephrase if PRO.\n            Log.info(e.target.getAttribute('data-key'));\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n         */\n        const onItemChecked = (e) => {\n            // Check/uncheck checkboxes changes the charcount and icon status.\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n                countWordAndChar();\n            }\n        };\n\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Get the translation row status icon.\n         *\n         * @param {string} key\n         * @returns {*}\n         */\n        const getIconStatus = (key)=> {\n            return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n        };\n        /**\n         * Change translation process status icon.\n         *\n         * @param {string} key\n         * @param {string} status\n         * @param {boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = domQuery(Selectors.actions.validatorBtn, key);\n            if (!isBtn) {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            } else {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Fetch the parent row of the translation.\n         * @param {Node} node\n         * @returns {*}\n         */\n        const getParentRow = (node) => {\n            return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        const showModal = (title, body, type = 'default') => {\n            Modal.create({\n                title: title,\n                body: body,\n                type: type,\n                show: true,\n                removeOnClose: true,\n            });\n        };\n        /**\n         * Event Listener when DeepL API call failed.\n         * @param {string} error\n         */\n        const onTranslationFailed = (error) => {\n            let s = langstrings.uistrings.deeplapiexception;\n            showModal(s, error, 'Alert');\n        };\n        /**\n         * Event listener for the translations process to dispaly the status.\n         *\n         * @param {string} key\n         */\n        const onItemTranslated = (key) => {\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.tosave, true);\n        };\n        /**\n         * Launch deepl services.\n         */\n        const callDeeplServices = () => {\n            const keys = [];\n            const [cookie, settings] = prepareSettingsAndCookieValues();\n            saveAllBtn.disabled = false;\n            domQueryAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    const key = ckBox.getAttribute(\"data-key\");\n                    const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                    const editor = findEditor(key);\n                    Translation.initTempForKey(\n                        key, editor,\n                        sourceText.getAttribute(\"data-sourcetext-raw\"),\n                        sourceText.getAttribute(\"data-filedtext-raw\"),\n                        domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                    );\n                    keys.push(key);\n                });\n            const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n            Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), 703);\n            Translation.callTranslations(keys, config, settings);\n        };\n        /**\n         * Parse the advanced settings UI and map the values for cookies and Deepl.\n         *\n         * @returns {[{},{}]}\n         */\n        const prepareSettingsAndCookieValues = () => {\n            let settings = {};\n            let cookie = {};\n            for (const selector in settingsUI) {\n                switch (settingsUI[selector].type) {\n                    case 'textarea':\n                        cookie[selector] = settingsUI[selector].value;\n                        // Deepl needs an array.\n                        settings[selector] = Utils.toJsonArray(cookie[selector]);\n                        break;\n                    case 'checkbox':\n                        if (selector === Selectors.deepl.tagHandling) {\n                            cookie[selector] = settingsUI[selector].checked;\n                            // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                            settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                        } else {\n                            settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                        }\n                        break;\n                    case 'radio':\n                        settings[selector] = cookie[selector] = queryRadioValue(selector);\n                        break;\n                    default: // Text.\n                        settings[selector] = cookie[selector] = settingsUI[selector].value;\n                        break;\n                }\n            }\n            return [cookie, settings];\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = domQueryAll(selector);\n            const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n            const shoudlcheck = allSelected && selected;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                if (selected) {\n                    item.classList.remove(\"d-none\");\n                } else {\n                    item.classList.add(\"d-none\");\n                }\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                    if (single !== null) {\n                        single.checked = shoudlcheck;\n                        toggleStatus(k, false);\n                    }\n                    const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                    if (allchilds !== null && allchilds.length > 0) {\n                        allchilds.forEach(c => {\n                            const key = c.getAttribute('data-key');\n                            c.checked = shoudlcheck;\n                            toggleStatus(key, false);\n                        });\n                    }\n                } catch (e) {\n                    Log.warn(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {string} key\n         * @param {string} error\n         */\n        const onErrorMessageItem = (key, error) => {\n            Log.warn(`ui/errorMessageItem`);\n            Log.warn(key);\n            Log.warn(error);\n            const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            // Display granular error messages.\n            const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n            if (indexOfSET === -1) {\n                showErrorMessageForEditor(key, error);\n            } else {\n                let s = langstrings.uistrings.errortoolong;\n                showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n            }\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            let alertChild = domQuery('.alert-danger', '', parent);\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {string} savedText\n         */\n        const onSuccessMessageItem = (key, savedText) => {\n            domQuery(Selectors.editors.multiples.editorsWithKey, key)\n                .classList.add(\"local_deepler__success\");\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.success);\n            // Replace text in the multilang textarea.\n            const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n            multilangTextarea.innerHTML = savedText;\n            // Deselect the checkbox.\n            domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n            // Remove success message after a few seconds.\n            setTimeout(() => {\n                let multilangPill = domQuery(Selectors.statuses.multilang, key);\n                let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n         /**/\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n            searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang,\n         * Hence reload the page and change the site main lang.\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n           domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                let key = ckBox.getAttribute(\"data-key\");\n                let results = getCount(key);\n                wrdsc += results.wordCount;\n                cwos += results.charNumWithOutSpace;\n                cws += results.charNumWithSpace;\n            });\n            const wordCount = domQuery(Selectors.statuses.wordcount);\n            const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n            const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n            let current = cwos + config.usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n            if (current >= config.usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = domQuery(Selectors.sourcetexts.keys, key);\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Wrapper for radios value.\n         *\n         * @param {string} selector\n         * @returns {*}\n         */\n        const queryRadioValue = (selector) => {\n            return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n        };\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {element}\n         */\n        const domQuery = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelector(q);\n        };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n        /**\n         * Event listener to switch source lang.\n         * @param {*} cfg\n         */\n        const init = (cfg) => {\n            ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n                {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100});\n            Translation.init(cfg);\n            config = cfg;\n            Log.info(cfg);\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            saveAllBtn.disabled = true;\n            selectAllBtn.disabled = !Translation.isTranslatable();\n            checkboxes.forEach((node) => {\n                node.disabled = selectAllBtn.disabled;\n            });\n            showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Api to be used by the other modules.\n         */\n        return {\n            init: init\n        };\n});\n"],"names":["define","Log","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","JSON","parse","selector","undefined","type","checked","domQuery","value","deepl","glossaryId","handleClickEvent","e","target","closest","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","handleChangeEvent","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","keyid","getAttribute","key","keyidToKey","source","sourcetexts","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","domQueryAll","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","then","r","info","catch","reason","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","keyValidator","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","remove","setAttribute","statusstrings","node","replaceKey","parentrow","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","callTranslations","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","selected","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","warn","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","parent","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","innerHTML","setTimeout","multilangPill","prevTransStatus","message","errorMsg","document","createElement","appendChild","url","URL","window","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":"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"}