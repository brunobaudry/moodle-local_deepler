{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy'\n    ],\n    (Log, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy) => {\n\n        let config = {};\n        let langstrings = {};\n        let autotranslateButton = {};\n        let saveAllBtn = {};\n        let selectAllBtn = {};\n        let checkboxes = [];\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        let errordbtitle = '';\n        let settingsUI = {};\n        /**\n         * When a main error with the DB occurs.\n         *\n         * @param {string} error\n         * @param {int} status\n         */\n        const onDBFailed = (error, status) => {\n            showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n        };\n        /**\n         *\n         * @param {array} errors\n         */\n        const onDbSavedSuccess = (errors) => {\n            if (saveAllModal !== null && saveAllModal.isVisible) {\n                saveAllModal.hide();\n            }\n            if (errors.length > 0) {\n                let s = config.uistrings.errordbpartial;\n                s.replace('{$a}', errors.length);\n                showModal(errordbtitle, s, 'Alert');\n            }\n        };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n        /**\n         * Event factories.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', handleChangeEvent);\n            document.addEventListener('click', handleClickEvent);\n\n            // Translation events.\n            Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n            Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n            Events.on(Translation.ON_DB_FAILED, onDBFailed);\n            Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n            Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        };\n        /**\n         * Register UI elements.\n         */\n        const registerUI = () => {\n            try {\n                langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n                errordbtitle = langstrings.uistrings.errordbtitle;\n                saveAllBtn = domQuery(Selectors.actions.saveAll);\n                selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n                autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n                checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n                settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n                settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n                settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n                settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n                settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n                settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n                settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n                settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n                settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n                settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n                settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n                settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n                settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n                settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n                fetchCookies();\n            } catch (e) {\n                if (config.debug) {\n                    Log.error(e.message);\n                }\n            }\n        };\n        /**\n         * Get the stored settings for this course and lang pair.\n         */\n        const fetchCookies = () => {\n            if (config.targetlang) {\n                const glossaryCookie = Utils.getCookie(config);\n                const newCookie = Utils.getEncodedCookie(config);\n                if (newCookie !== null) {\n                    const settingsCookie = JSON.parse(newCookie);\n                    for (const selector in settingsUI) {\n                        if (settingsCookie[selector] !== undefined) {\n                            switch (settingsUI[selector].type) {\n                                case 'checkbox' :\n                                    settingsUI[selector].checked = settingsCookie[selector];\n                                    break;\n                                case 'radio' :\n                                    domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                                    break;\n                                default:\n                                    settingsUI[selector].value = settingsCookie[selector];\n                                    break;\n                            }\n\n                        }\n                    }\n                }\n                if (glossaryCookie !== null) {\n                    // Legacy cookie.\n                    settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n                }\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: config.uistrings.saveallmodaltitle,\n                body: config.uistrings.saveallmodalbody,\n            });\n            await saveAllModal.show();\n        };\n        /**\n         * Event listener for click events.\n         *\n         * @param {event} e\n         */\n        const handleClickEvent = (e) => {\n\n            if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n            }\n            if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                if (config.deeplsourcelang === config.targetlang || config.targetlang === undefined) {\n                    showModal('Cannot call deepl', `<p>Both languages are the same ${config.targetlang}</p>`);\n                } else {\n                    callDeeplServices();\n                }\n            }\n            if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                toggleAllCheckboxes(e);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                toggleAutotranslateButton();\n            }\n            if (e.target.closest(Selectors.actions.saveAll)) {\n                saveTranslations();\n            }\n            if (e.target.closest(Selectors.actions.validatorsBtns)) {\n                saveSingleTranslation(e);\n            }\n        };\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n        const handleChangeEvent = (e) => {\n            if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                switchTarget(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                switchSource(e);\n            }\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                showRows(Selectors.statuses.updated, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                showRows(Selectors.statuses.needsupdate, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                showRows(Selectors.statuses.hidden, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                onItemChecked(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceselect)) {\n                onSourceChange(e);\n            }\n        };\n        /**\n         * Multilang button handler\n         *\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = Utils.keyidToKey(keyid);\n            if (key === null) {\n                Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n            } else {\n                let source = domQuery(Selectors.sourcetexts.keys, key);\n                let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n                source.classList.toggle(\"show\");\n                multilang.classList.toggle(\"show\");\n            }\n        };\n\n        /**\n         * @returns void\n         */\n        const saveTranslations = () => {\n            const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n            if (selectedCheckboxes.length === 0) {\n                return;\n            }\n            // Prepare the UI for the save process.\n            saveAllBtn.disabled = true;\n            launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n                Log.error(reason);\n            });\n            // Prepare the data to be saved.\n            const data = [];\n            const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n            keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                    if (getIconStatus(key) === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDBitem(key));\n                    }\n                }\n            );\n            Translation.saveTranslations(data, config);\n        };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n        const saveSingleTranslation = (e)=> {\n            const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n            if (getIconStatus(key) === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                Translation.saveTranslations([prepareDBitem(key)], config);\n            }\n        };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n        const prepareDBitem = (key) => {\n            const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            return {\n                key: key,\n                courseid: config.courseid,\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\"),\n                cmid: element.getAttribute(\"data-cmid\"),\n            };\n        };\n        /**\n         * Listener for individual source change.\n         * @todo MDL-000 implement in v1.4.0\n         *\n         * @param {event} e\n         */\n        const onSourceChange = (e) => {\n            // Do check source and target and propose rephrase if PRO.\n            Log.info(e.target.getAttribute('data-key'));\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n\n         */\n        const onItemChecked = (e) => {\n            // Check/uncheck checkboxes changes the charcount and icon status.\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n                countWordAndChar();\n            }\n\n        };\n\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Get the translation row status icon.\n         *\n         * @param {string} key\n         * @returns {*}\n         */\n        const getIconStatus = (key)=> {\n            return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n        };\n        /**\n         * Change translation process status icon.\n         *\n         * @param {string} key\n         * @param {string} status\n         * @param {boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = domQuery(Selectors.actions.validatorBtn, key);\n            if (!isBtn) {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            } else {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Fetch the parent row of the translation.\n         * @param {Node} node\n         * @returns {*}\n         */\n        const getParentRow = (node) => {\n            return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        const showModal = (title, body, type = 'default') => {\n            Modal.create({\n                title: title,\n                body: body,\n                type: type,\n                show: true,\n                removeOnClose: true,\n            });\n        };\n        /**\n         * Event Listener when DeepL API call failed.\n         * @param {string} error\n         */\n        const onTranslationFailed = (error) => {\n            let s = langstrings.uistrings.deeplapiexception;\n            showModal(s, error, 'Alert');\n        };\n        /**\n         * Event listener for the translations process to dispaly the status.\n         *\n         * @param {string} key\n         */\n        const onItemTranslated = (key) => {\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.tosave, true);\n        };\n        /**\n         * Launch deepl services.\n         */\n        const callDeeplServices = () => {\n            const keys = [];\n            const [cookie, settings] = prepareSettingsAndCookieValues();\n            saveAllBtn.disabled = false;\n            domQueryAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    const key = ckBox.getAttribute(\"data-key\");\n                    const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                    const editor = findEditor(key);\n                    Translation.initTempForKey(\n                        key, editor,\n                        sourceText.getAttribute(\"data-sourcetext-raw\"),\n                        sourceText.getAttribute(\"data-filedtext-raw\"),\n                        domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                    );\n                    keys.push(key);\n                });\n            const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n            Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), 703);\n            Translation.callTranslations(keys, config, settings);\n        };\n        /**\n         * Parse the advanced settings UI and map the values for cookies and Deepl.\n         *\n         * @returns {[{},{}]}\n         */\n        const prepareSettingsAndCookieValues = () => {\n            let settings = {};\n            let cookie = {};\n            for (const selector in settingsUI) {\n                switch (settingsUI[selector].type) {\n                    case 'textarea':\n                        cookie[selector] = settingsUI[selector].value;\n                        // Deepl needs an array.\n                        settings[selector] = Utils.toJsonArray(cookie[selector]);\n                        break;\n                    case 'checkbox':\n                        settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                        break;\n                    case 'radio':\n                        settings[selector] = cookie[selector] = queryRadioValue(selector);\n                        break;\n                    default: // Text.\n                        settings[selector] = cookie[selector] = settingsUI[selector].value;\n                        break;\n                }\n            }\n            return [cookie, settings];\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = domQueryAll(selector);\n            const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n            const shoudlcheck = allSelected && selected;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                if (selected) {\n                    item.classList.remove(\"d-none\");\n                } else {\n                    item.classList.add(\"d-none\");\n                }\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                    if (single !== null) {\n                        single.checked = shoudlcheck;\n                        toggleStatus(k, false);\n                    }\n                    const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                    if (allchilds !== null && allchilds.length > 0) {\n                        allchilds.forEach(c => {\n                            const key = c.getAttribute('data-key');\n                            c.checked = shoudlcheck;\n                            toggleStatus(key, false);\n                        });\n                    }\n                } catch (e) {\n                    Log.warn(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {string} key\n         * @param {string} error\n         */\n        const onErrorMessageItem = (key, error) => {\n            Log.warn(`ui/errorMessageItem`);\n            Log.warn(key);\n            Log.warn(error);\n            const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            // Display granular error messages.\n            const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n            if (indexOfSET === -1) {\n                showErrorMessageForEditor(key, error);\n            } else {\n                let s = langstrings.uistrings.errortoolong;\n                showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n            }\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            let alertChild = domQuery('.alert-danger', '', parent);\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {string} savedText\n         */\n        const onSuccessMessageItem = (key, savedText) => {\n            domQuery(Selectors.editors.multiples.editorsWithKey, key)\n                .classList.add(\"local_deepler__success\");\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.success);\n            // Replace text in the multilang textarea.\n            const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n            multilangTextarea.innerHTML = savedText;\n            // Deselect the checkbox.\n            domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n            // Remove success message after a few seconds.\n            setTimeout(() => {\n                let multilangPill = domQuery(Selectors.statuses.multilang, key);\n                let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n         /**/\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n            searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang,\n         * Hence reload the page and change the site main lang.\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n           domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                let key = ckBox.getAttribute(\"data-key\");\n                let results = getCount(key);\n                wrdsc += results.wordCount;\n                cwos += results.charNumWithOutSpace;\n                cws += results.charNumWithSpace;\n            });\n            const wordCount = domQuery(Selectors.statuses.wordcount);\n            const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n            const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n            let current = cwos + config.usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n            if (current >= config.usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = domQuery(Selectors.sourcetexts.keys, key);\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Wrapper for radios value.\n         *\n         * @param {string} selector\n         * @returns {*}\n         */\n        const queryRadioValue = (selector) => {\n            return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n        };\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {element}\n         */\n        const domQuery = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelector(q);\n        };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n        /**\n         * Event listener to switch source lang.\n         * @param {*} cfg\n         */\n        const init = (cfg) => {\n            ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n                {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100});\n            Translation.init(cfg);\n            config = cfg;\n            Log.info(cfg);\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            saveAllBtn.disabled = true;\n            selectAllBtn.disabled = !Translation.isTranslatable();\n            checkboxes.forEach((node) => {\n                node.disabled = selectAllBtn.disabled;\n            });\n            showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Api to be used by the other modules.\n         */\n        return {\n            init: init\n        };\n});\n"],"names":["define","Log","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","JSON","parse","selector","undefined","type","checked","domQuery","value","deepl","glossaryId","handleClickEvent","e","target","closest","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","deeplsourcelang","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","handleChangeEvent","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","keyid","getAttribute","key","keyidToKey","source","sourcetexts","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","domQueryAll","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","then","r","info","catch","reason","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","keyValidator","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","remove","setAttribute","statusstrings","node","replaceKey","parentrow","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","callTranslations","toJsonArray","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","selected","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","warn","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","parent","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","innerHTML","setTimeout","multilangPill","prevTransStatus","message","errorMsg","document","createElement","appendChild","url","URL","window","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","tagHandling","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":"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"}