{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy'\n    ],\n    (Log, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy) => {\n        let hideiframes = {};\n        // Store removed iframes and their parent/next sibling for restoration.\n        let removedIframes = [];\n\n        let config = {};\n        let langstrings = {};\n        let autotranslateButton = {};\n        let saveAllBtn = {};\n        let selectAllBtn = {};\n        let checkboxes = [];\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        let errordbtitle = '';\n        let settingsUI = {};\n        /**\n         * When a main error with the DB occurs.\n         *\n         * @param {string} error\n         * @param {int} status\n         */\n        const onDBFailed = (error, status) => {\n            showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n        };\n        /**\n         *\n         * @param {array} errors\n         */\n        const onDbSavedSuccess = (errors) => {\n            if (saveAllModal !== null && saveAllModal.isVisible) {\n                saveAllModal.hide();\n            }\n            if (errors.length > 0) {\n                let s = langstrings.uistrings.errordbpartial;\n                s = s.replace('{$a}', errors.length);\n                showModal(errordbtitle, s, 'Alert');\n            }\n        };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n        /**\n         * Event factories.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', handleChangeEvent);\n            document.addEventListener('click', handleClickEvent);\n\n            // Translation events.\n            Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n            Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n            Events.on(Translation.ON_DB_FAILED, onDBFailed);\n            Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n            Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        };\n        /**\n         * Register UI elements.\n         */\n        const registerUI = () => {\n            try {\n                hideiframes = domQuery(Selectors.actions.hideiframes);\n                langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n                errordbtitle = langstrings.uistrings.errordbtitle;\n                saveAllBtn = domQuery(Selectors.actions.saveAll);\n                selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n                autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n                checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n                settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n                settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n                settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n                settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n                settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n                settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n                settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n                settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n                settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n                settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n                settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n                if (!config.isfree) {\n                    settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n                }\n                settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n                settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n                fetchCookies();\n            } catch (e) {\n                if (config.debug) {\n                    Log.error(e.message);\n                }\n            }\n        };\n        /**\n         * Get the stored settings for this course and lang pair.\n         */\n        const fetchCookies = () => {\n            if (!config.targetlang) {\n                return;\n            }\n            const glossaryCookie = Utils.getCookie(config);\n            const newCookie = Utils.getEncodedCookie(config);\n            if (newCookie !== null) {\n                const settingsCookie = JSON.parse(newCookie);\n                for (const selector in settingsUI) {\n                    if (settingsCookie[selector] !== undefined) {\n                        switch (settingsUI[selector].type) {\n                            case 'checkbox' :\n                                settingsUI[selector].checked = settingsCookie[selector];\n                                break;\n                            case 'radio' :\n                                domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                                break;\n                            default:\n                                settingsUI[selector].value = settingsCookie[selector];\n                                break;\n                        }\n\n                    }\n                }\n            }\n            if (glossaryCookie !== null) {\n                // Legacy cookie.\n                settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: langstrings.uistrings.saveallmodaltitle,\n                body: langstrings.uistrings.saveallmodalbody,\n            });\n            await saveAllModal.show();\n        };\n        /**\n         * Event listener for click events.\n         *\n         * @param {event} e\n         */\n        const handleClickEvent = (e) => {\n\n            if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n            }\n            if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                    showModal('Cannot call deepl', `<p>${langstrings.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n                } else {\n                    callDeeplServices();\n                }\n            }\n            if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                toggleAllCheckboxes(e);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                toggleAutotranslateButton();\n            }\n            if (e.target.closest(Selectors.actions.saveAll)) {\n                saveTranslations();\n            }\n            if (e.target.closest(Selectors.actions.validatorsBtns)) {\n                saveSingleTranslation(e);\n            }\n        };\n\n        /**\n         * Toggle iFrames in sourcetexts.\n         * @param {boolean} isChecked\n         */\n        function doHideiframes(isChecked) {\n            Log.info('doHideiframes');\n            Log.info(isChecked);\n            const allIframes = domQueryAll(Selectors.sourcetexts.iframes);\n\n            if (isChecked && allIframes.length > 0) {\n                removedIframes = [];\n                allIframes.forEach(iframe => {\n                    removedIframes.push({\n                        parent: iframe.parentNode,\n                        nextSibling: iframe.nextSibling,\n                        html: iframe.outerHTML\n                    });\n                    iframe.remove();\n                });\n            } else if (removedIframes.length > 0) {\n                // Restore all previously removed iframes.\n                removedIframes.forEach(info => {\n                    // Create a new element from the stored HTML.\n                    const tempDiv = document.createElement('div');\n                    tempDiv.innerHTML = info.html;\n                    const newIframe = tempDiv.firstChild;\n                    // Insert it back into the DOM\n                    if (info.nextSibling) {\n                        info.parent.insertBefore(newIframe, info.nextSibling);\n                    } else {\n                        info.parent.appendChild(newIframe);\n                    }\n                });\n                removedIframes = [];\n            }\n        }\n\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n        const handleChangeEvent = (e) => {\n            window.console.info('CHANGE');\n            if (e.target.closest(Selectors.actions.hideiframes)) {\n                doHideiframes(e);\n            }\n            if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                switchTarget(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                switchSource(e);\n            }\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                showRows(Selectors.statuses.updated, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                showRows(Selectors.statuses.needsupdate, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                showRows(Selectors.statuses.hidden, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                onItemChecked(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceselect)) {\n                onSourceChange(e);\n            }\n        };\n        /**\n         * Multilang button handler\n         *\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = Utils.keyidToKey(keyid);\n            if (key === null) {\n                Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n            } else {\n                let source = domQuery(Selectors.sourcetexts.keys, key);\n                let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n                source.classList.toggle(\"show\");\n                multilang.classList.toggle(\"show\");\n            }\n        };\n\n        /**\n         * @returns void\n         */\n        const saveTranslations = () => {\n            const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n            if (selectedCheckboxes.length === 0) {\n                return;\n            }\n            // Prepare the UI for the save process.\n            saveAllBtn.disabled = true;\n            launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n                Log.error(reason);\n            });\n            // Prepare the data to be saved.\n            const data = [];\n            const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n            keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                    if (getIconStatus(key) === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDBitem(key));\n                    }\n                }\n            );\n            Translation.saveTranslations(data, config);\n        };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n        const saveSingleTranslation = (e)=> {\n            const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n            if (getIconStatus(key) === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                Translation.saveTranslations([prepareDBitem(key)], config);\n            }\n        };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n        const prepareDBitem = (key) => {\n            const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            return {\n                key: key,\n                courseid: config.courseid,\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\"),\n                cmid: element.getAttribute(\"data-cmid\"),\n            };\n        };\n        /**\n         * Listener for individual source change.\n         * @todo MDL-000 implement in v1.4.0\n         *\n         * @param {event} e\n         */\n        const onSourceChange = (e) => {\n            // Do check source and target and propose rephrase if PRO.\n            Log.info(e.target.getAttribute('data-key'));\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n         */\n        const onItemChecked = (e) => {\n            // Check/uncheck checkboxes changes the charcount and icon status.\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n                countWordAndChar();\n            }\n        };\n\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Get the translation row status icon.\n         *\n         * @param {string} key\n         * @returns {*}\n         */\n        const getIconStatus = (key)=> {\n            return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n        };\n        /**\n         * Change translation process status icon.\n         *\n         * @param {string} key\n         * @param {string} status\n         * @param {boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = domQuery(Selectors.actions.validatorBtn, key);\n            if (!isBtn) {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            } else {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Fetch the parent row of the translation.\n         * @param {Node} node\n         * @returns {*}\n         */\n        const getParentRow = (node) => {\n            return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        const showModal = (title, body, type = 'default') => {\n            Modal.create({\n                title: title,\n                body: body,\n                type: type,\n                show: true,\n                removeOnClose: true,\n            });\n        };\n        /**\n         * Event Listener when DeepL API call failed.\n         * @param {string} error\n         */\n        const onTranslationFailed = (error) => {\n            let s = langstrings.uistrings.deeplapiexception;\n            showModal(s, error, 'Alert');\n        };\n        /**\n         * Event listener for the translations process to dispaly the status.\n         *\n         * @param {string} key\n         */\n        const onItemTranslated = (key) => {\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.tosave, true);\n        };\n        /**\n         * Launch deepl services.\n         */\n        const callDeeplServices = () => {\n            const keys = [];\n            const [cookie, settings] = prepareSettingsAndCookieValues();\n            saveAllBtn.disabled = false;\n            domQueryAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    const key = ckBox.getAttribute(\"data-key\");\n                    const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                    const editor = findEditor(key);\n                    Translation.initTempForKey(\n                        key, editor,\n                        sourceText.getAttribute(\"data-sourcetext-raw\"),\n                        sourceText.getAttribute(\"data-filedtext-raw\"),\n                        domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                    );\n                    keys.push(key);\n                });\n            const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n            Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), 703);\n            Translation.callTranslations(keys, config, settings);\n        };\n        /**\n         * Parse the advanced settings UI and map the values for cookies and Deepl.\n         *\n         * @returns {[{},{}]}\n         */\n        const prepareSettingsAndCookieValues = () => {\n            let settings = {};\n            let cookie = {};\n            for (const selector in settingsUI) {\n                if (settingsUI[selector] === null) {\n                    Log.warn(`prepareSettingsAndCookieValues. Could not find selector ${selector}`);\n                    window.console.warn(settingsUI);\n                } else {\n                    switch (settingsUI[selector].type) {\n                        case 'textarea':\n                            cookie[selector] = settingsUI[selector].value;\n                            // Deepl needs an array.\n                            settings[selector] = Utils.toJsonArray(cookie[selector]);\n                            break;\n                        case 'checkbox':\n                            if (selector === Selectors.deepl.tagHandling) {\n                                cookie[selector] = settingsUI[selector].checked;\n                                // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                                settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                            } else {\n                                settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                            }\n                            break;\n                        case 'radio':\n                            settings[selector] = cookie[selector] = queryRadioValue(selector);\n                            break;\n                        default: // Text.\n                            settings[selector] = cookie[selector] = settingsUI[selector].value;\n                            break;\n                    }\n                }\n            }\n            return [cookie, settings];\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = domQueryAll(selector);\n            const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n            const shoudlcheck = allSelected && selected;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                if (selected) {\n                    item.classList.remove(\"d-none\");\n                } else {\n                    item.classList.add(\"d-none\");\n                }\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                    if (single !== null) {\n                        single.checked = shoudlcheck;\n                        toggleStatus(k, false);\n                    }\n                    const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                    if (allchilds !== null && allchilds.length > 0) {\n                        allchilds.forEach(c => {\n                            const key = c.getAttribute('data-key');\n                            c.checked = shoudlcheck;\n                            toggleStatus(key, false);\n                        });\n                    }\n                } catch (e) {\n                    Log.warn(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {string} key\n         * @param {string} error\n         */\n        const onErrorMessageItem = (key, error) => {\n            Log.warn(`ui/errorMessageItem`);\n            Log.warn(key);\n            Log.warn(error);\n            const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            // Display granular error messages.\n            const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n            if (indexOfSET === -1) {\n                showErrorMessageForEditor(key, error);\n            } else {\n                let s = langstrings.uistrings.errortoolong;\n                showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n            }\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            let alertChild = domQuery('.alert-danger', '', parent);\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {string} savedText\n         */\n        const onSuccessMessageItem = (key, savedText) => {\n            domQuery(Selectors.editors.multiples.editorsWithKey, key)\n                .classList.add(\"local_deepler__success\");\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.success);\n            // Replace text in the multilang textarea.\n            const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n            multilangTextarea.innerHTML = savedText;\n            // Deselect the checkbox.\n            domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n            // Remove success message after a few seconds.\n            setTimeout(() => {\n                let multilangPill = domQuery(Selectors.statuses.multilang, key);\n                let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n         /**/\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n            searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang,\n         * Hence reload the page and change the site main lang.\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n           domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                let key = ckBox.getAttribute(\"data-key\");\n                let results = getCount(key);\n                wrdsc += results.wordCount;\n                cwos += results.charNumWithOutSpace;\n                cws += results.charNumWithSpace;\n            });\n            const wordCount = domQuery(Selectors.statuses.wordcount);\n            const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n            const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n            let current = cwos + config.usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n            if (current >= config.usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = domQuery(Selectors.sourcetexts.keys, key);\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Wrapper for radios value.\n         *\n         * @param {string} selector\n         * @returns {*}\n         */\n        const queryRadioValue = (selector) => {\n            return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n        };\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {element}\n         */\n        const domQuery = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelector(q);\n        };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n        /**\n         * Event listener to switch source lang.\n         * @param {*} cfg\n         */\n        const init = (cfg) => {\n            ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n                {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100});\n            Translation.init(cfg);\n            config = cfg;\n            Log.info(cfg);\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            doHideiframes(hideiframes.checked);\n            saveAllBtn.disabled = true;\n            selectAllBtn.disabled = !Translation.isTranslatable();\n            checkboxes.forEach((node) => {\n                node.disabled = selectAllBtn.disabled;\n            });\n            showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Api to be used by the other modules.\n         */\n        return {\n            init: init\n        };\n});\n"],"names":["define","Log","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","hideiframes","removedIframes","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","JSON","parse","selector","undefined","type","checked","domQuery","value","deepl","glossaryId","handleClickEvent","e","target","closest","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","doHideiframes","isChecked","info","allIframes","domQueryAll","sourcetexts","iframes","forEach","iframe","push","parent","parentNode","nextSibling","html","outerHTML","remove","tempDiv","document","createElement","innerHTML","newIframe","firstChild","insertBefore","appendChild","handleChangeEvent","window","console","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","keyid","getAttribute","key","keyidToKey","source","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","then","r","catch","reason","data","Array","from","map","dataset","getIconStatus","tosave","hideErrorMessage","prepareDBitem","keyValidator","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","setAttribute","statusstrings","node","replaceKey","parentrow","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","callTranslations","warn","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","selected","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","setTimeout","multilangPill","prevTransStatus","message","errorMsg","url","URL","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":"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"}