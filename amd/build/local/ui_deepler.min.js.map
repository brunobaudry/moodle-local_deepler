{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy'\n    ],\n    (Log, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy) => {\n\n    let config = {};\n    let langstrings = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    // Let sourceLang = \"\";\n    // let targetLang = \"\";\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n    let glossaryId = {};\n\n    const onDBFailed = (error, status) => {\n        showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n    };\n    const onDbSavedSuccess = (errors) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        if (errors.length > 0) {\n            let s = config.uistrings.errordbpartial;\n            s.replace('{$a}', errors.length);\n            showModal(errordbtitle, s, 'Alert');\n        }\n    };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n        Events.on(Translation.ON_DB_FAILED, onDBFailed);\n        Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n        Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n    };\n    /**\n     * Register UI elements.\n     */\n    const registerUI = () => {\n        try {\n            langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n            errordbtitle = langstrings.uistrings.errordbtitle;\n            saveAllBtn = domQuery(Selectors.actions.saveAll);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n            glossaryId = domQuery(Selectors.deepl.glossaryId);\n            const glossaryCookie = Utils.getCookie(Utils.COOKIE_PREFIX + config.currentlang + config.targetlang + config.courseid);\n            if (glossaryCookie !== null) {\n                glossaryId.value = glossaryCookie;\n            }\n\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @returns {Promise<void>}\n     * ui.js\n     */\n    const launchModal = async() => {\n        saveAllModal = await Modal.create({\n            title: config.uistrings.saveallmodaltitle,\n            body: config.uistrings.saveallmodalbody,\n        });\n        await saveAllModal.show();\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.deeplsourcelang === config.targetlang || config.targetlang === undefined) {\n                showModal('Cannot call deepl', `<p>Both languages are the same ${config.targetlang}</p>`);\n            } else {\n                callDeeplServices();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n    };\n\n\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n    const handleChangeEvent = (e) => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showHidden)) {\n            showRows(Selectors.statuses.hidden, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceselect)) {\n            onSourceChange(e);\n        }\n    };\n    /**\n     * Multilang button handler\n     * @param {Event} e Event\n     * ui.js ok\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        if (key === null) {\n            Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n        } else {\n            let source = domQuery(Selectors.sourcetexts.keys, key);\n            let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n            source.classList.toggle(\"show\");\n            multilang.classList.toggle(\"show\");\n        }\n    };\n\n\n        /**\n         * @returns\n         */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        // Prepare the UI for the save process.\n        saveAllBtn.disabled = true;\n        launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n            Log.error(reason);\n        });\n        // Prepare the data to be saved.\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n            // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n    const prepareDBitem = (key) => {\n        Log.debug(`ui_deepler/x/prepareDBitem::key`);\n        Log.debug(key);\n        Log.debug(Translation.debugTemp(key));\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n            cmid: element.getAttribute(\"data-cmid\"),\n        };\n    };\n    /**\n     * Listener for individual source change.\n     * @todo MDL-000 implement in v1.4.0\n     *\n     * @param {event} e\n     */\n    const onSourceChange = (e) => {\n        // Do check source and target and propose rephrase if PRO.\n        Log.info(e.target.getAttribute('data-key'));\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     * ui.js\n     */\n    const onItemChecked = (e) => {\n        // Check/uncheck checkboxes changes the charcount and icon status.\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n            countWordAndChar();\n        }\n\n    };\n\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        // Check/uncheck checkboxes\n        if (e.target.checked) {\n            checkboxes.forEach((i) => {\n                // Toggle check box upon visibility\n                i.checked = !getParentRow(i).classList.contains('d-none');\n                toggleStatus(i.getAttribute('data-key'), i.checked);\n            });\n        } else {\n            checkboxes.forEach((i) => {\n                i.checked = false;\n                toggleStatus(i.getAttribute('data-key'), false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        autotranslateButton.disabled = true;\n        for (let i in checkboxes) {\n            let e = checkboxes[i];\n            if (e.checked) {\n                autotranslateButton.disabled = false;\n                break;\n            }\n        }\n    };\n    /**\n     *Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body, type = 'default') => {\n        Modal.create({\n            title: title,\n            body: body,\n            type: type,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n    /**\n     * Event Listener when DeepL API call failed.\n     * @param {string} error\n     */\n    const onTranslationFailed = (error) => {\n        let s = langstrings.uistrings.deeplapiexception;\n        showModal(s, error, 'Alert');\n    };\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch deepl services.\n     */\n    const callDeeplServices = () => {\n        const keys = [];\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                const key = ckBox.getAttribute(\"data-key\");\n                const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                const editor = findEditor(key);\n                Translation.initTempForKey(\n                    key, editor,\n                    sourceText.getAttribute(\"data-sourcetext-raw\"),\n                    sourceText.getAttribute(\"data-filedtext-raw\"),\n                    domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                );\n                keys.push(key);\n            });\n        Translation.callTranslations(keys, config);\n    };\n\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         * ui.js\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n    /**\n     * Shows/hides rows.\n     * @param {string} selector\n     * @param {boolean} selected\n     */\n    const showRows = (selector, selected) => {\n        const items = domQueryAll(selector);\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n        const shoudlcheck = allSelected && selected;\n        items.forEach((item) => {\n            let k = item.getAttribute('data-row-id');\n            if (selected) {\n                item.classList.remove(\"d-none\");\n            } else {\n                item.classList.add(\"d-none\");\n            }\n            // When a row is toggled then we don't want it to be selected and sent from translation.\n            try {\n                const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                if (single !== null) {\n                    single.checked = shoudlcheck;\n                    toggleStatus(k, false);\n                }\n                const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                if (allchilds !== null && allchilds.length > 0) {\n                    allchilds.forEach(c => {\n                        const key = c.getAttribute('data-key');\n                        c.checked = shoudlcheck;\n                        toggleStatus(key, false);\n                    });\n                }\n            } catch (e) {\n                Log.warn(`${k} translation is disalbled`);\n            }\n\n        });\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {string} key\n     * @param {string} error\n     */\n    const onErrorMessageItem = (key, error) => {\n        Log.warn(`ui/errorMessageItem`);\n        Log.warn(key);\n        Log.warn(error);\n        const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        // Display granular error messages.\n        const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n        if (indexOfSET === -1) {\n            showErrorMessageForEditor(key, error);\n        } else {\n            let s = langstrings.uistrings.errortoolong;\n            showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n        }\n    };\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {string} savedText\n     */\n    const onSuccessMessageItem = (key, savedText) => {\n        domQuery(Selectors.editors.multiples.editorsWithKey, key)\n            .classList.add(\"local_deepler__success\");\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.success);\n        // Replace text in the multilang textarea.\n        const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n        multilangTextarea.innerHTML = savedText;\n        // Deselect the checkbox.\n        domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n        // Remove success message after a few seconds.\n        setTimeout(() => {\n            let multilangPill = domQuery(Selectors.statuses.multilang, key);\n            let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n     /**/\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     * ui.js\n     */\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0;\n        let cws = 0;\n        let cwos = 0;\n       domQueryAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n        let current = cwos + config.usage.character.count;\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n        if (current >= config.usage.character.limit) {\n            parent.classList.remove('alert-success');\n            parent.classList.add('alert-danger');\n        } else {\n            parent.classList.add('alert-success');\n            parent.classList.remove('alert-danger');\n        }\n    };\n    /**\n     * Get the editor container based on recieved current user's editor preference.\n     *\n     * @param {string} key Translation Key\n     */\n    const findEditor = (key) => {\n        let e = domQuery(Selectors.editors.types.basic, key);\n        let et = 'basic';\n        if (e === null) {\n            let r = null;\n            let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n            if (editorTab.indexOf(config.userPrefs) === -1) {\n                Log.warn('Unsupported editor ' + config.userPrefs);\n            } else {\n                // First let's try the current editor.\n                try {\n                    r = findEditorByType(key, config.userPrefs);\n                } catch (error) {\n                    // Content was edited by another editor.\n                    Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                }\n            }\n            return r;\n        } else {\n            return {editor: e, editorType: et};\n        }\n    };\n    /**\n     * @param {string} key\n     * @param {object} editorType\n     * @returns {{editor: object, editorType: string}}\n     */\n    const findEditorByType = (key, editorType) => {\n        let et = 'basic';\n        let ed = null;\n        switch (editorType) {\n            case \"atto\" :\n                et = 'iframe';\n                ed = domQuery(Selectors.editors.types.atto, key);\n                break;\n            case \"tiny\":\n                et = 'iframe';\n                ed = findTinyInstanceByKey(key);\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                ed = domQuery(Selectors.editors.types.other, key);\n                break;\n        }\n        return {editor: ed, editorType: et};\n    };\n    /**\n     * Finds TinyMCE instance.\n     * @param {string} key\n     * @returns {Node}\n     */\n    const findTinyInstanceByKey = (key)=> {\n        let editor = null;\n        TinyMCE.getAllInstances().every((k, v)=>{\n            if (v.attributes.name.value.indexOf(key) == 0) {\n                editor = k.getBody();\n                return false;\n            }\n            return true;\n        });\n        return editor;\n    };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {NodeList}\n     */\n    const domQueryAll = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelectorAll(q);\n    };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n        ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n            {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100});\n        Translation.init(cfg);\n        Log.debug(`ui_deepler/x/init::Translation.moodleTargetToSave`);\n        Log.debug(Translation.moodleTargetToSave);\n        config = cfg;\n        Log.info(cfg);\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n        showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n    };\n    return {\n        init: init\n    };\n});\n"],"names":["define","Log","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","glossaryId","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","handleClickEvent","e","target","closest","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","deeplsourcelang","targetlang","undefined","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","handleChangeEvent","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","keyid","getAttribute","key","keyidToKey","source","domQuery","sourcetexts","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","domQueryAll","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","then","r","info","catch","reason","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","keyValidator","debug","debugTemp","element","editors","multiples","editorsWithKey","courseid","id","parseInt","tid","table","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","remove","setAttribute","statusstrings","node","replaceKey","parentrow","type","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","value","callTranslations","initTemp","totranslate","translated","failed","success","saved","selector","selected","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","warn","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","parent","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","innerHTML","setTimeout","multilangPill","prevTransStatus","message","errorMsg","document","createElement","appendChild","url","URL","window","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","moodleTargetToSave","JSON","parse","deepl","glossaryCookie","getCookie","COOKIE_PREFIX","currentlang","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":"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"}