{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy'\n    ],\n    (Log, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy) => {\n\n    let config = {};\n    let langstrings = {};\n    let autotranslateButton = {};\n    let saveAllBtn = {};\n    let selectAllBtn = {};\n    let checkboxes = [];\n    let format = new Intl.NumberFormat();\n    let saveAllModal = {};\n    let errordbtitle = '';\n    let settingsUI = {};\n\n    const onDBFailed = (error, status) => {\n        showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n    };\n    const onDbSavedSuccess = (errors) => {\n        if (saveAllModal !== null && saveAllModal.isVisible) {\n            saveAllModal.hide();\n        }\n        if (errors.length > 0) {\n            let s = config.uistrings.errordbpartial;\n            s.replace('{$a}', errors.length);\n            showModal(errordbtitle, s, 'Alert');\n        }\n    };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n    /**\n     * Event factories.\n     */\n    const registerEventListeners = () => {\n        document.addEventListener('change', handleChangeEvent);\n        document.addEventListener('click', handleClickEvent);\n\n        // Translation events.\n        Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n        Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n        Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n        Events.on(Translation.ON_DB_FAILED, onDBFailed);\n        Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n        Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n    };\n    /**\n     * Register UI elements.\n     */\n    const registerUI = () => {\n        try {\n            langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n            errordbtitle = langstrings.uistrings.errordbtitle;\n            saveAllBtn = domQuery(Selectors.actions.saveAll);\n            selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n            autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n            checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n            settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n            settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n            settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n            settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n            settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n            settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n            settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n            settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n            settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n            settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n            settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n            settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n            settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n            settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n            fetchCookies();\n        } catch (e) {\n            if (config.debug) {\n                Log.error(e.message);\n            }\n        }\n    };\n    const fetchCookies = () => {\n        if (config.targetlang) {\n            const oldCookieName = Utils.COOKIE_PREFIX + config.currentlang + config.targetlang + config.courseid;\n            const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n            Log.debug(`ui_deepler/x/fetchCookies::oldCookieName`);\n            Log.debug(oldCookieName);\n            Log.debug(newCookiename);\n            const glossaryCookie = Utils.getCookie(oldCookieName);\n            const newCookie = Utils.getEncodedCookie(newCookiename);\n            if (newCookie !== null) {\n                Log.debug(`ui_deepler/x/fetchCookies::newCookie`);\n                Log.debug(newCookie);\n                const settingsCookie = JSON.parse(newCookie);\n                for (const selector in settingsUI) {\n                    Log.debug(`ui_deepler/x/fetchCookies::selector`);\n                    Log.debug(selector);\n                    Log.debug(settingsCookie[selector]);\n                    Log.debug(settingsUI[selector].type);\n                    if (settingsCookie[selector] !== undefined) {\n                        switch (settingsUI[selector].type) {\n                            case 'checkbox' :\n                                settingsUI[selector].checked = settingsCookie[selector];\n                                break;\n                            case 'radio' :\n                                domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                                break;\n                            default:\n                                settingsUI[selector].value = settingsCookie[selector];\n                                break;\n                        }\n\n                    }\n                }\n            }\n            if (glossaryCookie !== null) {\n                // Legacy cookie.\n                settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n            }\n        }\n    };\n    /**\n     * Opens a modal infobox to warn user trunks of fields are saving.\n     * @returns {Promise<void>}\n     * ui.js\n     */\n    const launchModal = async() => {\n        saveAllModal = await Modal.create({\n            title: config.uistrings.saveallmodaltitle,\n            body: config.uistrings.saveallmodalbody,\n        });\n        await saveAllModal.show();\n    };\n    /**\n     * Event listener for click events.\n     *\n     * @param {event} e\n     */\n    const handleClickEvent = (e) => {\n\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.deeplsourcelang === config.targetlang || config.targetlang === undefined) {\n                showModal('Cannot call deepl', `<p>Both languages are the same ${config.targetlang}</p>`);\n            } else {\n                callDeeplServices();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            toggleAutotranslateButton();\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            saveTranslations();\n        }\n        if (e.target.closest(Selectors.actions.validatorsBtns)) {\n            saveSingleTranslation(e);\n        }\n    };\n    /**\n     * Event listener for change events.\n     * @param {event} e\n     */\n    const handleChangeEvent = (e) => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showHidden)) {\n            showRows(Selectors.statuses.hidden, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceselect)) {\n            onSourceChange(e);\n        }\n    };\n    /**\n     * Multilang button handler\n     * @param {Event} e Event\n     * ui.js ok\n     */\n    const onToggleMultilang = (e) => {\n        let keyid = e.getAttribute('aria-controls');\n        let key = Utils.keyidToKey(keyid);\n        if (key === null) {\n            Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n        } else {\n            let source = domQuery(Selectors.sourcetexts.keys, key);\n            let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n            source.classList.toggle(\"show\");\n            multilang.classList.toggle(\"show\");\n        }\n    };\n\n\n        /**\n         * @returns\n         */\n    const saveTranslations = () => {\n        const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n        if (selectedCheckboxes.length === 0) {\n            return;\n        }\n        // Prepare the UI for the save process.\n        saveAllBtn.disabled = true;\n        launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n            Log.error(reason);\n        });\n        // Prepare the data to be saved.\n        const data = [];\n        const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n        keys.forEach((key) => {\n            // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                if (getIconStatus(key) === Selectors.statuses.tosave) {\n                    hideErrorMessage(key);\n                    data.push(prepareDBitem(key));\n                }\n            }\n        );\n        Translation.saveTranslations(data, config);\n    };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n    const saveSingleTranslation = (e)=> {\n        const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n        if (getIconStatus(key) === Selectors.statuses.tosave) {\n            hideErrorMessage(key);\n            Translation.saveTranslations([prepareDBitem(key)], config);\n        }\n    };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n    const prepareDBitem = (key) => {\n        const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        return {\n            key: key,\n            courseid: config.courseid,\n            id: parseInt(element.getAttribute(\"data-id\")),\n            tid: element.getAttribute(\"data-tid\"),\n            table: element.getAttribute(\"data-table\"),\n            field: element.getAttribute(\"data-field\"),\n            cmid: element.getAttribute(\"data-cmid\"),\n        };\n    };\n    /**\n     * Listener for individual source change.\n     * @todo MDL-000 implement in v1.4.0\n     *\n     * @param {event} e\n     */\n    const onSourceChange = (e) => {\n        // Do check source and target and propose rephrase if PRO.\n        Log.info(e.target.getAttribute('data-key'));\n    };\n    /**\n     * Event listener for selection checkboxes.\n     * @param {Event} e\n     * ui.js\n     */\n    const onItemChecked = (e) => {\n        // Check/uncheck checkboxes changes the charcount and icon status.\n        if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n            toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n            countWordAndChar();\n        }\n\n    };\n\n    /**\n     * Toggle checkboxes\n     * @param {Event} e Event\n     */\n    const toggleAllCheckboxes = (e) => {\n        // Check/uncheck checkboxes\n        if (e.target.checked) {\n            checkboxes.forEach((i) => {\n                // Toggle check box upon visibility\n                i.checked = !getParentRow(i).classList.contains('d-none');\n                toggleStatus(i.getAttribute('data-key'), i.checked);\n            });\n        } else {\n            checkboxes.forEach((i) => {\n                i.checked = false;\n                toggleStatus(i.getAttribute('data-key'), false);\n            });\n        }\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Toggle Autotranslate Button\n     */\n    const toggleAutotranslateButton = () => {\n        autotranslateButton.disabled = true;\n        for (let i in checkboxes) {\n            let e = checkboxes[i];\n            if (e.checked) {\n                autotranslateButton.disabled = false;\n                break;\n            }\n        }\n    };\n    /**\n     *Get the translation row status icon.\n     *\n     * @param {string} key\n     * @returns {*}\n     */\n    const getIconStatus = (key)=> {\n        return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n    };\n    /**\n     * Change translation process status icon.\n     *\n     * @param {string} key\n     * @param {string} status\n     * @param {boolean} isBtn\n     */\n    const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n        let icon = domQuery(Selectors.actions.validatorBtn, key);\n        if (!isBtn) {\n            if (!icon.classList.contains('disable')) {\n                icon.classList.add('disable');\n            }\n            if (icon.classList.contains('btn')) {\n                icon.classList.remove('btn');\n                icon.classList.remove('btn-outline-secondary');\n            }\n        } else {\n            if (!icon.classList.contains('btn')) {\n                icon.classList.add('btn');\n                icon.classList.add('btn-outline-secondary');\n            }\n            if (icon.classList.contains('disable')) {\n                icon.classList.remove('disable');\n            }\n        }\n        icon.setAttribute('role', isBtn ? 'button' : 'status');\n        icon.setAttribute('data-status', status);\n        icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n    };\n    /**\n     * Fetch the parent row of the translation.\n     * @param {Node} node\n     * @returns {*}\n     */\n    const getParentRow = (node) => {\n        return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n    };\n    const showModal = (title, body, type = 'default') => {\n        Modal.create({\n            title: title,\n            body: body,\n            type: type,\n            show: true,\n            removeOnClose: true,\n        });\n    };\n    /**\n     * Event Listener when DeepL API call failed.\n     * @param {string} error\n     */\n    const onTranslationFailed = (error) => {\n        let s = langstrings.uistrings.deeplapiexception;\n        showModal(s, error, 'Alert');\n    };\n    /**\n     * Event listener for the translations process to dispaly the status.\n     *\n     * @param {string} key\n     */\n    const onItemTranslated = (key) => {\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.tosave, true);\n    };\n    /**\n     * Launch deepl services.\n     */\n    const callDeeplServices = () => {\n        const keys = [];\n        const [cookie, settings] = prepareSettingsAndCookieValues();\n        saveAllBtn.disabled = false;\n        domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                const key = ckBox.getAttribute(\"data-key\");\n                const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                const editor = findEditor(key);\n                Translation.initTempForKey(\n                    key, editor,\n                    sourceText.getAttribute(\"data-sourcetext-raw\"),\n                    sourceText.getAttribute(\"data-filedtext-raw\"),\n                    domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                );\n                keys.push(key);\n            });\n        const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n        Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), 703);\n        Translation.callTranslations(keys, config, settings);\n    };\n    /**\n     * Parse the advanced settings UI and map the values for cookies and Deepl.\n     *\n     * @returns {[{},{}]}\n     */\n    const prepareSettingsAndCookieValues = () => {\n        let settings = {};\n        let cookie = {};\n        for (const selector in settingsUI) {\n            switch (settingsUI[selector].type) {\n                case 'textarea':\n                    cookie[selector] = settingsUI[selector].value;\n                    // Deepl needs an array.\n                    settings[selector] = Utils.toJsonArray(cookie[selector]);\n                    break;\n                case 'checkbox':\n                    settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                    break;\n                case 'radio':\n                    settings[selector] = cookie[selector] = queryRadioValue(selector);\n                    break;\n                default: // Text.\n                    settings[selector] = cookie[selector] = settingsUI[selector].value;\n                    break;\n            }\n        }\n        return [cookie, settings];\n    };\n    /**\n     * Factory to display process' statuses for each item.\n     *\n     * @param {String} key\n     * @param {Boolean} checked\n     * ui.js\n     */\n    const toggleStatus = (key, checked) => {\n        const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n        switch (status) {\n            case Selectors.statuses.wait :\n                Translation.initTemp(key); // Reset the translation.\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                    // RefreshTempTranslation(key);\n                }\n                break;\n            case Selectors.statuses.totranslate :\n                // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                if (checked && Translation.translated[key]) {\n                    setIconStatus(key, Selectors.statuses.tosave, true);\n                } else {\n                    setIconStatus(key, Selectors.statuses.wait);\n                }\n                break;\n            case Selectors.statuses.tosave :\n                if (!checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.failed :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                break;\n            case Selectors.statuses.success :\n                break;\n            case Selectors.statuses.saved :\n                if (checked) {\n                    setIconStatus(key, Selectors.statuses.totranslate);\n                }\n                Translation.initTemp(key);\n                break;\n        }\n    };\n    /**\n     * Shows/hides rows.\n     * @param {string} selector\n     * @param {boolean} selected\n     */\n    const showRows = (selector, selected) => {\n        const items = domQueryAll(selector);\n        const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n        const shoudlcheck = allSelected && selected;\n        items.forEach((item) => {\n            let k = item.getAttribute('data-row-id');\n            if (selected) {\n                item.classList.remove(\"d-none\");\n            } else {\n                item.classList.add(\"d-none\");\n            }\n            // When a row is toggled then we don't want it to be selected and sent from translation.\n            try {\n                const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                if (single !== null) {\n                    single.checked = shoudlcheck;\n                    toggleStatus(k, false);\n                }\n                const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                if (allchilds !== null && allchilds.length > 0) {\n                    allchilds.forEach(c => {\n                        const key = c.getAttribute('data-key');\n                        c.checked = shoudlcheck;\n                        toggleStatus(key, false);\n                    });\n                }\n            } catch (e) {\n                Log.warn(`${k} translation is disalbled`);\n            }\n\n        });\n        toggleAutotranslateButton();\n        countWordAndChar();\n    };\n    /**\n     * Displays error message and icon.\n     *\n     * @param {string} key\n     * @param {string} error\n     */\n    const onErrorMessageItem = (key, error) => {\n        Log.warn(`ui/errorMessageItem`);\n        Log.warn(key);\n        Log.warn(error);\n        const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        editor.classList.add(\"local_deepler__error\");\n        setIconStatus(key, Selectors.statuses.failed);\n        // Display granular error messages.\n        const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n        if (indexOfSET === -1) {\n            showErrorMessageForEditor(key, error);\n        } else {\n            let s = langstrings.uistrings.errortoolong;\n            showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n        }\n    };\n    /**\n     * Hides an item's error message.\n     *\n     * @param {String} key\n     */\n    const hideErrorMessage = (key) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        let alertChild = domQuery('.alert-danger', '', parent);\n        if (alertChild) {\n            parent.removeChild(alertChild);\n        }\n    };\n    /**\n     * Displays success message and icon.\n     *\n     * @param {String} key\n     * @param {string} savedText\n     */\n    const onSuccessMessageItem = (key, savedText) => {\n        domQuery(Selectors.editors.multiples.editorsWithKey, key)\n            .classList.add(\"local_deepler__success\");\n        // Add saved indicator.\n        setIconStatus(key, Selectors.statuses.success);\n        // Replace text in the multilang textarea.\n        const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n        multilangTextarea.innerHTML = savedText;\n        // Deselect the checkbox.\n        domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n        // Remove success message after a few seconds.\n        setTimeout(() => {\n            let multilangPill = domQuery(Selectors.statuses.multilang, key);\n            let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n            prevTransStatus.classList = \"badge badge-pill badge-success\";\n            if (multilangPill.classList.contains(\"disabled\")) {\n                multilangPill.classList.remove('disabled');\n            }\n            setIconStatus(key, Selectors.statuses.saved);\n        });\n    };\n     /**/\n    /**\n     * Display error message attached to the item's editor.\n     * @param {String} key\n     * @param {String} message\n     * ui.js\n     */\n    const showErrorMessageForEditor = (key, message) => {\n        let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n        const errorMsg = document.createElement('div');\n        errorMsg.id = 'local_deepler__errormsg';\n        errorMsg.classList = ['alert alert-danger'];\n        errorMsg.innerHTML = message;\n        parent.appendChild(errorMsg);\n    };\n    /**\n     * Event listener to switch target lang.\n     * @param {Event} e\n     * ui.js\n     */\n    const switchTarget = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n        searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n        window.location = url.toString();\n    };\n    /**\n     * Event listener to switch source lang,\n     * Hence reload the page and change the site main lang.\n     * @param {Event} e\n     */\n    const switchSource = (e) => {\n        let url = new URL(window.location.href);\n        let searchParams = url.searchParams;\n        searchParams.set(\"lang\", e.target.value);\n        window.location = url.toString();\n    };\n    /**\n     * Launch, display count of Words And Chars.\n     */\n    const countWordAndChar = () => {\n        let wrdsc = 0;\n        let cws = 0;\n        let cwos = 0;\n       domQueryAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n        const wordCount = domQuery(Selectors.statuses.wordcount);\n        const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n        const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n        const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n        const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n        const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n        let current = cwos + config.usage.character.count;\n        wordCount.innerText = wrdsc;\n        charWithSpace.innerText = cws;\n        charWOSpace.innerText = cwos;\n        deeplUseSpan.innerText = format.format(current);\n        deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n        if (current >= config.usage.character.limit) {\n            parent.classList.remove('alert-success');\n            parent.classList.add('alert-danger');\n        } else {\n            parent.classList.add('alert-success');\n            parent.classList.remove('alert-danger');\n        }\n    };\n    /**\n     * Get the editor container based on recieved current user's editor preference.\n     *\n     * @param {string} key Translation Key\n     */\n    const findEditor = (key) => {\n        let e = domQuery(Selectors.editors.types.basic, key);\n        let et = 'basic';\n        if (e === null) {\n            let r = null;\n            let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n            if (editorTab.indexOf(config.userPrefs) === -1) {\n                Log.warn('Unsupported editor ' + config.userPrefs);\n            } else {\n                // First let's try the current editor.\n                try {\n                    r = findEditorByType(key, config.userPrefs);\n                } catch (error) {\n                    // Content was edited by another editor.\n                    Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                }\n            }\n            return r;\n        } else {\n            return {editor: e, editorType: et};\n        }\n    };\n    /**\n     * @param {string} key\n     * @param {object} editorType\n     * @returns {{editor: object, editorType: string}}\n     */\n    const findEditorByType = (key, editorType) => {\n        let et = 'basic';\n        let ed = null;\n        switch (editorType) {\n            case \"atto\" :\n                et = 'iframe';\n                ed = domQuery(Selectors.editors.types.atto, key);\n                break;\n            case \"tiny\":\n                et = 'iframe';\n                ed = findTinyInstanceByKey(key);\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                ed = domQuery(Selectors.editors.types.other, key);\n                break;\n        }\n        return {editor: ed, editorType: et};\n    };\n    /**\n     * Finds TinyMCE instance.\n     * @param {string} key\n     * @returns {Node}\n     */\n    const findTinyInstanceByKey = (key)=> {\n        let editor = null;\n        TinyMCE.getAllInstances().every((k, v)=>{\n            if (v.attributes.name.value.indexOf(key) == 0) {\n                editor = k.getBody();\n                return false;\n            }\n            return true;\n        });\n        return editor;\n    };\n    /**\n     * Compile the needed counts for info.\n     *\n     * @param {string} key\n     * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n     */\n    const getCount = (key) => {\n        const item = domQuery(Selectors.sourcetexts.keys, key);\n        const raw = item.getAttribute(\"data-sourcetext-raw\");\n        // Cleaned sourceText.\n        const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n        return {\n            \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n            \"charNumWithSpace\": trimmedVal.length,\n            \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n        };\n    };\n    /**\n     * Wrapper for radios value.\n     *\n     * @param {string} selector\n     * @returns {*}\n     */\n    const queryRadioValue = (selector) => {\n        return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n    };\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {element}\n     */\n    const domQuery = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelector(q);\n    };\n\n    /**\n     * Shortcut for dom querySelector.\n     *\n     * @param {string} selector\n     * @param {string} key\n     * @param {element} target\n     * @returns {NodeList}\n     */\n    const domQueryAll = (selector, key = '', target = null) => {\n        const el = target ?? document;\n        const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n        return el.querySelectorAll(q);\n    };\n    /**\n     * Event listener to switch source lang.\n     * @param {*} cfg\n     */\n    const init = (cfg) => {\n        ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n            {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100});\n        Translation.init(cfg);\n        Log.debug(`ui_deepler/x/init::Translation.moodleTargetToSave`);\n        Log.debug(Translation.moodleTargetToSave);\n        config = cfg;\n        Log.info(cfg);\n        registerUI();\n        registerEventListeners();\n        toggleAutotranslateButton();\n        saveAllBtn.disabled = true;\n        selectAllBtn.disabled = !Translation.isTranslatable();\n        checkboxes.forEach((node) => {\n            node.disabled = selectAllBtn.disabled;\n        });\n        showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n        showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n    };\n    return {\n        init: init\n    };\n});\n"],"names":["define","Log","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","fetchCookies","targetlang","oldCookieName","COOKIE_PREFIX","currentlang","courseid","newCookiename","COOKIE_PREFIX_NEW","debug","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","JSON","parse","selector","type","undefined","checked","domQuery","value","deepl","glossaryId","handleClickEvent","e","target","closest","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","deeplsourcelang","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","handleChangeEvent","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","keyid","getAttribute","key","keyidToKey","source","sourcetexts","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","domQueryAll","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","then","r","info","catch","reason","data","Array","from","map","dataset","forEach","getIconStatus","tosave","hideErrorMessage","push","prepareDBitem","keyValidator","element","editors","multiples","editorsWithKey","id","parseInt","tid","table","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","remove","setAttribute","statusstrings","node","replaceKey","parentrow","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","setEncodedCookie","stringify","callTranslations","toJsonArray","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","selected","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","warn","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","parent","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","innerHTML","setTimeout","multilangPill","prevTransStatus","message","errorMsg","document","createElement","appendChild","url","URL","window","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","moodleTargetToSave","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","tagHandling","toneorstyle","escapeLatex","escapePre","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":"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"}