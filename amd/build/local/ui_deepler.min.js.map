{"version":3,"file":"ui_deepler.min.js","sources":["../../src/local/ui_deepler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/ui_deepler.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['core/log',\n        'editor_tiny/loader',\n        'editor_tiny/editor',\n        'core/modal',\n        './selectors',\n        './translation',\n        './utils',\n        './customevents',\n        './scrollspy'\n    ],\n    (Log, TinyMCEinit, TinyMCE,\n     Modal,\n     Selectors,\n     Translation,\n     Utils,\n     Events,\n     ScrollSpy) => {\n        let hideiframes = {};\n        // Store removed iframes and their parent/next sibling for restoration.\n        let removedIframes = [];\n\n        let config = {};\n        let langstrings = {};\n        let autotranslateButton = {};\n        let saveAllBtn = {};\n        let selectAllBtn = {};\n        let checkboxes = [];\n        let format = new Intl.NumberFormat();\n        let saveAllModal = {};\n        let errordbtitle = '';\n        let settingsUI = {};\n        let allDataFormatOne = [];\n        /**\n         * When a main error with the DB occurs.\n         *\n         * @param {string} error\n         * @param {int} status\n         */\n        const onDBFailed = (error, status) => {\n            showModal(`${errordbtitle} ${status}`, `DB failed to save translations. ${error}`, 'Alert');\n        };\n        /**\n         *\n         * @param {array} errors\n         */\n        const onDbSavedSuccess = (errors) => {\n            if (saveAllModal !== null && saveAllModal.isVisible) {\n                saveAllModal.hide();\n            }\n            if (errors.length > 0) {\n                let s = langstrings.uistrings.errordbpartial;\n                s = s.replace('{$a}', errors.length);\n                showModal(errordbtitle, s, 'Alert');\n            }\n        };\n        // Const ON_TARGET_LANG_CHANGE = 'onTargetLangChange';\n        /**\n         * Event factories.\n         */\n        const registerEventListeners = () => {\n            document.addEventListener('change', handleChangeEvent);\n            document.addEventListener('click', handleClickEvent);\n            document.addEventListener('focusin', handleFocusEvent);\n\n            // Translation events.\n            Events.on(Translation.ON_ITEM_TRANSLATED, onItemTranslated);\n            Events.on(Translation.ON_TRANSLATION_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_REPHRASE_FAILED, onTranslationFailed);\n            Events.on(Translation.ON_DB_SAVE_SUCCESS, onDbSavedSuccess);\n            Events.on(Translation.ON_DB_FAILED, onDBFailed);\n            Events.on(Translation.ON_ITEM_SAVED, onSuccessMessageItem);\n            Events.on(Translation.ON_ITEM_NOT_SAVED, onErrorMessageItem);\n        };\n        const resizeEditors = ()=>{\n\n            allDataFormatOne.forEach((editable)=>{\n                const key = editable.id.replace('tiny_', '');\n                const selector = `[data-sourcetext-key=\"${key}\"]`;\n                let parent = domQuery(selector);\n                const grandparent = parent.parentElement;\n\n                const updateEditableHeight = ()=> {\n                    const totalHeight = grandparent.offsetHeight + 80; // Tiny header average height is 80.\n                    editable.style.height = totalHeight + 'px';\n                };\n\n                // Observe size changes in parent and grandparent.\n                const resizeObserver = new ResizeObserver(() => {\n                    updateEditableHeight();\n                });\n\n                resizeObserver.observe(parent);\n                resizeObserver.observe(grandparent);\n\n            });\n        };\n        /**\n         * Register UI elements.\n         */\n        const registerUI = () => {\n            try {\n                allDataFormatOne = domQueryAll(Selectors.editors.targetarea);\n                hideiframes = domQuery(Selectors.actions.hideiframes);\n                langstrings = JSON.parse(domQuery(Selectors.config.langstrings).getAttribute('data-langstrings'));\n                errordbtitle = langstrings.uistrings.errordbtitle;\n                saveAllBtn = domQuery(Selectors.actions.saveAll);\n                selectAllBtn = domQuery(Selectors.actions.selectAllBtn);\n                autotranslateButton = domQuery(Selectors.actions.autoTranslateBtn);\n                checkboxes = domQueryAll(Selectors.actions.checkBoxes);\n                settingsUI[Selectors.deepl.glossaryId] = domQuery(Selectors.deepl.glossaryId);\n                settingsUI[Selectors.deepl.context] = domQuery(Selectors.deepl.context);\n                settingsUI[Selectors.deepl.formality] = domQuery(Selectors.deepl.formality);\n                settingsUI[Selectors.deepl.modelType] = domQuery(Selectors.deepl.modelType);\n                settingsUI[Selectors.deepl.ignoreTags] = domQuery(Selectors.deepl.ignoreTags);\n                settingsUI[Selectors.deepl.nonSplittingTags] = domQuery(Selectors.deepl.nonSplittingTags);\n                settingsUI[Selectors.deepl.outlineDetection] = domQuery(Selectors.deepl.outlineDetection);\n                settingsUI[Selectors.deepl.preserveFormatting] = domQuery(Selectors.deepl.preserveFormatting);\n                settingsUI[Selectors.deepl.splitSentences] = domQuery(Selectors.deepl.splitSentences);\n                settingsUI[Selectors.deepl.splittingTags] = domQuery(Selectors.deepl.splittingTags);\n                settingsUI[Selectors.deepl.tagHandling] = domQuery(Selectors.deepl.tagHandling);\n                if (!config.isfree) {\n                    settingsUI[Selectors.deepl.toneorstyle] = domQuery(Selectors.deepl.toneorstyle);\n                }\n                settingsUI[Selectors.actions.escapeLatex] = domQuery(Selectors.actions.escapeLatex);\n                settingsUI[Selectors.actions.escapePre] = domQuery(Selectors.actions.escapePre);\n                fetchCookies();\n                resizeEditors();\n            } catch (e) {\n                if (config.debug) {\n                    Log.error(e.message);\n                }\n            }\n        };\n        /**\n         * Get the stored settings for this course and lang pair.\n         */\n        const fetchCookies = () => {\n            if (!config.targetlang) {\n                return;\n            }\n            const glossaryCookie = Utils.getCookie(config);\n            const newCookie = Utils.getEncodedCookie(config);\n            if (newCookie !== null) {\n                const settingsCookie = JSON.parse(newCookie);\n                for (const selector in settingsUI) {\n                    if (settingsCookie[selector] !== undefined) {\n                        switch (settingsUI[selector].type) {\n                            case 'checkbox' :\n                                settingsUI[selector].checked = settingsCookie[selector];\n                                break;\n                            case 'radio' :\n                                domQuery(selector + `[value=\"${settingsCookie[selector]}\"]`).checked = true;\n                                break;\n                            default:\n                                settingsUI[selector].value = settingsCookie[selector];\n                                break;\n                        }\n\n                    }\n                }\n            }\n            if (glossaryCookie !== null) {\n                // Legacy cookie.\n                settingsUI[Selectors.deepl.glossaryId].value = glossaryCookie;\n            }\n        };\n        /**\n         * Opens a modal infobox to warn user trunks of fields are saving.\n         * @returns {Promise<void>}\n         */\n        const launchModal = async() => {\n            saveAllModal = await Modal.create({\n                title: langstrings.uistrings.saveallmodaltitle,\n                body: langstrings.uistrings.saveallmodalbody,\n            });\n            await saveAllModal.show();\n        };\n        const handleFocusEvent = (e)=>{\n            if (e.target.closest(Selectors.editors.targetarea)) {\n                const options = {\n                    subdirs: false,\n                    maxbytes: 10240,\n                    maxfiles: 0,\n                    noclean: true,\n                    trusttext: true,\n                    enable_filemanagement: false,\n                    autosave: false,\n                    removeorphaneddrafts: true,\n                    plugins: []\n                };\n                 TinyMCEinit.getTinyMCE().then(\n                    ()=>{\n                        TinyMCE.setupForTarget(e.target, options)\n                            .then(()=>{\n Log.info('tiny loaded for ' + e.target.id);\n})\n                            .catch((r)=>{\n Log.error(r);\n});\n                    }\n                );\n            }\n        };\n        /**\n         * Event listener for click events.\n         *\n         * @param {event} e\n         */\n        const handleClickEvent = (e) => {\n            if (e.target.closest(Selectors.actions.toggleMultilang)) {\n                onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n            }\n            if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n                if ((!config.canimprove && config.deeplsourcelang === config.targetlang) || config.targetlang === undefined) {\n                    showModal('Cannot call deepl', `<p>${langstrings.uistrings.canttranslatesame} ${config.targetlang}</p>`);\n                } else {\n                    callDeeplServices();\n                }\n            }\n            if (e.target.closest(Selectors.actions.selectAllBtn)) {\n                toggleAllCheckboxes(e);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                toggleAutotranslateButton();\n            }\n            if (e.target.closest(Selectors.actions.saveAll)) {\n                saveTranslations();\n            }\n            if (e.target.closest(Selectors.actions.validatorsBtns)) {\n                saveSingleTranslation(e);\n            }\n        };\n\n        /**\n         * Toggle iFrames in sourcetexts.\n         * @param {boolean} isChecked\n         */\n        function doHideiframes(isChecked) {\n            const allIframes = domQueryAll(Selectors.sourcetexts.iframes);\n            if (!isChecked && allIframes.length > 0) {\n                removedIframes = [];\n                allIframes.forEach(iframe => {\n                    removedIframes.push({\n                        parent: iframe.parentNode,\n                        nextSibling: iframe.nextSibling,\n                        html: iframe.outerHTML\n                    });\n                    iframe.remove();\n                });\n            } else if (removedIframes.length > 0) {\n                // Restore all previously removed iframes.\n                removedIframes.forEach(info => {\n                    // Create a new element from the stored HTML.\n                    const tempDiv = document.createElement('div');\n                    tempDiv.innerHTML = info.html;\n                    const newIframe = tempDiv.firstChild;\n                    // Insert it back into the DOM\n                    if (info.nextSibling) {\n                        info.parent.insertBefore(newIframe, info.nextSibling);\n                    } else {\n                        info.parent.appendChild(newIframe);\n                    }\n                });\n                removedIframes = [];\n            }\n        }\n\n        /**\n         * Event listener for change events.\n         * @param {event} e\n         */\n        const handleChangeEvent = (e) => {\n            window.console.info('CHANGE');\n            if (e.target.closest(Selectors.actions.hideiframes)) {\n                doHideiframes(hideiframes.checked);\n            }\n            if (e.target.closest(Selectors.actions.targetSwitcher)) {\n                switchTarget(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n                switchSource(e);\n            }\n            if (e.target.closest(Selectors.actions.showUpdated)) {\n                showRows(Selectors.statuses.updated, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n                showRows(Selectors.statuses.needsupdate, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.showHidden)) {\n                showRows(Selectors.statuses.hidden, e.target.checked);\n            }\n            if (e.target.closest(Selectors.actions.checkBoxes)) {\n                onItemChecked(e);\n            }\n            if (e.target.closest(Selectors.actions.sourceselect)) {\n                onSourceChange(e);\n            }\n        };\n        /**\n         * Multilang button handler\n         *\n         * @param {Event} e Event\n         */\n        const onToggleMultilang = (e) => {\n            let keyid = e.getAttribute('aria-controls');\n            let key = Utils.keyidToKey(keyid);\n            if (key === null) {\n                Log.error(`KEY ${keyid} BAD FORMAT should be TABLE-ID-FIELD-CMID`);\n            } else {\n                let source = domQuery(Selectors.sourcetexts.keys, key);\n                let multilang = domQuery(Selectors.sourcetexts.multilangs, keyid);\n                source.classList.toggle(\"show\");\n                multilang.classList.toggle(\"show\");\n            }\n        };\n\n        /**\n         * @returns void\n         */\n        const saveTranslations = () => {\n            const selectedCheckboxes = domQueryAll(Selectors.statuses.checkedCheckBoxes);\n            if (selectedCheckboxes.length === 0) {\n                return;\n            }\n            // Prepare the UI for the save process.\n            saveAllBtn.disabled = true;\n            launchModal().then(r => Log.info('SaveAll Modal launched ' + r)).catch((reason)=>{\n                Log.error(reason);\n            });\n            // Prepare the data to be saved.\n            const data = [];\n            const keys = Array.from(selectedCheckboxes).map((e) => e.dataset.key);\n            keys.forEach((key) => {\n                // @todo MDL-0000: should not rely on UI (add a flag in temptranslations object) .\n                    if (getIconStatus(key) === Selectors.statuses.tosave) {\n                        hideErrorMessage(key);\n                        data.push(prepareDBitem(key));\n                    }\n                }\n            );\n            Translation.saveTranslations(data, config);\n        };\n        /**\n         * Saving a single translation to DB.\n         * @param {Event} e\n         */\n        const saveSingleTranslation = (e)=> {\n            const key = e.target.closest(Selectors.actions.validatorsBtns).dataset.keyValidator;\n            if (getIconStatus(key) === Selectors.statuses.tosave) {\n                hideErrorMessage(key);\n                Translation.saveTranslations([prepareDBitem(key)], config);\n            }\n        };\n        /**\n         *\n         * @param {string} key\n         * @returns {{key, courseid, id: number, tid: *, table: *, field: *}}\n         */\n        const prepareDBitem = (key) => {\n            const element = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            return {\n                key: key,\n                courseid: config.courseid,\n                id: parseInt(element.getAttribute(\"data-id\")),\n                tid: element.getAttribute(\"data-tid\"),\n                table: element.getAttribute(\"data-table\"),\n                field: element.getAttribute(\"data-field\"),\n                cmid: element.getAttribute(\"data-cmid\"),\n            };\n        };\n        /**\n         * Listener for individual source change.\n         * @todo MDL-000 implement in v1.4.0\n         *\n         * @param {event} e\n         */\n        const onSourceChange = (e) => {\n            // Do check source and target and propose rephrase if PRO.\n            Log.info('source changed');\n            Log.info(e.target.getAttribute('data-key'));\n        };\n        /**\n         * Event listener for selection checkboxes.\n         * @param {Event} e\n         */\n        const onItemChecked = (e) => {\n            // Check/uncheck checkboxes changes the charcount and icon status.\n            if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n                toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n                countWordAndChar();\n            }\n        };\n\n        /**\n         * Toggle checkboxes\n         * @param {Event} e Event\n         */\n        const toggleAllCheckboxes = (e) => {\n            // Check/uncheck checkboxes\n            if (e.target.checked) {\n                checkboxes.forEach((i) => {\n                    // Toggle check box upon visibility\n                    i.checked = !getParentRow(i).classList.contains('d-none');\n                    toggleStatus(i.getAttribute('data-key'), i.checked);\n                });\n            } else {\n                checkboxes.forEach((i) => {\n                    i.checked = false;\n                    toggleStatus(i.getAttribute('data-key'), false);\n                });\n            }\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Toggle Autotranslate Button\n         */\n        const toggleAutotranslateButton = () => {\n            autotranslateButton.disabled = true;\n            for (let i in checkboxes) {\n                let e = checkboxes[i];\n                if (e.checked) {\n                    autotranslateButton.disabled = false;\n                    break;\n                }\n            }\n        };\n        /**\n         * Get the translation row status icon.\n         *\n         * @param {string} key\n         * @returns {*}\n         */\n        const getIconStatus = (key)=> {\n            return domQuery(Selectors.actions.validatorBtn, key).getAttribute('data-status');\n        };\n        /**\n         * Change translation process status icon.\n         *\n         * @param {string} key\n         * @param {string} status\n         * @param {boolean} isBtn\n         */\n        const setIconStatus = (key, status = Selectors.statuses.wait, isBtn = false) => {\n            let icon = domQuery(Selectors.actions.validatorBtn, key);\n            if (!isBtn) {\n                if (!icon.classList.contains('disable')) {\n                    icon.classList.add('disable');\n                }\n                if (icon.classList.contains('btn')) {\n                    icon.classList.remove('btn');\n                    icon.classList.remove('btn-outline-secondary');\n                }\n            } else {\n                if (!icon.classList.contains('btn')) {\n                    icon.classList.add('btn');\n                    icon.classList.add('btn-outline-secondary');\n                }\n                if (icon.classList.contains('disable')) {\n                    icon.classList.remove('disable');\n                }\n            }\n            icon.setAttribute('role', isBtn ? 'button' : 'status');\n            icon.setAttribute('data-status', status);\n            icon.setAttribute('title', langstrings.statusstrings[status.replace('local_deepler/', '')]);\n        };\n        /**\n         * Fetch the parent row of the translation.\n         * @param {Node} node\n         * @returns {*}\n         */\n        const getParentRow = (node) => {\n            return node.closest(Utils.replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n        };\n        const showModal = (title, body, type = 'default') => {\n            Modal.create({\n                title: title,\n                body: body,\n                type: type,\n                show: true,\n                removeOnClose: true,\n            });\n        };\n        /**\n         * Event Listener when DeepL API call failed.\n         * @param {string} error\n         */\n        const onTranslationFailed = (error) => {\n            let s = langstrings.uistrings.deeplapiexception;\n            showModal(s, error, 'Alert');\n        };\n        /**\n         * Event listener for the translations process to dispaly the status.\n         *\n         * @param {string} key\n         */\n        const onItemTranslated = (key) => {\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.tosave, true);\n        };\n        /**\n         * Launch deepl services.\n         */\n        const callDeeplServices = () => {\n            const keys = [];\n            const [cookie, settings] = prepareSettingsAndCookieValues();\n            saveAllBtn.disabled = false;\n            domQueryAll(Selectors.statuses.checkedCheckBoxes)\n                .forEach((ckBox) => {\n                    const key = ckBox.getAttribute(\"data-key\");\n                    const sourceText = domQuery(Selectors.sourcetexts.keys, key);\n                    const editor = findEditor(key);\n                    Translation.initTempForKey(\n                        key, editor,\n                        sourceText.getAttribute(\"data-sourcetext-raw\"),\n                        sourceText.getAttribute(\"data-filedtext-raw\"),\n                        domQuery(Selectors.sourcetexts.sourcelangdd, key).value\n                    );\n                    keys.push(key);\n                });\n            const newCookiename = Utils.COOKIE_PREFIX_NEW + config.currentlang + config.targetlang + config.courseid;\n            Utils.setEncodedCookie(newCookiename, JSON.stringify(cookie), 703);\n            Translation.callTranslations(keys, config, settings);\n        };\n        /**\n         * Parse the advanced settings UI and map the values for cookies and Deepl.\n         *\n         * @returns {[{},{}]}\n         */\n        const prepareSettingsAndCookieValues = () => {\n            let settings = {};\n            let cookie = {};\n            for (const selector in settingsUI) {\n                if (settingsUI[selector] === null) {\n                    Log.warn(`prepareSettingsAndCookieValues. Could not find selector ${selector}`);\n                    window.console.warn(settingsUI);\n                } else {\n                    switch (settingsUI[selector].type) {\n                        case 'textarea':\n                            cookie[selector] = settingsUI[selector].value;\n                            // Deepl needs an array.\n                            settings[selector] = Utils.toJsonArray(cookie[selector]);\n                            break;\n                        case 'checkbox':\n                            if (selector === Selectors.deepl.tagHandling) {\n                                cookie[selector] = settingsUI[selector].checked;\n                                // Exception for tag_handling that checkbox but not boolean value for Deepl.\n                                settings[selector] = settingsUI[selector].checked ? 'html' : 'xml';\n                            } else {\n                                settings[selector] = cookie[selector] = settingsUI[selector].checked;\n                            }\n                            break;\n                        case 'radio':\n                            settings[selector] = cookie[selector] = queryRadioValue(selector);\n                            break;\n                        default: // Text.\n                            settings[selector] = cookie[selector] = settingsUI[selector].value;\n                            break;\n                    }\n                }\n            }\n            return [cookie, settings];\n        };\n        /**\n         * Factory to display process' statuses for each item.\n         *\n         * @param {String} key\n         * @param {Boolean} checked\n         */\n        const toggleStatus = (key, checked) => {\n            const status = domQuery(Selectors.actions.validatorBtn, key).dataset.status;\n            switch (status) {\n                case Selectors.statuses.wait :\n                    Translation.initTemp(key); // Reset the translation.\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                        // RefreshTempTranslation(key);\n                    }\n                    break;\n                case Selectors.statuses.totranslate :\n                    // If (checked && Translation.tempTranslations[key]?.translation?.length > 0) {\n                    if (checked && Translation.translated[key]) {\n                        setIconStatus(key, Selectors.statuses.tosave, true);\n                    } else {\n                        setIconStatus(key, Selectors.statuses.wait);\n                    }\n                    break;\n                case Selectors.statuses.tosave :\n                    if (!checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.failed :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    break;\n                case Selectors.statuses.success :\n                    break;\n                case Selectors.statuses.saved :\n                    if (checked) {\n                        setIconStatus(key, Selectors.statuses.totranslate);\n                    }\n                    Translation.initTemp(key);\n                    break;\n            }\n        };\n        /**\n         * Shows/hides rows.\n         * @param {string} selector\n         * @param {boolean} selected\n         */\n        const showRows = (selector, selected) => {\n            const items = domQueryAll(selector);\n            const allSelected = domQuery(Selectors.actions.selectAllBtn).checked;\n            const shoudlcheck = allSelected && selected;\n            items.forEach((item) => {\n                let k = item.getAttribute('data-row-id');\n                if (selected) {\n                    item.classList.remove(\"d-none\");\n                } else {\n                    item.classList.add(\"d-none\");\n                }\n                // When a row is toggled then we don't want it to be selected and sent from translation.\n                try {\n                    const single = domQuery(Selectors.editors.multiples.checkBoxesWithKey, k);\n                    if (single !== null) {\n                        single.checked = shoudlcheck;\n                        toggleStatus(k, false);\n                    }\n                    const allchilds = domQueryAll(Selectors.editors.multiples.checkBoxesWithKeyHidden, k);\n                    if (allchilds !== null && allchilds.length > 0) {\n                        allchilds.forEach(c => {\n                            const key = c.getAttribute('data-key');\n                            c.checked = shoudlcheck;\n                            toggleStatus(key, false);\n                        });\n                    }\n                } catch (e) {\n                    Log.warn(`${k} translation is disalbled`);\n                }\n\n            });\n            toggleAutotranslateButton();\n            countWordAndChar();\n        };\n        /**\n         * Displays error message and icon.\n         *\n         * @param {string} key\n         * @param {string} error\n         */\n        const onErrorMessageItem = (key, error) => {\n            Log.warn(`ui/errorMessageItem`);\n            Log.warn(key);\n            Log.warn(error);\n            const editor = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            editor.classList.add(\"local_deepler__error\");\n            setIconStatus(key, Selectors.statuses.failed);\n            // Display granular error messages.\n            const indexOfSET = error.indexOf(\"Data too long\");// Probably a text too long for the field if not -1.\n            if (indexOfSET === -1) {\n                showErrorMessageForEditor(key, error);\n            } else {\n                let s = langstrings.uistrings.errortoolong;\n                showErrorMessageForEditor(key, `${error.substring(0, error.indexOf('WHERE id=?'))} ${s}`);\n            }\n        };\n        /**\n         * Hides an item's error message.\n         *\n         * @param {String} key\n         */\n        const hideErrorMessage = (key) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            let alertChild = domQuery('.alert-danger', '', parent);\n            if (alertChild) {\n                parent.removeChild(alertChild);\n            }\n        };\n        /**\n         * Displays success message and icon.\n         *\n         * @param {String} key\n         * @param {string} savedText\n         */\n        const onSuccessMessageItem = (key, savedText) => {\n            domQuery(Selectors.editors.multiples.editorsWithKey, key)\n                .classList.add(\"local_deepler__success\");\n            // Add saved indicator.\n            setIconStatus(key, Selectors.statuses.success);\n            // Replace text in the multilang textarea.\n            const multilangTextarea = domQuery(Selectors.editors.multiples.textAreas, key);\n            multilangTextarea.innerHTML = savedText;\n            // Deselect the checkbox.\n            domQuery(Selectors.editors.multiples.checkBoxesWithKey, key).checked = false;\n            // Remove success message after a few seconds.\n            setTimeout(() => {\n                let multilangPill = domQuery(Selectors.statuses.multilang, key);\n                let prevTransStatus = domQuery(Selectors.statuses.prevTransStatus, key);\n                prevTransStatus.classList = \"badge badge-pill badge-success\";\n                if (multilangPill.classList.contains(\"disabled\")) {\n                    multilangPill.classList.remove('disabled');\n                }\n                setIconStatus(key, Selectors.statuses.saved);\n            });\n        };\n         /**/\n        /**\n         * Display error message attached to the item's editor.\n         * @param {String} key\n         * @param {String} message\n         */\n        const showErrorMessageForEditor = (key, message) => {\n            let parent = domQuery(Selectors.editors.multiples.editorsWithKey, key);\n            const errorMsg = document.createElement('div');\n            errorMsg.id = 'local_deepler__errormsg';\n            errorMsg.classList = ['alert alert-danger'];\n            errorMsg.innerHTML = message;\n            parent.appendChild(errorMsg);\n        };\n        /**\n         * Event listener to switch target lang.\n         * @param {Event} e\n         */\n        const switchTarget = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            // Pass the target lang in the url and refresh, not forgetting to remove the rephrase prefix indicator.\n            searchParams.set(\"target_lang\", e.target.value.replace(config.rephrasesymbol, '').trim());\n            window.location = url.toString();\n        };\n        /**\n         * Event listener to switch source lang,\n         * Hence reload the page and change the site main lang.\n         * @param {Event} e\n         */\n        const switchSource = (e) => {\n            let url = new URL(window.location.href);\n            let searchParams = url.searchParams;\n            searchParams.set(\"lang\", e.target.value);\n            window.location = url.toString();\n        };\n        /**\n         * Launch, display count of Words And Chars.\n         */\n        const countWordAndChar = () => {\n            let wrdsc = 0;\n            let cws = 0;\n            let cwos = 0;\n           domQueryAll(Selectors.statuses.checkedCheckBoxes)\n            .forEach((ckBox) => {\n                let key = ckBox.getAttribute(\"data-key\");\n                let results = getCount(key);\n                wrdsc += results.wordCount;\n                cwos += results.charNumWithOutSpace;\n                cws += results.charNumWithSpace;\n            });\n            const wordCount = domQuery(Selectors.statuses.wordcount);\n            const charWithSpace = domQuery(Selectors.statuses.charNumWithSpace);\n            const charWOSpace = domQuery(Selectors.statuses.charNumWithOutSpace);\n            const deeplUseSpan = domQuery(Selectors.statuses.deeplUsage);\n            const deeplMaxSpan = domQuery(Selectors.statuses.deeplMax);\n            const parent = domQuery(Selectors.statuses.deeplStatusContainer);\n            let current = cwos + config.usage.character.count;\n            wordCount.innerText = wrdsc;\n            charWithSpace.innerText = cws;\n            charWOSpace.innerText = cwos;\n            deeplUseSpan.innerText = format.format(current);\n            deeplMaxSpan.innerText = config.usage.character.limit === null ? '∞' : format.format(config.usage.character.limit);\n            if (current >= config.usage.character.limit) {\n                parent.classList.remove('alert-success');\n                parent.classList.add('alert-danger');\n            } else {\n                parent.classList.add('alert-success');\n                parent.classList.remove('alert-danger');\n            }\n        };\n        /**\n         * Get the editor container based on recieved current user's editor preference.\n         *\n         * @param {string} key Translation Key\n         */\n        const findEditor = (key) => {\n            let e = domQuery(Selectors.editors.types.basic, key);\n            let et = 'basic';\n            if (e === null) {\n                let r = null;\n                let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n                if (editorTab.indexOf(config.userPrefs) === -1) {\n                    Log.warn('Unsupported editor ' + config.userPrefs);\n                } else {\n                    // First let's try the current editor.\n                    try {\n                        r = findEditorByType(key, config.userPrefs);\n                    } catch (error) {\n                        // Content was edited by another editor.\n                        Log.trace(`Editor not found: ${config.userPrefs} for key ${key}`);\n                    }\n                }\n                return r;\n            } else {\n                return {editor: e, editorType: et};\n            }\n        };\n        /**\n         * @param {string} key\n         * @param {object} editorType\n         * @returns {{editor: object, editorType: string}}\n         */\n        const findEditorByType = (key, editorType) => {\n            let et = 'basic';\n            let ed = null;\n            switch (editorType) {\n                case \"atto\" :\n                    et = 'iframe';\n                    ed = domQuery(Selectors.editors.types.atto, key);\n                    break;\n                case \"tiny\":\n                    et = 'iframe';\n                    ed = findTinyInstanceByKey(key);\n                    break;\n                case 'marklar':\n                case \"textarea\" :\n                    ed = domQuery(Selectors.editors.types.other, key);\n                    break;\n            }\n            return {editor: ed, editorType: et};\n        };\n        /**\n         * Finds TinyMCE instance.\n         * @param {string} key\n         * @returns {Node}\n         */\n        const findTinyInstanceByKey = (key)=> {\n            let editor = null;\n            TinyMCE.getAllInstances().every((k, v)=>{\n                if (v.attributes.name.value.indexOf(key) == 0) {\n                    editor = k.getBody();\n                    return false;\n                }\n                return true;\n            });\n            return editor;\n        };\n        /**\n         * Compile the needed counts for info.\n         *\n         * @param {string} key\n         * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n         */\n        const getCount = (key) => {\n            const item = domQuery(Selectors.sourcetexts.keys, key);\n            const raw = item.getAttribute(\"data-sourcetext-raw\");\n            // Cleaned sourceText.\n            const trimmedVal = Utils.stripHTMLTags(Utils.fromBase64(raw)).trim();\n            return {\n                \"wordCount\": (trimmedVal.match(/\\S+/g) || []).length,\n                \"charNumWithSpace\": trimmedVal.length,\n                \"charNumWithOutSpace\": trimmedVal.replace(/\\s+/g, '').length\n            };\n        };\n        /**\n         * Wrapper for radios value.\n         *\n         * @param {string} selector\n         * @returns {*}\n         */\n        const queryRadioValue = (selector) => {\n            return domQuery(Selectors.actions.radioValues.replace(\"<RADIO>\", selector)).value;\n        };\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {element}\n         */\n        const domQuery = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelector(q);\n        };\n\n        /**\n         * Shortcut for dom querySelector.\n         *\n         * @param {string} selector\n         * @param {string} key\n         * @param {element} target\n         * @returns {NodeList}\n         */\n        const domQueryAll = (selector, key = '', target = null) => {\n            const el = target ?? document;\n            const q = key === '' ? selector : selector.replace(\"<KEY>\", key);\n            return el.querySelectorAll(q);\n        };\n        /**\n         * Event listener to switch source lang.\n         * @param {*} cfg\n         */\n        const init = (cfg) => {\n            ScrollSpy.init('.local_deepler__form', '#local_deepler-scrollspy',\n                {highestLevel: 3, fadingDistance: 60, offsetEndOfScope: 1, offsetTop: 100, crumbsmaxlen: cfg.crumbsmaxlen});\n            Translation.init(cfg);\n            config = cfg;\n            Log.info(cfg);\n            registerUI();\n            registerEventListeners();\n            toggleAutotranslateButton();\n            doHideiframes(hideiframes.checked);\n            saveAllBtn.disabled = true;\n            selectAllBtn.disabled = !Translation.isTranslatable();\n            checkboxes.forEach((node) => {\n                node.disabled = selectAllBtn.disabled;\n            });\n            showRows(Selectors.statuses.updated, domQuery(Selectors.actions.showUpdated).checked);\n            showRows(Selectors.statuses.needsupdate, domQuery(Selectors.actions.showNeedUpdate).checked);\n        };\n        /**\n         * Api to be used by the other modules.\n         */\n        return {\n            init: init\n        };\n});\n"],"names":["define","Log","TinyMCEinit","TinyMCE","Modal","Selectors","Translation","Utils","Events","ScrollSpy","hideiframes","removedIframes","config","langstrings","autotranslateButton","saveAllBtn","selectAllBtn","checkboxes","format","Intl","NumberFormat","saveAllModal","errordbtitle","settingsUI","allDataFormatOne","onDBFailed","error","status","showModal","onDbSavedSuccess","errors","isVisible","hide","length","s","uistrings","errordbpartial","replace","resizeEditors","forEach","editable","key","id","selector","parent","domQuery","grandparent","parentElement","resizeObserver","ResizeObserver","totalHeight","offsetHeight","style","height","updateEditableHeight","observe","fetchCookies","targetlang","glossaryCookie","getCookie","newCookie","getEncodedCookie","settingsCookie","JSON","parse","undefined","type","checked","value","deepl","glossaryId","handleFocusEvent","e","target","closest","editors","targetarea","options","subdirs","maxbytes","maxfiles","noclean","trusttext","enable_filemanagement","autosave","removeorphaneddrafts","plugins","getTinyMCE","then","setupForTarget","info","catch","r","handleClickEvent","actions","toggleMultilang","onToggleMultilang","autoTranslateBtn","canimprove","deeplsourcelang","canttranslatesame","callDeeplServices","toggleAllCheckboxes","checkBoxes","toggleAutotranslateButton","saveAll","saveTranslations","validatorsBtns","saveSingleTranslation","doHideiframes","isChecked","allIframes","domQueryAll","sourcetexts","iframes","iframe","push","parentNode","nextSibling","html","outerHTML","remove","tempDiv","document","createElement","innerHTML","newIframe","firstChild","insertBefore","appendChild","handleChangeEvent","window","console","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","showNeedUpdate","needsupdate","showHidden","hidden","onItemChecked","sourceselect","onSourceChange","keyid","getAttribute","keyidToKey","source","keys","multilang","multilangs","classList","toggle","selectedCheckboxes","checkedCheckBoxes","disabled","async","create","title","saveallmodaltitle","body","saveallmodalbody","show","launchModal","reason","data","Array","from","map","dataset","getIconStatus","tosave","hideErrorMessage","prepareDBitem","keyValidator","element","multiples","editorsWithKey","courseid","parseInt","tid","table","field","cmid","toggleStatus","countWordAndChar","i","getParentRow","contains","validatorBtn","setIconStatus","wait","isBtn","icon","add","setAttribute","statusstrings","node","replaceKey","parentrow","removeOnClose","onTranslationFailed","deeplapiexception","onItemTranslated","cookie","settings","prepareSettingsAndCookieValues","ckBox","sourceText","editor","findEditor","initTempForKey","sourcelangdd","newCookiename","COOKIE_PREFIX_NEW","currentlang","setEncodedCookie","stringify","callTranslations","warn","toJsonArray","tagHandling","queryRadioValue","initTemp","totranslate","translated","failed","success","saved","selected","items","shoudlcheck","item","k","single","checkBoxesWithKey","allchilds","checkBoxesWithKeyHidden","c","onErrorMessageItem","indexOf","showErrorMessageForEditor","errortoolong","substring","alertChild","removeChild","onSuccessMessageItem","savedText","textAreas","setTimeout","multilangPill","prevTransStatus","message","errorMsg","url","URL","location","href","searchParams","set","rephrasesymbol","trim","toString","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","usage","character","count","innerText","limit","types","basic","userPrefs","findEditorByType","trace","editorType","et","ed","atto","findTinyInstanceByKey","other","getAllInstances","every","v","attributes","name","getBody","raw","trimmedVal","stripHTMLTags","fromBase64","match","radioValues","el","q","querySelector","querySelectorAll","init","cfg","highestLevel","fadingDistance","offsetEndOfScope","offsetTop","crumbsmaxlen","context","formality","modelType","ignoreTags","nonSplittingTags","outlineDetection","preserveFormatting","splitSentences","splittingTags","isfree","toneorstyle","escapeLatex","escapePre","debug","registerUI","addEventListener","on","ON_ITEM_TRANSLATED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","isTranslatable"],"mappings":"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"}