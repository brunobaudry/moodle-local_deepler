{"version":3,"file":"translation.min.js","sources":["../../src/local/translation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/translation.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/log', './api', './utils', './selectors', './tokeniser', './customevents'],\n    (Log, Api, Utils, Selectors, Tokeniser, Events) => {\n    let tempTranslations = {};\n    let escapePatterns = {};\n    let mainSourceLang = \"\";\n    let targetLang = \"\";\n    let courseid = 0;\n    let userid = 0;\n    let settings = {};\n    const ON_ITEM_TRANSLATED = 'onItemTranslated';\n    // Const ON_ITEM_NOT_TRANSLATED = 'onItemsNotTranslated';\n    const ON_ITEM_SAVED = 'onItemSaved';\n    const ON_ITEM_NOT_SAVED = 'onItemNotSaved';\n    const ON_TRANSLATION_FAILED = 'onTranslationFailed';\n    const ON_DB_SAVE_SUCCESS = 'onDbSuccess';\n    const ON_DB_FAILED = 'onDbFailed';\n    const setMainLangs = (source = '', target = '') => {\n        if (source !== '') {\n            mainSourceLang = source;\n        }\n        if (target !== '') {\n            targetLang = target;\n        }\n    };\n    const onTrDbSuccess = (data)=>{\n        Log.error(`translation/onTrDbSuccess:46`);\n        Log.error(data);\n        if (data.length === 0) {\n            Log.error(data);\n            Events.emit(ON_DB_FAILED, 'no data returned', '');\n            // ShowModal();\n        } else {\n            const errors = data.filter((item) => item.error !== '');\n            data.forEach((item) => {\n                // Ui.setIconStatus(item.key, Selectors.statuses.saved, true);\n                Log.debug(`translation/:54`);\n                Log.debug(item);\n                if (item.error === '') {\n                    Events.emit(ON_ITEM_SAVED, item.keyid, item.text);\n                } else {\n                    Events.emit(ON_ITEM_NOT_SAVED, item.keyid, item.error);\n                }\n            });\n            Events.emit(ON_DB_SAVE_SUCCESS, errors);\n        }\n    };\n    /**\n     * Translation DB failed.\n     * @param {int} status\n     * @param {string} error\n     */\n    const onTrDbFailed = (status, error) =>{\n            Events.emit(ON_DB_FAILED, error, status);\n            Log.trace(status);\n            Log.trace(error);\n        };\n    /**\n     * Save translations to the DB.\n     * @param {array} items\n     * @param {object} config\n     */\n    const saveTranslations = (items, config) => {\n        Log.debug(`translation/saveTranslations:84 > items`);\n        Log.debug(items);\n        Log.debug(targetLang);\n        const data = items.map(item => prepareDbUpdateItem(item, config.userPrefs === 'textarea'));\n        Log.debug(`translation/saveTranslations:84 > data`);\n        Log.debug(data);\n        Log.debug(userid);\n        Events.on(Api.TR_DB_SUCCESS, onTrDbSuccess);\n        Events.on(Api.TR_DB_FAILED, onTrDbFailed);\n        Api.updateTranslationsInDb(data, userid, courseid);\n        // Api.callApi(\"local_deepler_update_translation\", {data: data}).done(handleAjaxUpdateDBResponse);\n    };\n        /**\n         * Prepare the data to be saved in the DB.\n         * @param {object} item\n         * @param {bool} maineditorIsTextArea\n         * @returns {{ id, tid: *, field, table, text: string}}\n         */\n        const prepareDbUpdateItem = (item, maineditorIsTextArea) => {\n            const key = item.key;\n            const textTosave = getupdatedtext(key, maineditorIsTextArea);\n            item.text = textTosave;\n            return {\n                id: item.id,\n                tid: item.tid,\n                field: item.field,\n                table: item.table,\n                text: textTosave,\n                cmid: item.cmid,\n                keyid: key\n            };\n        };\n        /**\n         * Update Textarea.\n         *\n         * @param {string} key\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getupdatedtext = (key, maineditorIsTextArea) => {\n            Log.debug(`translation/getupdatedtext:125 > targetLang`);\n            Log.debug(targetLang);\n            const sourceItemLang = tempTranslations[key].sourceLang;\n            const fieldText = tempTranslations[key].fieldText; // Translation\n            const translation = getEditorText(tempTranslations[key].editor, maineditorIsTextArea);// Translation\n            const source = getSourceText(key);// Translation\n            const isFirstTranslation = fieldText.indexOf(\"{mlang\") === -1;\n            const isSourceOther = sourceItemLang === mainSourceLang;\n            const tagPatterns = {\n                \"other\": \"({mlang other)(.*?){mlang}\",\n                \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n                \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n            };\n            const langsItems = {\n                \"fullContent\": fieldText,\n                \"other\": `{mlang other}${source}{mlang}`,\n                \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n                \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n            };\n            if (isFirstTranslation) {\n                // No mlang tag : easy.\n                if (isSourceOther) {\n                    return langsItems.other + langsItems.target;\n                } else {\n                    return langsItems.other + langsItems.source + langsItems.target;\n                }\n            }\n            // Alreaddy mlang tag-s.\n            return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n        };\n        /**\n         * Update Textarea when there was mlang tags.\n         * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n         * @param {boolean} isSourceOther\n         * @param {string} tagPatterns\n         * @param {string} langsItems\n         * @returns {string} {string}\n         * @todo MDL-000 refactor this.\n         */\n        const additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n            let manipulatedText = langsItems.fullContent;\n            // Do we have a TARGET tag already ?\n            const targetReg = new RegExp(tagPatterns.target, \"sg\");\n            const hasTagTarget = manipulatedText.match(targetReg);\n            if (hasTagTarget) {\n                // Yes replace it.\n                manipulatedText = manipulatedText.replace(targetReg, Tokeniser.escapeReplacementString(langsItems.target));\n            } else {\n                // No, add it at the end.\n                const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n                manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n                    langsItems.target,\n                    manipulatedText.slice(lastMlangClosingTagEnd)\n                ].join('');\n            }\n            // Do we have a OTHER tag already ?\n            const otherReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagOther = manipulatedText.match(otherReg);\n            // Do we have a SOURCE tag already ?\n            const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagSource = manipulatedText.match(sourceReg);\n            if (isSourceOther) {\n                // Whatever was the {mlang other} tag language we need to replace it by this source.\n                manipulatedText = manipulatedText.replace(otherReg, Tokeniser.escapeReplacementString(langsItems.other));\n                if (hasTagSource) {\n                    // And remove the {mlang source} tag if found.\n                    manipulatedText.replace(sourceReg, \"\");\n                }\n            } else {\n                if (!hasTagOther) {\n                    // We still add this source as otherTag of the so that it can be replaced further.\n                    const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n                    manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                        langsItems.other,\n                        manipulatedText.slice(firstMlangClosingTagEnd)\n                    ].join('');\n                }\n                if (!hasTagSource) {\n                    // Add the {mlang source} tag if not found.\n                    manipulatedText.replace(sourceReg, Tokeniser.escapeReplacementString(langsItems.source));\n                }\n            }\n            return manipulatedText;\n        };\n        /**\n         * Editor's text content.\n         *\n         * @param {HTMLElement} editor\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getEditorText = (editor, maineditorIsTextArea) => {\n            let text = editor.innerHTML;\n            if (maineditorIsTextArea) {\n                text = Utils.decodeHTML(text);\n            }\n            return text;\n        };\n        /**\n         * Source text de-tokenised.\n         *\n         * @param {String} key\n         * @returns {String}\n         * translation.js\n         */\n        const getSourceText = (key) => {\n            const sourceTokenised = tempTranslations[key].source;\n            return Tokeniser.postprocess(sourceTokenised, tempTranslations[key].tokens);\n        };\n    /**\n     * Initializing object storage before translation.\n     * @param {string} key\n     * @param {editor: object, editorType: string} editorSettings\n     * @param {string} sourceTextEncoded\n     * @param {string} multilangRawTextEncoded\n     * @param {string} sourceLang\n     */\n    const initTempForKey = (key, editorSettings, sourceTextEncoded, multilangRawTextEncoded, sourceLang) => {\n        const sourceText = Utils.fromBase64(sourceTextEncoded);\n        const fieldText = Utils.fromBase64(multilangRawTextEncoded);\n        const tokenised = Tokeniser.preprocess(sourceText, escapePatterns, escapePatterns);\n        tempTranslations[key] = {\n            editorType: editorSettings.editorType,\n            editor: editorSettings.editor,\n            source: tokenised.tokenizedText,\n            sourceLang: sourceLang,\n            fieldText: fieldText,\n            status: Selectors.statuses.wait,\n            translation: '',\n            tokens: tokenised.expressions\n        };\n    };\n    /**\n     * Wipe pout the temp.\n     * @param {string} key\n     */\n    const initTemp = (key)=>{\n        tempTranslations[key] = {\n            editorType: null,\n            editor: null,\n            source: '',\n            sourceLang: '',\n            fieldText: '',\n            status: '',\n            translation: '',\n            tokens: []\n        };\n    };\n\n    const prepareTranslation = (key) => {\n        return {\n            text: tempTranslations[key].source,\n            // eslint-disable-next-line camelcase\n            source_lang: tempTranslations[key].sourceLang,\n            key: key\n        };\n    };\n    /**\n     * Call the external translation service to translate the selected keys.\n     *\n     * @param {array} keys\n     */\n    const callTranslations = (keys) => {\n        const translations = [];\n        Log.debug(`translation/callTranslations:291 > targetLang`);\n        Log.debug(targetLang);\n        prepareAdvancedSettings(targetLang);\n        keys.forEach((key) => {\n            translations.push(prepareTranslation(key));\n        });\n        Events.on(Api.DEEPL_SUCCESS, onTranslateSuccess);\n        Events.on(Api.DEEPL_FAILED, onTranslateFailed);\n        Log.info(`translation/callTranslations:296`);\n        Log.info(translations);\n        Log.info(`translation/callTranslations:298`);\n        Log.info(settings);\n        Log.info(`translation/callTranslations:300`);\n        Log.info(tempTranslations);\n        Api.translate(translations, settings);\n    };\nconst onTranslateSuccess = (response)=>{\n    Log.debug(`translation/onTranslateSuccess:308`);\n    Log.debug(response);\n    response.forEach((tr) => {\n        if (tr.error === '') {\n            let key = tr.key;\n            let translation = Tokeniser.postprocess(tr.translated_text, tempTranslations[key].tokens);\n            tempTranslations[key].editor.innerHTML = translation;\n            tempTranslations[key].translation = translation;\n            Events.emit(ON_ITEM_TRANSLATED, key);\n        } else {\n            Events.emit(ON_TRANSLATION_FAILED, tr.error);\n        }\n    });\n};\nconst onTranslateFailed = (status, error)=>{\n    Events.emit(ON_TRANSLATION_FAILED, status, error);\n};\n    /**\n     * Compile Advanced settings.\n     *\n     * @param {string} targetLang\n     * @returns {{}}\n     * translation.js ok\n     */\n    const prepareAdvancedSettings = (targetLang) => {\n        escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n        escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n        // eslint-disable-next-line camelcase\n        settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n        settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n        // eslint-disable-next-line camelcase\n        settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n        // eslint-disable-next-line camelcase\n        settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n        settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n        // eslint-disable-next-line camelcase\n        settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n        // eslint-disable-next-line camelcase\n        settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n        // eslint-disable-next-line camelcase\n        settings.non_splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.ignore_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n        // eslint-disable-next-line camelcase\n        settings.target_lang = targetLang.toUpperCase();\n        // eslint-disable-next-line camelcase\n        settings.model_type = document.querySelector(Selectors.deepl.modelType).value ?? 'prefer_quality_optimized';\n        // eslint-disable-next-line camelcase\n        settings.show_billed_characters = true;\n\n        // Settings.auth_key = config.apikey;\n        // return settings;\n    };\n    /**\n     * Check if the item is translatable.\n     *\n     * @param {string} sourceLang\n     */\n    const isTranslatable = (sourceLang = '') =>{\n         Log.info(targetLang, sourceLang, targetLang === (sourceLang === '' ? mainSourceLang : sourceLang));\n        // Return targetLang !== (sourceLang === '' ? mainSourceLang : sourceLang);\n        return targetLang !== '';\n    };\n        const translated = (key)=>{\n            return tempTranslations[key]?.translation?.length > 0;\n        };\n        const init = (cfg) => {\n            courseid = cfg.courseid;\n            userid = cfg.userid;\n            setMainLangs(cfg.currentlang, cfg.targetlang);\n        };\n        return {\n            init: init,\n        callTranslations: callTranslations,\n        saveTranslations: saveTranslations,\n        initTempForKey: initTempForKey,\n        initTemp: initTemp,\n        ON_ITEM_TRANSLATED: ON_ITEM_TRANSLATED,\n        ON_DB_FAILED: ON_DB_FAILED,\n        ON_ITEM_SAVED: ON_ITEM_SAVED,\n        ON_ITEM_NOT_SAVED: ON_ITEM_NOT_SAVED,\n        ON_TRANSLATION_FAILED: ON_TRANSLATION_FAILED,\n        ON_TRANSLATION_SUCCESS: ON_DB_SAVE_SUCCESS,\n        /* TempTranslations: tempTranslations,*/\n        setMainLangs: setMainLangs,\n        isTranslatable: isTranslatable,\n        translated: translated\n    };\n});\n"],"names":["define","Log","Api","Utils","Selectors","Tokeniser","Events","tempTranslations","escapePatterns","mainSourceLang","targetLang","courseid","userid","settings","setMainLangs","source","target","onTrDbSuccess","data","error","length","emit","errors","filter","item","forEach","debug","keyid","text","onTrDbFailed","status","trace","prepareDbUpdateItem","maineditorIsTextArea","key","textTosave","getupdatedtext","id","tid","field","table","cmid","sourceItemLang","sourceLang","fieldText","translation","getEditorText","editor","getSourceText","isFirstTranslation","indexOf","isSourceOther","tagPatterns","langsItems","other","additionalUpdate","manipulatedText","fullContent","targetReg","RegExp","match","replace","escapeReplacementString","lastMlangClosingTagEnd","lastIndexOf","slice","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","innerHTML","decodeHTML","sourceTokenised","postprocess","tokens","onTranslateSuccess","response","tr","translated_text","onTranslateFailed","prepareAdvancedSettings","LATEX","document","querySelector","actions","escapeLatex","checked","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","value","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","target_lang","toUpperCase","model_type","modelType","show_billed_characters","init","cfg","currentlang","targetlang","callTranslations","keys","translations","push","source_lang","prepareTranslation","on","DEEPL_SUCCESS","DEEPL_FAILED","info","translate","saveTranslations","items","config","map","userPrefs","TR_DB_SUCCESS","TR_DB_FAILED","updateTranslationsInDb","initTempForKey","editorSettings","sourceTextEncoded","multilangRawTextEncoded","sourceText","fromBase64","tokenised","preprocess","editorType","tokenizedText","statuses","wait","expressions","initTemp","ON_ITEM_TRANSLATED","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","ON_TRANSLATION_FAILED","ON_TRANSLATION_SUCCESS","isTranslatable","translated"],"mappings":"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"}