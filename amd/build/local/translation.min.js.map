{"version":3,"file":"translation.min.js","sources":["../../src/local/translation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/translation.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/log', './api', './utils', './selectors', './tokeniser', './customevents'],\n    (Log, Api, Utils, Selectors, Tokeniser, Events) => {\n        let tempTranslations = {};\n        let escapePatterns = {};\n        let mainSourceLang = \"\";\n        let deeplSourceLang = \"\";\n        let targetLang = \"\";\n        let moodleTargetToSave = \"\";\n        let courseid = 0;\n        let userid = 0;\n        let rephrasesymbol = '';\n        const deeplSettinRegex = /\\[(name=\"local_deepler|data-id=\"local_deepler)\\/(\\w+)\"\\]/i;\n        const ON_ITEM_TRANSLATED = 'onItemTranslated';\n        // Const ON_ITEM_NOT_TRANSLATED = 'onItemsNotTranslated';\n        const ON_ITEM_SAVED = 'onItemSaved';\n        const ON_ITEM_NOT_SAVED = 'onItemNotSaved';\n        const ON_TRANSLATION_FAILED = 'onTranslationFailed';\n        const ON_REPHRASE_FAILED = 'onRephraseFailed';\n        const ON_DB_SAVE_SUCCESS = 'onDbSuccess';\n        const ON_DB_FAILED = 'onDbFailed';\n        /**\n         * Prepare the langaue settings.\n         *\n         * @param {object} config\n         */\n        const setMainLangs = (config) => {\n            if (config.currentlang !== undefined && config.currentlang !== '') {\n                mainSourceLang = config.currentlang;\n            }\n            if (config.targetlang !== undefined && config.targetlang !== '') {\n                targetLang = config.targetlang.toLowerCase();\n            }\n            if (config.deeplsourcelang !== undefined && config.deeplsourcelang !== '') {\n                deeplSourceLang = config.deeplsourcelang.toLowerCase();\n            }\n        };\n        /**\n         * When translation successfully stored in Moodle's DB.\n         *\n         * @param {object} data\n         */\n        const onTrDbSuccess = (data)=>{\n            if (data.length === 0) {\n                Events.emit(ON_DB_FAILED, 'no data returned', '');\n            } else {\n                const errors = data.filter((item) => item.error !== '');\n                data.forEach((item) => {\n                    if (item.error === '') {\n                        // Refreshing the text in the temp obbject in case of new translation without page refresh.\n                        tempTranslations[item.keyid].fieldText = item.text;\n                        Events.emit(ON_ITEM_SAVED, item.keyid, item.text);\n                    } else {\n                        Events.emit(ON_ITEM_NOT_SAVED, item.keyid, item.error);\n                    }\n                });\n                Events.emit(ON_DB_SAVE_SUCCESS, errors);\n            }\n        };\n        /**\n         * Translation DB failed.\n         * @param {int} status\n         * @param {string} error\n         */\n        const onTrDbFailed = (status, error) =>{\n                Events.emit(ON_DB_FAILED, error, status);\n                Log.trace(status);\n                Log.trace(error);\n            };\n        /**\n         * Save translations to the DB.\n         * @param {array} items\n         * @param {object} config\n         */\n        const saveTranslations = (items, config) => {\n            const data = items.map(item => prepareDbUpdateItem(item, config.userPrefs === 'textarea'));\n            Log.debug(`translation/x/saveTranslations::data`);\n            Log.debug(data);\n            Events.on(Api.TR_DB_SUCCESS, onTrDbSuccess);\n            Events.on(Api.TR_DB_FAILED, onTrDbFailed);\n            Api.updateTranslationsInDb(data, userid, courseid);\n        };\n        /**\n         * Prepare the data to be saved in the DB.\n         *\n         * @param {object} item\n         * @param {boolean} maineditorIsTextArea\n         * @returns {{ id, tid: *, field, table, text: string}}\n         */\n        const prepareDbUpdateItem = (item, maineditorIsTextArea) => {\n            const key = item.key;\n            Log.debug(tempTranslations[key]);\n            // Const textTosave = getupdatedtext(key, maineditorIsTextArea);\n            const textTosave = getEditorText(tempTranslations[key].editor, maineditorIsTextArea);\n            Log.debug(`translation/x/prepareDbUpdateItem::textTosave`);\n            Log.debug(textTosave);\n            Log.debug(tempTranslations[key]);\n            Log.debug(mainSourceLang);\n            Log.debug(deeplSourceLang);\n            Log.debug(moodleTargetToSave);\n            // TextTosave = getEditorText(key, maineditorIsTextArea);\n            return {\n                tid: item.tid,\n                text: getEditorText(tempTranslations[key].editor, maineditorIsTextArea),\n                keyid: key,\n                mainsourcecode: mainSourceLang,\n                sourcecode: tempTranslations[key].sourceLang,\n                targetcode: document.querySelector(Selectors.actions.targetCompatibleSwitcher).value,\n                sourcetext: getSourceText(key)\n            };\n        };\n        /**\n         * Editor's text content.\n         *\n         * @param {HTMLElement} editor\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getEditorText = (editor, maineditorIsTextArea) => {\n            let text = editor.innerHTML;\n            if (maineditorIsTextArea) {\n                text = Utils.decodeHTML(text);\n            }\n            return text;\n        };\n        /**\n         * Source text de-tokenised.\n         *\n         * @param {String} key\n         * @returns {String}\n         * translation.js\n         */\n        const getSourceText = (key) => {\n            const sourceTokenised = tempTranslations[key].source;\n            return Tokeniser.postprocess(sourceTokenised, tempTranslations[key].tokens);\n        };\n        /**\n         * Initializing object storage before translation.\n         *\n         * @param {string} key\n         * @param {editor: object, editorType: string} editorSettings\n         * @param {string} sourceTextEncoded\n         * @param {string} multilangRawTextEncoded\n         * @param {string} sourceLang\n         */\n        const initTempForKey = (key, editorSettings, sourceTextEncoded, multilangRawTextEncoded, sourceLang) => {\n            const sourceText = Utils.fromBase64(sourceTextEncoded);\n            const fieldText = Utils.fromBase64(multilangRawTextEncoded);\n            const tokenised = Tokeniser.preprocess(sourceText, escapePatterns);\n            tempTranslations[key] = {\n                editorType: editorSettings.editorType,\n                editor: editorSettings.editor,\n                source: tokenised.tokenizedText,\n                sourceLang: sourceLang,\n                fieldText: fieldText,\n                status: Selectors.statuses.wait,\n                translation: '',\n                tokens: tokenised.expressions\n            };\n        };\n        /**\n         * Wipe pout the temp.\n         * @param {string} key\n         */\n        const initTemp = (key)=>{\n            tempTranslations[key] = {\n                editorType: null,\n                editor: null,\n                source: '',\n                sourceLang: '',\n                fieldText: '',\n                status: '',\n                translation: '',\n                tokens: []\n            };\n        };\n        /**\n         * Prepare the texts for the external api calls.\n         *\n         * @param {string} key\n         * @returns {{text, source_lang: (string|string|*), key}}\n         */\n        const prepareTranslation = (key) => {\n            return {\n                text: tempTranslations[key].source,\n                // eslint-disable-next-line camelcase\n                source_lang: tempTranslations[key].sourceLang,\n                key: key\n            };\n        };\n        /**\n         * Call the external translation service to translate the selected keys.\n         *\n         * @param {array} keys\n         * @param {object} config\n         * @param {object} settings\n         * @return void\n         */\n        const callTranslations = (keys, config, settings) => {\n            rephrasesymbol = config.rephrasesymbol;\n            const translations = [];\n            const rephrases = [];\n            // We parse and check if it is a tranlsation or text improvment.\n            keys.forEach((key) => {\n                const t = prepareTranslation(key);\n                if (config.canimprove && t.source_lang.includes(rephrasesymbol)) {\n                    delete t.source_lang;\n                    Log.debug(`translation/x/callTranslations::t`);\n                    Log.debug(t);\n                    rephrases.push(t);\n                } else {\n                    translations.push(t);\n                }\n            });\n            if (translations.length > 0) {\n                Events.on(Api.DEEPL_SUCCESS, onTranslateSuccess);\n                Events.on(Api.DEEPL_FAILED, onTranslateFailed);\n                 Api.translate(translations, prepareTranslationSettings(settings), Api.APP_VERSION);\n            }\n            if (rephrases.length > 0) {\n                Events.on(Api.DEEPL_RF_SUCCESS, onRephraseSuccess);\n                Events.on(Api.DEEPL_RF_FAILED, onRephaseFailed);\n                Api.rephrase(rephrases, prepareRephraseSettings(settings), Api.APP_VERSION);\n            }\n        };\n        /**\n         * When translation went good.\n         *\n         * @param {object} response\n         */\n        const onTranslateSuccess = (response)=>{\n            Log.info(response);\n            const glossaries = [];\n            response.forEach((tr) => {\n                if (tr.error === '') {\n                    // For now used glossary_id should, be the same for the batch,\n                    // but it would make sense to use a single glossary for each text.\n                    if (glossaries.indexOf(tr.glossary_id) === -1) {\n                        glossaries.push(tr.glossary_id);\n                    }\n                    let key = tr.key;\n                    let translation = Tokeniser.postprocess(tr.translated_text, tempTranslations[key].tokens);\n                    tempTranslations[key].editor.innerHTML = translation;\n                    tempTranslations[key].translation = translation;\n                    Events.emit(ON_ITEM_TRANSLATED, key);\n                } else {\n                    Events.emit(ON_TRANSLATION_FAILED, tr.error);\n                }\n            });\n            Api.updateGlossariesUsage(glossaries);\n        };\n        /**\n         * When rephrasing went good.\n         *\n         * @param {object} response\n         */\n        const onRephraseSuccess = (response)=>{\n            response.forEach((tr) => {\n                if (tr.error === '') {\n                    let key = tr.key;\n                    let rephrase = Tokeniser.postprocess(tr.text, tempTranslations[key].tokens);\n                    tempTranslations[key].editor.innerHTML = rephrase;\n                    tempTranslations[key].translation = rephrase;\n                    Events.emit(ON_ITEM_TRANSLATED, key);\n                } else {\n                    Events.emit(ON_REPHRASE_FAILED, tr.error);\n                }\n            });\n        };\n        /**\n         * When translation failed.\n         *\n         * @param {int} status\n         * @param {string} error\n         */\n        const onTranslateFailed = (status, error)=>{\n            Events.emit(ON_TRANSLATION_FAILED, status, error);\n        };\n        /**\n         * Event handler for when the rephrase fails.\n         *\n         * @param {int} status\n         * @param {string} error\n         */\n        const onRephaseFailed = (status, error)=>{\n            Events.emit(ON_REPHRASE_FAILED, status, error);\n        };\n        /**\n         * Set up the Deepl settings needed for translations.\n         *\n         * @param {object} settings\n         * @returns {{}}\n         */\n        const prepareTranslationSettings = (settings)=>{\n            const trSelectors = [\n                Selectors.deepl.tagHandling,\n                Selectors.deepl.context,\n                Selectors.deepl.splitSentences,\n                Selectors.deepl.preserveFormatting,\n                Selectors.deepl.formality,\n                Selectors.deepl.glossaryId,\n                Selectors.deepl.outlineDetection,\n                Selectors.deepl.nonSplittingTags,\n                Selectors.deepl.splittingTags,\n                Selectors.deepl.ignoreTags,\n                Selectors.deepl.modelType\n            ];\n            const s = filterSetting(settings, trSelectors);\n            // eslint-disable-next-line camelcase\n            s.target_lang = targetLang.toUpperCase();\n            // eslint-disable-next-line camelcase\n            s.show_billed_characters = true;\n            return s;\n        };\n        /**\n         * Set up the Deepl settings needed for rephrases.\n         * @param {object}  settings\n         * @returns {{}}\n         */\n        const prepareRephraseSettings = (settings)=>{\n            const rephraseSelectors = [Selectors.deepl.toneorstyle];\n            const s = filterSetting(settings, rephraseSelectors);\n            // eslint-disable-next-line camelcase\n            s.target_lang = targetLang.toUpperCase();\n            return s;\n        };\n        /**\n         * Filter the UI settings by Deepl service needed set.\n         * @param {object} settings\n         * @param {array}  selList\n         * @returns {{}}\n         */\n        const filterSetting = (settings, selList) =>{\n            const se = {};\n            for (let i in selList) {\n                const set = selList[i].match(deeplSettinRegex)[2];\n                se[set] = settings[selList[i]];\n            }\n            return se;\n        };\n        /**\n         * Check if the item is translatable.\n         */\n        const isTranslatable = () =>{\n            return targetLang !== '';\n        };\n        /**\n         * Checks if translation is done.\n         *\n         * @param {string} key\n         * @returns {boolean}\n         */\n        const translated = (key)=>{\n            return tempTranslations[key]?.translation?.length > 0;\n        };\n        /**\n         * Wrapper to trace the temp for a field.\n         *\n         * @param {string} key\n         */\n        const debugTemp = (key)=>{\n            Log.debug(`translation/x/debugTemp::key`);\n            Log.debug(key);\n            Log.debug(tempTranslations[key]);\n        };\n        /**\n         * IOne to start them all.\n         *\n         * @param {object} cfg\n         */\n        const init = (cfg) => {\n            Api.APP_VERSION = cfg.version;\n            courseid = cfg.courseid;\n            userid = cfg.userid;\n            setMainLangs(cfg);\n        };\n        /**\n         * Api to be used by the other modules.\n         */\n        return {\n            init: init,\n            debugTemp: debugTemp,\n            callTranslations: callTranslations,\n            saveTranslations: saveTranslations,\n            initTempForKey: initTempForKey,\n            initTemp: initTemp,\n            setMainLangs: setMainLangs,\n            isTranslatable: isTranslatable,\n            translated: translated,\n            ON_ITEM_TRANSLATED: ON_ITEM_TRANSLATED,\n            ON_DB_FAILED: ON_DB_FAILED,\n            ON_ITEM_SAVED: ON_ITEM_SAVED,\n            ON_ITEM_NOT_SAVED: ON_ITEM_NOT_SAVED,\n            ON_TRANSLATION_FAILED: ON_TRANSLATION_FAILED,\n            ON_REPHRASE_FAILED: ON_REPHRASE_FAILED,\n            ON_DB_SAVE_SUCCESS: ON_DB_SAVE_SUCCESS,\n    };\n});\n"],"names":["define","Log","Api","Utils","Selectors","Tokeniser","Events","tempTranslations","escapePatterns","mainSourceLang","deeplSourceLang","targetLang","courseid","userid","rephrasesymbol","deeplSettinRegex","setMainLangs","config","undefined","currentlang","targetlang","toLowerCase","deeplsourcelang","onTrDbSuccess","data","length","emit","errors","filter","item","error","forEach","keyid","fieldText","text","onTrDbFailed","status","trace","prepareDbUpdateItem","maineditorIsTextArea","key","debug","textTosave","getEditorText","editor","tid","mainsourcecode","sourcecode","sourceLang","targetcode","document","querySelector","actions","targetCompatibleSwitcher","value","sourcetext","getSourceText","innerHTML","decodeHTML","sourceTokenised","source","postprocess","tokens","onTranslateSuccess","response","info","glossaries","tr","indexOf","glossary_id","push","translation","translated_text","updateGlossariesUsage","onRephraseSuccess","rephrase","onTranslateFailed","onRephaseFailed","prepareTranslationSettings","settings","trSelectors","deepl","tagHandling","context","splitSentences","preserveFormatting","formality","glossaryId","outlineDetection","nonSplittingTags","splittingTags","ignoreTags","modelType","s","filterSetting","target_lang","toUpperCase","show_billed_characters","prepareRephraseSettings","rephraseSelectors","toneorstyle","selList","se","i","match","init","cfg","APP_VERSION","version","debugTemp","callTranslations","keys","translations","rephrases","t","source_lang","prepareTranslation","canimprove","includes","on","DEEPL_SUCCESS","DEEPL_FAILED","translate","DEEPL_RF_SUCCESS","DEEPL_RF_FAILED","saveTranslations","items","map","userPrefs","TR_DB_SUCCESS","TR_DB_FAILED","updateTranslationsInDb","initTempForKey","editorSettings","sourceTextEncoded","multilangRawTextEncoded","sourceText","fromBase64","tokenised","preprocess","editorType","tokenizedText","statuses","wait","expressions","initTemp","isTranslatable","translated","ON_ITEM_TRANSLATED","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS"],"mappings":"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"}