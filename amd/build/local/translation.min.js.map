{"version":3,"file":"translation.min.js","sources":["../../src/local/translation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/translation.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/log', './api', './utils', './selectors', './tokeniser', './customevents'],\n    (Log, Api, Utils, Selectors, Tokeniser, Events) => {\n    let tempTranslations = {};\n    let escapePatterns = {};\n    let mainSourceLang = \"\";\n    let targetLang = \"\";\n    let courseid = 0;\n    let userid = 0;\n    let settings = {};\n    let settingsRephrase = {};\n    const ON_ITEM_TRANSLATED = 'onItemTranslated';\n    // Const ON_ITEM_NOT_TRANSLATED = 'onItemsNotTranslated';\n    const ON_ITEM_SAVED = 'onItemSaved';\n    const ON_ITEM_NOT_SAVED = 'onItemNotSaved';\n    const ON_TRANSLATION_FAILED = 'onTranslationFailed';\n    const ON_REPHRASE_FAILED = 'onRephraseFailed';\n    const ON_DB_SAVE_SUCCESS = 'onDbSuccess';\n    const ON_DB_FAILED = 'onDbFailed';\n    const setMainLangs = (source = '', target = '') => {\n        if (source !== '') {\n            mainSourceLang = source;\n        }\n        if (target !== '') {\n            targetLang = target.toLowerCase();\n        }\n    };\n    const onTrDbSuccess = (data)=>{\n        Log.info(data);\n        if (data.length === 0) {\n            Log.error(data);\n            Events.emit(ON_DB_FAILED, 'no data returned', '');\n            // ShowModal();\n        } else {\n            const errors = data.filter((item) => item.error !== '');\n            data.forEach((item) => {\n                // Ui.setIconStatus(item.key, Selectors.statuses.saved, true);\n                Log.debug(`translation/:54`);\n                Log.debug(item);\n                if (item.error === '') {\n                    Events.emit(ON_ITEM_SAVED, item.keyid, item.text);\n                } else {\n                    Events.emit(ON_ITEM_NOT_SAVED, item.keyid, item.error);\n                }\n            });\n            Events.emit(ON_DB_SAVE_SUCCESS, errors);\n        }\n    };\n    /**\n     * Translation DB failed.\n     * @param {int} status\n     * @param {string} error\n     */\n    const onTrDbFailed = (status, error) =>{\n            Events.emit(ON_DB_FAILED, error, status);\n            Log.trace(status);\n            Log.trace(error);\n        };\n    /**\n     * Save translations to the DB.\n     * @param {array} items\n     * @param {object} config\n     */\n    const saveTranslations = (items, config) => {\n        const data = items.map(item => prepareDbUpdateItem(item, config.userPrefs === 'textarea'));\n        Events.on(Api.TR_DB_SUCCESS, onTrDbSuccess);\n        Events.on(Api.TR_DB_FAILED, onTrDbFailed);\n        Api.updateTranslationsInDb(data, userid, courseid);\n    };\n        /**\n         * Prepare the data to be saved in the DB.\n         * @param {object} item\n         * @param {bool} maineditorIsTextArea\n         * @returns {{ id, tid: *, field, table, text: string}}\n         */\n        const prepareDbUpdateItem = (item, maineditorIsTextArea) => {\n            const key = item.key;\n            const textTosave = getupdatedtext(key, maineditorIsTextArea);\n            item.text = textTosave;\n            return {\n                id: item.id,\n                tid: item.tid,\n                field: item.field,\n                table: item.table,\n                text: textTosave,\n                cmid: item.cmid,\n                keyid: key\n            };\n        };\n        /**\n         * Update Textarea.\n         *\n         * @param {string} key\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getupdatedtext = (key, maineditorIsTextArea) => {\n            const sourceItemLang = tempTranslations[key].sourceLang.toLowerCase();\n            const fieldText = tempTranslations[key].fieldText; // Translation\n            const translation = getEditorText(tempTranslations[key].editor, maineditorIsTextArea);// Translation\n            const source = getSourceText(key);// Translation\n            const isFirstTranslation = fieldText.indexOf(\"{mlang\") === -1;\n            const isSourceOther = sourceItemLang === mainSourceLang;\n            const tagPatterns = {\n                \"other\": \"({mlang other)(.*?){mlang}\",\n                \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n                \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n            };\n            const langsItems = {\n                \"fullContent\": fieldText,\n                \"other\": `{mlang other}${source}{mlang}`,\n                \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n                \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n            };\n            if (isFirstTranslation) {\n                // No mlang tag : easy.\n                if (isSourceOther) {\n                    return langsItems.other + langsItems.target;\n                } else {\n                    return langsItems.other + langsItems.source + langsItems.target;\n                }\n            }\n            // Alreaddy mlang tag-s.\n            return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n        };\n        /**\n         * Update Textarea when there was mlang tags.\n         * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n         * @param {boolean} isSourceOther\n         * @param {string} tagPatterns\n         * @param {string} langsItems\n         * @returns {string} {string}\n         * @todo MDL-000 refactor this.\n         */\n        const additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n            let manipulatedText = langsItems.fullContent;\n            // Do we have a TARGET tag already ?\n            const targetReg = new RegExp(tagPatterns.target, \"sgi\");\n            const hasTagTarget = manipulatedText.match(targetReg);\n            if (hasTagTarget) {\n                // Yes replace it.\n                manipulatedText = manipulatedText.replace(targetReg, Tokeniser.escapeReplacementString(langsItems.target));\n            } else {\n                // No, add it at the end.\n                const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n                manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n                    langsItems.target,\n                    manipulatedText.slice(lastMlangClosingTagEnd)\n                ].join('');\n            }\n            // Do we have a OTHER tag already ?\n            const otherReg = new RegExp(tagPatterns.other, \"sgi\");\n            const hasTagOther = manipulatedText.match(otherReg);\n            // Do we have a SOURCE tag already ?\n            const sourceReg = new RegExp(tagPatterns.other, \"sgi\");\n            const hasTagSource = manipulatedText.match(sourceReg);\n            if (isSourceOther) {\n                // Whatever was the {mlang other} tag language we need to replace it by this source.\n                manipulatedText = manipulatedText.replace(otherReg, Tokeniser.escapeReplacementString(langsItems.other));\n                if (hasTagSource) {\n                    // And remove the {mlang source} tag if found.\n                    manipulatedText.replace(sourceReg, \"\");\n                }\n            } else {\n                if (!hasTagOther) {\n                    // We still add this source as otherTag of the so that it can be replaced further.\n                    const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n                    manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                        langsItems.other,\n                        manipulatedText.slice(firstMlangClosingTagEnd)\n                    ].join('');\n                }\n                if (!hasTagSource) {\n                    // Add the {mlang source} tag if not found.\n                    manipulatedText.replace(sourceReg, Tokeniser.escapeReplacementString(langsItems.source));\n                }\n            }\n            return manipulatedText;\n        };\n        /**\n         * Editor's text content.\n         *\n         * @param {HTMLElement} editor\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getEditorText = (editor, maineditorIsTextArea) => {\n            let text = editor.innerHTML;\n            if (maineditorIsTextArea) {\n                text = Utils.decodeHTML(text);\n            }\n            return text;\n        };\n        /**\n         * Source text de-tokenised.\n         *\n         * @param {String} key\n         * @returns {String}\n         * translation.js\n         */\n        const getSourceText = (key) => {\n            const sourceTokenised = tempTranslations[key].source;\n            return Tokeniser.postprocess(sourceTokenised, tempTranslations[key].tokens);\n        };\n    /**\n     * Initializing object storage before translation.\n     * @param {string} key\n     * @param {editor: object, editorType: string} editorSettings\n     * @param {string} sourceTextEncoded\n     * @param {string} multilangRawTextEncoded\n     * @param {string} sourceLang\n     */\n    const initTempForKey = (key, editorSettings, sourceTextEncoded, multilangRawTextEncoded, sourceLang) => {\n        const sourceText = Utils.fromBase64(sourceTextEncoded);\n        const fieldText = Utils.fromBase64(multilangRawTextEncoded);\n        const tokenised = Tokeniser.preprocess(sourceText, escapePatterns, escapePatterns);\n        tempTranslations[key] = {\n            editorType: editorSettings.editorType,\n            editor: editorSettings.editor,\n            source: tokenised.tokenizedText,\n            sourceLang: sourceLang,\n            fieldText: fieldText,\n            status: Selectors.statuses.wait,\n            translation: '',\n            tokens: tokenised.expressions\n        };\n    };\n    /**\n     * Wipe pout the temp.\n     * @param {string} key\n     */\n    const initTemp = (key)=>{\n        tempTranslations[key] = {\n            editorType: null,\n            editor: null,\n            source: '',\n            sourceLang: '',\n            fieldText: '',\n            status: '',\n            translation: '',\n            tokens: []\n        };\n    };\n        /**\n         * Prepare the texts for the external api calls.\n         *\n         * @param {string} key\n         * @returns {{text, source_lang: (string|string|*), key}}\n         */\n    const prepareTranslation = (key) => {\n        return {\n            text: tempTranslations[key].source,\n            // eslint-disable-next-line camelcase\n            source_lang: tempTranslations[key].sourceLang,\n            key: key\n        };\n    };\n    /**\n     * Call the external translation service to translate the selected keys.\n     *\n     * @param {array} keys\n     * @param {object} config\n     * @return void\n     */\n    const callTranslations = (keys, config) => {\n        const translations = [];\n        const rephrases = [];\n        prepareAdvancedSettings(targetLang, config);\n        // We parse and check if it is a tranlsation or text improvment.\n        keys.forEach((key) => {\n            const t = prepareTranslation(key);\n            if (config.canimprove && t.source_lang.includes(config.rephrasesymbol)) {\n                delete t.source_lang;\n                rephrases.push(t);\n            } else {\n                translations.push(t);\n            }\n        });\n        if (translations.length > 0) {\n            Events.on(Api.DEEPL_SUCCESS, onTranslateSuccess);\n            Events.on(Api.DEEPL_FAILED, onTranslateFailed);\n             Api.translate(translations, settings, Api.APP_VERSION);\n        }\n        if (rephrases.length > 0) {\n            Events.on(Api.DEEPL_RF_SUCCESS, onRephraseSuccess);\n            Events.on(Api.DEEPL_RF_FAILED, onRephaseFailed);\n            Api.rephrase(rephrases, settingsRephrase, Api.APP_VERSION);\n        }\n    };\n    const onTranslateSuccess = (response)=>{\n        Log.info(`translation//onTranslateSuccess::response`);\n        Log.info(response);\n        response.forEach((tr) => {\n            if (tr.error === '') {\n                let key = tr.key;\n                let translation = Tokeniser.postprocess(tr.translated_text, tempTranslations[key].tokens);\n                Log.debug(`translation/onTranslateSuccess/each::translation Tokeniser.postprocess`);\n                Log.debug(translation);\n                tempTranslations[key].editor.innerHTML = translation;\n                Log.debug(`translation/onTranslateSuccess::tempTranslations[key].editor.innerHTML`);\n                Log.debug(tempTranslations[key].editor.innerHTML);\n                tempTranslations[key].translation = translation;\n                Events.emit(ON_ITEM_TRANSLATED, key);\n            } else {\n                Events.emit(ON_TRANSLATION_FAILED, tr.error);\n            }\n        });\n    };\n    const onRephraseSuccess = (response)=>{\n        Log.info(`translation//onRephraseSuccess::response`);\n        Log.info(response);\n        response.forEach((tr) => {\n            if (tr.error === '') {\n                let key = tr.key;\n                let rephrase = Tokeniser.postprocess(tr.text, tempTranslations[key].tokens);\n                Log.debug(`translation/onRephraseSuccess/each::translation Tokeniser.postprocess`);\n                Log.debug(rephrase);\n                tempTranslations[key].editor.innerHTML = rephrase;\n                Log.debug(`translation/onTranslateSuccess::tempTranslations[key].editor.innerHTML`);\n                Log.debug(tempTranslations[key].editor.innerHTML);\n                tempTranslations[key].translation = rephrase;\n                Events.emit(ON_ITEM_TRANSLATED, key);\n            } else {\n                Events.emit(ON_REPHRASE_FAILED, tr.error);\n            }\n        });\n    };\n    const onTranslateFailed = (status, error)=>{\n        Events.emit(ON_TRANSLATION_FAILED, status, error);\n    };\n    const onRephaseFailed = (status, error)=>{\n        Events.emit(ON_REPHRASE_FAILED, status, error);\n    };\n    /**\n     * Compile Advanced settings.\n     *\n     * @param {string} targetLang\n     * @param {object} config\n     * @returns {{}}\n     * translation.js ok\n     */\n    const prepareAdvancedSettings = (targetLang, config) => {\n        escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n        escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n        // eslint-disable-next-line camelcase\n        settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n        settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n        // eslint-disable-next-line camelcase\n        settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n        // eslint-disable-next-line camelcase\n        settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n        settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n        // eslint-disable-next-line camelcase\n        settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n        if (settings.glossary_id !== '') {\n            Utils.setCookie(Utils.COOKIE_PREFIX + mainSourceLang + targetLang + courseid, settings.glossary_id, 703);\n        }\n        // eslint-disable-next-line camelcase\n        settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n        // eslint-disable-next-line camelcase\n        settings.non_splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.ignore_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n        // eslint-disable-next-line camelcase\n        settings.model_type = document.querySelector(Selectors.deepl.modelType).value ?? 'prefer_quality_optimized';\n        // eslint-disable-next-line camelcase\n        settings.show_billed_characters = true;\n        // eslint-disable-next-line camelcase\n        settings.target_lang = targetLang.toUpperCase();\n        if (config.canimprove) {\n            settingsRephrase.target_lang = settings.target_lang;\n            settingsRephrase.toneorstyle = document.querySelector(Selectors.deepl.toneorstyle).value ?? 'default';\n        }\n    };\n    /**\n     * Check if the item is translatable.\n     * @todo MDL-0000 implement in v1.4.0 (return based on local source)\n     * @param {string} sourceLang\n     */\n    const isTranslatable = (sourceLang = '') =>{\n         Log.info(targetLang, sourceLang, targetLang === (sourceLang === '' ? mainSourceLang : sourceLang));\n        // Return targetLang !== (sourceLang === '' ? mainSourceLang : sourceLang);\n        return targetLang !== '';\n    };\n        const translated = (key)=>{\n            return tempTranslations[key]?.translation?.length > 0;\n        };\n        const init = (cfg) => {\n            Api.APP_VERSION = cfg.version;\n            courseid = cfg.courseid;\n            userid = cfg.userid;\n            setMainLangs(cfg.currentlang, cfg.targetlang);\n        };\n        return {\n            init: init,\n            callTranslations: callTranslations,\n            saveTranslations: saveTranslations,\n            initTempForKey: initTempForKey,\n            initTemp: initTemp,\n            ON_ITEM_TRANSLATED: ON_ITEM_TRANSLATED,\n            ON_DB_FAILED: ON_DB_FAILED,\n            ON_ITEM_SAVED: ON_ITEM_SAVED,\n            ON_ITEM_NOT_SAVED: ON_ITEM_NOT_SAVED,\n            ON_TRANSLATION_FAILED: ON_TRANSLATION_FAILED,\n            ON_REPHRASE_FAILED: ON_REPHRASE_FAILED,\n            ON_DB_SAVE_SUCCESS: ON_DB_SAVE_SUCCESS,\n            setMainLangs: setMainLangs,\n            isTranslatable: isTranslatable,\n            translated: translated\n    };\n});\n"],"names":["define","Log","Api","Utils","Selectors","Tokeniser","Events","tempTranslations","escapePatterns","mainSourceLang","targetLang","courseid","userid","settings","settingsRephrase","setMainLangs","source","target","toLowerCase","onTrDbSuccess","data","info","length","error","emit","errors","filter","item","forEach","debug","keyid","text","onTrDbFailed","status","trace","prepareDbUpdateItem","maineditorIsTextArea","key","textTosave","getupdatedtext","id","tid","field","table","cmid","sourceItemLang","sourceLang","fieldText","translation","getEditorText","editor","getSourceText","isFirstTranslation","indexOf","isSourceOther","tagPatterns","langsItems","other","additionalUpdate","manipulatedText","fullContent","targetReg","RegExp","match","replace","escapeReplacementString","lastMlangClosingTagEnd","lastIndexOf","slice","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","innerHTML","decodeHTML","sourceTokenised","postprocess","tokens","onTranslateSuccess","response","tr","translated_text","onRephraseSuccess","rephrase","onTranslateFailed","onRephaseFailed","prepareAdvancedSettings","config","LATEX","document","querySelector","actions","escapeLatex","checked","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","value","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","setCookie","COOKIE_PREFIX","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","model_type","modelType","show_billed_characters","target_lang","toUpperCase","canimprove","toneorstyle","init","cfg","APP_VERSION","version","currentlang","targetlang","callTranslations","keys","translations","rephrases","t","source_lang","prepareTranslation","includes","rephrasesymbol","push","on","DEEPL_SUCCESS","DEEPL_FAILED","translate","DEEPL_RF_SUCCESS","DEEPL_RF_FAILED","saveTranslations","items","map","userPrefs","TR_DB_SUCCESS","TR_DB_FAILED","updateTranslationsInDb","initTempForKey","editorSettings","sourceTextEncoded","multilangRawTextEncoded","sourceText","fromBase64","tokenised","preprocess","editorType","tokenizedText","statuses","wait","expressions","initTemp","ON_ITEM_TRANSLATED","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","isTranslatable","translated"],"mappings":"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"}