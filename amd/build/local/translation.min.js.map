{"version":3,"file":"translation.min.js","sources":["../../src/local/translation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/translation.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/log', './api', './utils', './selectors', './ui', './tokeniser', './customevents'],\n    (Log, Api, Utils, Selectors, Ui, Tokeniser, Events) => {\n    let tempTranslations = {};\n    let escapePatterns = {};\n    let mainSourceLang = \"\";\n    let targetLang = \"\";\n    let settings = {};\n    const ON_ITEM_TRANSLATED = 'onItemTranslated';\n    const ON_ITEM_NOT_TRANSLATED = 'onItemNotTranslated';\n    const ON_TRANSLATION_FAILED = 'onTranslationFailed';\n    const setMainLangs = (source = '', target = '') => {\n        if (source !== '') {\n            mainSourceLang = source;\n        }\n        if (target !== '') {\n            targetLang = target;\n        }\n    };\n    const onTrDbSuccess = (data)=>{\n        Log.trace(data);\n        if (data.length === 0) {\n            Log.error(data);\n            Events.emit(ON_TRANSLATION_FAILED, {error: data.error, status: data.status});\n            // ShowModal();\n        } else {\n            data.forEach((item) => {\n                // Ui.setIconStatus(item.key, Selectors.statuses.saved, true);\n                if (item.error === '') {\n                    Events.emit(ON_ITEM_TRANSLATED, item.key);\n                } else {\n                    Events.emit(ON_ITEM_NOT_TRANSLATED, {\n                        key: item.key,\n                        error: item.error\n                    });\n                }\n            });\n        }\n    };\n    /**\n     * Translation DB failed.\n     * @param {int} status\n     * @param {string} error\n     */\n    const onTrDbFailed = (status, error) =>{\n        Events.emit(ON_TRANSLATION_FAILED, {error: error, status: status});\n            Log.trace(status);\n            Log.trace(error);\n        };\n    /**\n     * Save translations to the DB.\n     * @param {string} keys\n     * @param {object} config\n     */\n    const saveTranslations = (keys, config) => {\n        Log.trace(keys);\n        const data = keys.map(item => prepareDbUpdateItem(item, config.userPrefs === 'textarea'));\n        Events.on(Api.TR_DB_SUCCESS, onTrDbSuccess);\n        Events.on(Api.TR_DB_FAILED, onTrDbFailed);\n        Api.updateTranslationsInDb(data, config.userid);\n        // Api.callApi(\"local_deepler_update_translation\", {data: data}).done(handleAjaxUpdateDBResponse);\n    };\n        /**\n         * Prepare the data to be saved in the DB.\n         * @param {object} item\n         * @param {bool} maineditorIsTextArea\n         * @returns {{courseid, id, tid: *, field, table, text: string}}\n         */\n        const prepareDbUpdateItem = (item, maineditorIsTextArea) => {\n            const key = item.key;\n            const textTosave = getupdatedtext(key, maineditorIsTextArea);\n            item.text = textTosave;\n            return {\n                courseid: item.courseid,\n                id: item.id,\n                tid: item.tid,\n                field: item.field,\n                table: item.table,\n                text: textTosave,\n                keyid: key\n            };\n        };\n        /**\n         * Update Textarea.\n         *\n         * @param {string} key\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getupdatedtext = (key, maineditorIsTextArea) => {\n            const sourceItemLang = tempTranslations[key].sourceLang;\n            const fieldText = tempTranslations[key].fieldText; // Translation\n            const translation = getEditorText(tempTranslations[key].editor, maineditorIsTextArea);// Translation\n            const source = getSourceText(key);// Translation\n            const isFirstTranslation = fieldText.indexOf(\"{mlang\") === -1;\n            const isSourceOther = sourceItemLang === mainSourceLang;\n            const tagPatterns = {\n                \"other\": \"({mlang other)(.*?){mlang}\",\n                \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n                \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n            };\n            const langsItems = {\n                \"fullContent\": fieldText,\n                \"other\": `{mlang other}${source}{mlang}`,\n                \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n                \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n            };\n            if (isFirstTranslation) {\n                // No mlang tag : easy.\n                if (isSourceOther) {\n                    return langsItems.other + langsItems.target;\n                } else {\n                    return langsItems.other + langsItems.source + langsItems.target;\n                }\n            }\n            // Alreaddy mlang tag-s.\n            return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n        };\n        /**\n         * Update Textarea when there was mlang tags.\n         * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n         * @param {boolean} isSourceOther\n         * @param {string} tagPatterns\n         * @param {string} langsItems\n         * @returns {string} {string}\n         * @todo MDL-000 refactor this.\n         */\n        const additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n            let manipulatedText = langsItems.fullContent;\n            // Do we have a TARGET tag already ?\n            const targetReg = new RegExp(tagPatterns.target, \"sg\");\n            const hasTagTarget = manipulatedText.match(targetReg);\n            if (hasTagTarget) {\n                // Yes replace it.\n                manipulatedText = manipulatedText.replace(targetReg, Tokeniser.escapeReplacementString(langsItems.target));\n            } else {\n                // No, add it at the end.\n                const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n                manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n                    langsItems.target,\n                    manipulatedText.slice(lastMlangClosingTagEnd)\n                ].join('');\n            }\n            // Do we have a OTHER tag already ?\n            const otherReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagOther = manipulatedText.match(otherReg);\n            // Do we have a SOURCE tag already ?\n            const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n            const hasTagSource = manipulatedText.match(sourceReg);\n            if (isSourceOther) {\n                // Whatever was the {mlang other} tag language we need to replace it by this source.\n                manipulatedText = manipulatedText.replace(otherReg, Tokeniser.escapeReplacementString(langsItems.other));\n                if (hasTagSource) {\n                    // And remove the {mlang source} tag if found.\n                    manipulatedText.replace(sourceReg, \"\");\n                }\n            } else {\n                if (!hasTagOther) {\n                    // We still add this source as otherTag of the so that it can be replaced further.\n                    const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n                    manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                        langsItems.other,\n                        manipulatedText.slice(firstMlangClosingTagEnd)\n                    ].join('');\n                }\n                if (!hasTagSource) {\n                    // Add the {mlang source} tag if not found.\n                    manipulatedText.replace(sourceReg, Tokeniser.escapeReplacementString(langsItems.source));\n                }\n            }\n            return manipulatedText;\n        };\n        /**\n         * Editor's text content.\n         *\n         * @param {HTMLElement} editor\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getEditorText = (editor, maineditorIsTextArea) => {\n            let text = editor.innerHTML;\n            if (maineditorIsTextArea) {\n                text = Utils.decodeHTML(text);\n            }\n            return text;\n        };\n        /**\n         * Source text de-tokenised.\n         *\n         * @param {String} key\n         * @returns {String}\n         * translation.js\n         */\n        const getSourceText = (key) => {\n            const sourceTokenised = tempTranslations[key].source;\n            return Tokeniser.postprocess(sourceTokenised, tempTranslations[key].tokens);\n        };\n    /**\n     * Initializing object storage before translation.\n     * @param {string} key\n     * @param {editor: object, editorType: string} editorSettings\n     * @param {string} sourceTextEncoded\n     * @param {string} multilangRawTextEncoded\n     * @param {string} sourceLang\n     */\n    const initTempForKey = (key, editorSettings, sourceTextEncoded, multilangRawTextEncoded, sourceLang) => {\n        const sourceText = Utils.fromBase64(sourceTextEncoded);\n        const fieldText = Utils.fromBase64(multilangRawTextEncoded);\n        const tokenised = Tokeniser.preprocess(sourceText, escapePatterns, escapePatterns);\n        tempTranslations[key] = {\n            editorType: editorSettings.editorType,\n            editor: editorSettings.editor,\n            source: tokenised.tokenizedText,\n            sourceLang: sourceLang,\n            fieldText: fieldText,\n            status: Selectors.statuses.wait,\n            translation: '',\n            tokens: tokenised.expressions\n        };\n    };\n    /**\n     * Wipe pout the temp.\n     * @param {string} key\n     */\n    const initTemp = (key)=>{\n        tempTranslations[key] = {\n            editorType: null,\n            editor: null,\n            source: '',\n            sourceLang: '',\n            fieldText: '',\n            status: '',\n            translation: '',\n            tokens: []\n        };\n    };\n\n    const prepareTranslation = (key) => {\n        return {\n            text: tempTranslations[key].source,\n            source_lang: tempTranslations[key].sourceLang,\n            key: key\n        };\n    };\n\n    /* Const getTranslation = (key) => {\n        let formData = Utils.prepareFormData(key);\n        Api.translate(formData, (response) => {\n            let tr = Utils.postprocess(response.translations[0].text, tempTranslations[key].tokens);\n            tempTranslations[key].editor.innerHTML = tr;\n            tempTranslations[key].translation = tr;\n            Ui.setIconStatus(key, Selectors.statuses.tosave, true);\n        });\n    };*/\n    /**\n     * Call the external translation service to translate the selected keys.\n     *\n     * @param {array} keys\n     */\n    const callTranslations = (keys) => {\n        const translations = [];\n        prepareAdvancedSettings(document.querySelector(Selectors.actions.targetSwitcher).value);\n        keys.forEach((key) => {\n            // InitTempForKey(key);\n            translations.push(prepareTranslation(key));\n        });\n        Events.on(Api.DEEPL_SUCCESS, onTranslateSuccess);\n        Events.on(Api.DEEPL_FAILED, onTranslateFailed);\n        Log.info(translations);\n        Log.info(settings);\n        Api.translate(translations, settings);\n    };\nconst onTranslateSuccess = (response)=>{\n    Log.debug(response);\n    response.forEach((tr) => {\n        // @todo emit event.\n        let key = tr.key;\n        let translation = Tokeniser.postprocess(tr.translated_text, tempTranslations[key].tokens);\n        tempTranslations[key].editor.innerHTML = translation;\n        tempTranslations[key].translation = translation;\n        Log.debug(this);\n        Events.emit(ON_ITEM_TRANSLATED, key);\n        // UI.setIconStatus(key, Selectors.statuses.tosave, true);\n    });\n};\nconst onTranslateFailed = (status, error)=>{\n    window.console.log(status, error);\n};\n    /**\n     * Compile Advanced settings.\n     *\n     * @param {string} targetLang\n     * @returns {{}}\n     * translation.js ok\n     */\n    const prepareAdvancedSettings = (targetLang) => {\n        Log.info('prepareAdvancedSettings');\n        escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n        escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n        // eslint-disable-next-line camelcase\n        settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n        settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n        // eslint-disable-next-line camelcase\n        settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n        // eslint-disable-next-line camelcase\n        settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n        settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n        // eslint-disable-next-line camelcase\n        settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n        // eslint-disable-next-line camelcase\n        settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n        // eslint-disable-next-line camelcase\n        settings.non_splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.ignore_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n        // eslint-disable-next-line camelcase\n        settings.target_lang = targetLang.toUpperCase();\n        // eslint-disable-next-line camelcase\n        settings.model_type = document.querySelector(Selectors.deepl.modelType).value ?? 'prefer_quality_optimized';\n        // eslint-disable-next-line camelcase\n        settings.show_billed_characters = true;\n\n        // Settings.auth_key = config.apikey;\n        // return settings;\n    };\n    /**\n     * Check if the item is translatable.\n     *\n     * @param {string} sourceLang\n     */\n    const isTranslatable = (sourceLang = '') =>{\n         Log.info(targetLang, sourceLang, targetLang === (sourceLang === '' ? mainSourceLang : sourceLang));\n        return targetLang !== (sourceLang === '' ? mainSourceLang : sourceLang);\n    };\n        const translated = (key)=>{\n            return tempTranslations[key]?.translation?.length > 0;\n        };\n        return {\n        callTranslations: callTranslations,\n        saveTranslations: saveTranslations,\n        initTempForKey: initTempForKey,\n        initTemp: initTemp,\n        ON_ITEM_TRANSLATED: ON_ITEM_TRANSLATED,\n        ON_ITEM_NOT_TRANSLATED: ON_ITEM_NOT_TRANSLATED,\n        ON_TRANSLATION_FAILED: ON_TRANSLATION_FAILED,\n        /* TempTranslations: tempTranslations,*/\n        setMainLangs: setMainLangs,\n        isTranslatable: isTranslatable,\n        translated: translated\n    };\n});\n"],"names":["define","Log","Api","Utils","Selectors","Ui","Tokeniser","Events","tempTranslations","escapePatterns","mainSourceLang","targetLang","settings","onTrDbSuccess","data","trace","length","error","emit","status","forEach","item","key","onTrDbFailed","prepareDbUpdateItem","maineditorIsTextArea","textTosave","getupdatedtext","text","courseid","id","tid","field","table","keyid","sourceItemLang","sourceLang","fieldText","translation","getEditorText","editor","source","getSourceText","isFirstTranslation","indexOf","isSourceOther","tagPatterns","langsItems","other","target","additionalUpdate","manipulatedText","fullContent","targetReg","RegExp","match","replace","escapeReplacementString","lastMlangClosingTagEnd","lastIndexOf","slice","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","innerHTML","decodeHTML","sourceTokenised","postprocess","tokens","onTranslateSuccess","response","debug","tr","translated_text","this","onTranslateFailed","window","console","log","prepareAdvancedSettings","info","LATEX","document","querySelector","actions","escapeLatex","checked","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","value","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","target_lang","toUpperCase","model_type","modelType","show_billed_characters","callTranslations","keys","translations","targetSwitcher","push","source_lang","prepareTranslation","on","DEEPL_SUCCESS","DEEPL_FAILED","translate","saveTranslations","config","map","userPrefs","TR_DB_SUCCESS","TR_DB_FAILED","updateTranslationsInDb","userid","initTempForKey","editorSettings","sourceTextEncoded","multilangRawTextEncoded","sourceText","fromBase64","tokenised","preprocess","editorType","tokenizedText","statuses","wait","expressions","initTemp","ON_ITEM_TRANSLATED","ON_ITEM_NOT_TRANSLATED","ON_TRANSLATION_FAILED","setMainLangs","isTranslatable","translated"],"mappings":"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"}