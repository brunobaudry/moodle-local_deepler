{"version":3,"file":"translation.min.js","sources":["../../src/local/translation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @module     local_deepler/deepler\n * @file       amd/src/local/translation.js\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/log', './api', './utils', './selectors', './tokeniser', './customevents'],\n    (Log, Api, Utils, Selectors, Tokeniser, Events) => {\n    let tempTranslations = {};\n    let escapePatterns = {};\n    let mainSourceLang = \"\";\n    let deeplSourceLang = \"\";\n    let targetLang = \"\";\n    let courseid = 0;\n    let userid = 0;\n    let settings = {};\n    let settingsRephrase = {};\n    let rephrasesymbol = '';\n    const ON_ITEM_TRANSLATED = 'onItemTranslated';\n    // Const ON_ITEM_NOT_TRANSLATED = 'onItemsNotTranslated';\n    const ON_ITEM_SAVED = 'onItemSaved';\n    const ON_ITEM_NOT_SAVED = 'onItemNotSaved';\n    const ON_TRANSLATION_FAILED = 'onTranslationFailed';\n    const ON_REPHRASE_FAILED = 'onRephraseFailed';\n    const ON_DB_SAVE_SUCCESS = 'onDbSuccess';\n    const ON_DB_FAILED = 'onDbFailed';\n    const setMainLangs = (config) => {\n        Log.debug(`translation/x/setMainLangs::config`);\n        Log.debug(config);\n        if (config.currentlang !== '') {\n            mainSourceLang = config.currentlang;\n        }\n        if (config.targetlang !== '') {\n            targetLang = config.targetlang.toLowerCase();\n        }\n        if (config.deeplsourcelang !== '') {\n            deeplSourceLang = config.deeplsourcelang.toLowerCase();\n        }\n    };\n    const onTrDbSuccess = (data)=>{\n        Log.info(data);\n        if (data.length === 0) {\n            Events.emit(ON_DB_FAILED, 'no data returned', '');\n        } else {\n            const errors = data.filter((item) => item.error !== '');\n            data.forEach((item) => {\n                if (item.error === '') {\n                    // Refreshing the text in the temp obbject in case of new translation without page refresh.\n                    tempTranslations[item.keyid].fieldText = item.text;\n                    Events.emit(ON_ITEM_SAVED, item.keyid, item.text);\n                } else {\n                    Events.emit(ON_ITEM_NOT_SAVED, item.keyid, item.error);\n                }\n            });\n            Events.emit(ON_DB_SAVE_SUCCESS, errors);\n        }\n    };\n    /**\n     * Translation DB failed.\n     * @param {int} status\n     * @param {string} error\n     */\n    const onTrDbFailed = (status, error) =>{\n            Events.emit(ON_DB_FAILED, error, status);\n            Log.trace(status);\n            Log.trace(error);\n        };\n    /**\n     * Save translations to the DB.\n     * @param {array} items\n     * @param {object} config\n     */\n    const saveTranslations = (items, config) => {\n        const data = items.map(item => prepareDbUpdateItem(item, config.userPrefs === 'textarea'));\n        Events.on(Api.TR_DB_SUCCESS, onTrDbSuccess);\n        Events.on(Api.TR_DB_FAILED, onTrDbFailed);\n        Api.updateTranslationsInDb(data, userid, courseid);\n    };\n        /**\n         * Prepare the data to be saved in the DB.\n         * @param {object} item\n         * @param {bool} maineditorIsTextArea\n         * @returns {{ id, tid: *, field, table, text: string}}\n         */\n        const prepareDbUpdateItem = (item, maineditorIsTextArea) => {\n            const key = item.key;\n            const textTosave = getupdatedtext(key, maineditorIsTextArea);\n            item.text = textTosave;\n            return {\n                id: item.id,\n                tid: item.tid,\n                field: item.field,\n                table: item.table,\n                text: textTosave,\n                cmid: item.cmid,\n                keyid: key\n            };\n        };\n        /**\n         * Update Textarea.\n         *\n         * @param {string} key\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getupdatedtext = (key, maineditorIsTextArea) => {\n            const sourceItemLang = tempTranslations[key].sourceLang.toLowerCase().replace(rephrasesymbol, '');\n            const fieldText = tempTranslations[key].fieldText; // Translation\n            Log.debug(`translation/x/getupdatedtext::fieldText`);\n            Log.debug(fieldText);\n            const translation = getEditorText(tempTranslations[key].editor, maineditorIsTextArea);// Translation\n            const source = getSourceText(key);// Translation\n            const isFirstTranslation = fieldText.indexOf(\"{mlang\") === -1;\n            const isSourceOther = sourceItemLang === deeplSourceLang;\n            Log.debug(`translation/x/getupdatedtext::mainSourceLang`);\n            Log.debug(mainSourceLang);\n            Log.debug(sourceItemLang);\n            Log.debug(isSourceOther);\n            const selectedTarget = document.querySelector(Selectors.actions.targetCompatibleSwitcher).value;\n            const selectedTargetLangRoot = selectedTarget.toLowerCase().substring(0, 2);\n            Log.debug(`translation/x/getupdatedtext::selectedTarget`);\n            Log.debug(selectedTarget);\n            const tagPatterns = {\n                \"other\": \"({mlang other)(.*?){mlang}\",\n                \"target\": `({mlang ${selectedTarget}}(.*?){mlang})`,\n                \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n            };\n            const langsItems = {\n                \"fullContent\": fieldText,\n                \"other\": `{mlang other}${source}{mlang}`,\n                \"target\": `{mlang ${selectedTarget}}${translation}{mlang}`,\n                \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n            };\n            if (isFirstTranslation) {\n                // No mlang tag : easy.\n                if (selectedTargetLangRoot === sourceItemLang) {\n                    return translation;\n                } else if (isSourceOther) {\n                    return langsItems.other + langsItems.target;\n                } else {\n                    return langsItems.other + langsItems.source + langsItems.target;\n                }\n            }\n            // Alreaddy mlang tag-s.\n            return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n        };\n        /**\n         * Update Textarea when there was mlang tags.\n         * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n         * @param {boolean} isSourceOther\n         * @param {string} tagPatterns\n         * @param {string} langsItems\n         * @returns {string} {string}\n         * @todo MDL-000 refactor this.\n         */\n        const additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n            Log.debug(`translation/x/additionalUpdate::langsItems`);\n            Log.debug(langsItems);\n            let manipulatedText = langsItems.fullContent;\n            // Do we have a TARGET tag already ?\n            const targetReg = new RegExp(tagPatterns.target, \"sgi\");\n            const hasTagTarget = manipulatedText.match(targetReg);\n            if (hasTagTarget) {\n                // Yes replace it.\n                manipulatedText = manipulatedText.replace(targetReg, Tokeniser.escapeReplacementString(langsItems.target));\n            } else {\n                // No, add it at the end.\n                const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n                manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n                    langsItems.target,\n                    manipulatedText.slice(lastMlangClosingTagEnd)\n                ].join('');\n            }\n            // Do we have a OTHER tag already ?\n            const otherReg = new RegExp(tagPatterns.other, \"sgi\");\n            const hasTagOther = manipulatedText.match(otherReg);\n            // Do we have a SOURCE tag already ?\n            const sourceReg = new RegExp(tagPatterns.other, \"sgi\");\n            const hasTagSource = manipulatedText.match(sourceReg);\n            if (isSourceOther) {\n                // Whatever was the {mlang other} tag language we need to replace it by this source.\n                manipulatedText = manipulatedText.replace(otherReg, Tokeniser.escapeReplacementString(langsItems.other));\n                if (hasTagSource) {\n                    // And remove the {mlang source} tag if found.\n                    manipulatedText.replace(sourceReg, \"\");\n                }\n            } else {\n                if (!hasTagOther) {\n                    // We still add this source as otherTag of the so that it can be replaced further.\n                    const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n                    manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                        langsItems.other,\n                        manipulatedText.slice(firstMlangClosingTagEnd)\n                    ].join('');\n                }\n                if (!hasTagSource) {\n                    // Add the {mlang source} tag if not found.\n                    manipulatedText.replace(sourceReg, Tokeniser.escapeReplacementString(langsItems.source));\n                }\n            }\n            return manipulatedText;\n        };\n        /**\n         * Editor's text content.\n         *\n         * @param {HTMLElement} editor\n         * @param {boolean} maineditorIsTextArea\n         * @returns {string}\n         * translation.js\n         */\n        const getEditorText = (editor, maineditorIsTextArea) => {\n            let text = editor.innerHTML;\n            if (maineditorIsTextArea) {\n                text = Utils.decodeHTML(text);\n            }\n            return text;\n        };\n        /**\n         * Source text de-tokenised.\n         *\n         * @param {String} key\n         * @returns {String}\n         * translation.js\n         */\n        const getSourceText = (key) => {\n            const sourceTokenised = tempTranslations[key].source;\n            return Tokeniser.postprocess(sourceTokenised, tempTranslations[key].tokens);\n        };\n    /**\n     * Initializing object storage before translation.\n     * @param {string} key\n     * @param {editor: object, editorType: string} editorSettings\n     * @param {string} sourceTextEncoded\n     * @param {string} multilangRawTextEncoded\n     * @param {string} sourceLang\n     */\n    const initTempForKey = (key, editorSettings, sourceTextEncoded, multilangRawTextEncoded, sourceLang) => {\n        const sourceText = Utils.fromBase64(sourceTextEncoded);\n        const fieldText = Utils.fromBase64(multilangRawTextEncoded);\n        const tokenised = Tokeniser.preprocess(sourceText, escapePatterns, escapePatterns);\n        tempTranslations[key] = {\n            editorType: editorSettings.editorType,\n            editor: editorSettings.editor,\n            source: tokenised.tokenizedText,\n            sourceLang: sourceLang,\n            fieldText: fieldText,\n            status: Selectors.statuses.wait,\n            translation: '',\n            tokens: tokenised.expressions\n        };\n    };\n    /**\n     * Wipe pout the temp.\n     * @param {string} key\n     */\n    const initTemp = (key)=>{\n        tempTranslations[key] = {\n            editorType: null,\n            editor: null,\n            source: '',\n            sourceLang: '',\n            fieldText: '',\n            status: '',\n            translation: '',\n            tokens: []\n        };\n    };\n        /**\n         * Prepare the texts for the external api calls.\n         *\n         * @param {string} key\n         * @returns {{text, source_lang: (string|string|*), key}}\n         */\n    const prepareTranslation = (key) => {\n        return {\n            text: tempTranslations[key].source,\n            // eslint-disable-next-line camelcase\n            source_lang: tempTranslations[key].sourceLang,\n            key: key\n        };\n    };\n    /**\n     * Call the external translation service to translate the selected keys.\n     *\n     * @param {array} keys\n     * @param {object} config\n     * @return void\n     */\n    const callTranslations = (keys, config) => {\n        rephrasesymbol = config.rephrasesymbol;\n        const translations = [];\n        const rephrases = [];\n        prepareAdvancedSettings(targetLang, config);\n        // We parse and check if it is a tranlsation or text improvment.\n        keys.forEach((key) => {\n            const t = prepareTranslation(key);\n            if (config.canimprove && t.source_lang.includes(rephrasesymbol)) {\n                delete t.source_lang;\n                rephrases.push(t);\n            } else {\n                translations.push(t);\n            }\n        });\n        if (translations.length > 0) {\n            Events.on(Api.DEEPL_SUCCESS, onTranslateSuccess);\n            Events.on(Api.DEEPL_FAILED, onTranslateFailed);\n             Api.translate(translations, settings, Api.APP_VERSION);\n        }\n        if (rephrases.length > 0) {\n            Events.on(Api.DEEPL_RF_SUCCESS, onRephraseSuccess);\n            Events.on(Api.DEEPL_RF_FAILED, onRephaseFailed);\n            Api.rephrase(rephrases, settingsRephrase, Api.APP_VERSION);\n        }\n    };\n    const onTranslateSuccess = (response)=>{\n        Log.info(`translation//onTranslateSuccess::response`);\n        Log.info(response);\n        response.forEach((tr) => {\n            if (tr.error === '') {\n                let key = tr.key;\n                let translation = Tokeniser.postprocess(tr.translated_text, tempTranslations[key].tokens);\n                tempTranslations[key].editor.innerHTML = translation;\n                tempTranslations[key].translation = translation;\n                Events.emit(ON_ITEM_TRANSLATED, key);\n            } else {\n                Events.emit(ON_TRANSLATION_FAILED, tr.error);\n            }\n        });\n    };\n    const onRephraseSuccess = (response)=>{\n        response.forEach((tr) => {\n            if (tr.error === '') {\n                let key = tr.key;\n                let rephrase = Tokeniser.postprocess(tr.text, tempTranslations[key].tokens);\n                tempTranslations[key].editor.innerHTML = rephrase;\n                tempTranslations[key].translation = rephrase;\n                Events.emit(ON_ITEM_TRANSLATED, key);\n            } else {\n                Events.emit(ON_REPHRASE_FAILED, tr.error);\n            }\n        });\n    };\n    const onTranslateFailed = (status, error)=>{\n        Events.emit(ON_TRANSLATION_FAILED, status, error);\n    };\n    const onRephaseFailed = (status, error)=>{\n        Events.emit(ON_REPHRASE_FAILED, status, error);\n    };\n    /**\n     * Compile Advanced settings.\n     *\n     * @param {string} targetLang\n     * @param {object} config\n     * @returns {{}}\n     * translation.js ok\n     */\n    const prepareAdvancedSettings = (targetLang, config) => {\n        escapePatterns.LATEX = document.querySelector(Selectors.actions.escapeLatex).checked;\n        escapePatterns.PRETAG = document.querySelector(Selectors.actions.escapePre).checked;\n        // eslint-disable-next-line camelcase\n        settings.tag_handling = document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml';//\n        settings.context = document.querySelector(Selectors.deepl.context).value ?? null;//\n        // eslint-disable-next-line camelcase\n        settings.split_sentences = document.querySelector(Selectors.deepl.splitSentences).value;//\n        // eslint-disable-next-line camelcase\n        settings.preserve_formatting = document.querySelector(Selectors.deepl.preserveFormatting).checked;//\n        settings.formality = document.querySelector('[name=\"local_deepler/formality\"]:checked').value;\n        // eslint-disable-next-line camelcase\n        settings.glossary_id = document.querySelector(Selectors.deepl.glossaryId).value;//\n        if (settings.glossary_id !== '') {\n            Utils.setCookie(Utils.COOKIE_PREFIX + mainSourceLang + targetLang + courseid, settings.glossary_id, 703);\n        }\n        // eslint-disable-next-line camelcase\n        settings.outline_detection = document.querySelector(Selectors.deepl.outlineDetection).checked;//\n        // eslint-disable-next-line camelcase\n        settings.non_splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.splitting_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value);\n        // eslint-disable-next-line camelcase\n        settings.ignore_tags = Utils.toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value);\n        // eslint-disable-next-line camelcase\n        settings.model_type = document.querySelector(Selectors.deepl.modelType).value ?? 'prefer_quality_optimized';\n        // eslint-disable-next-line camelcase\n        settings.show_billed_characters = true;\n        // eslint-disable-next-line camelcase\n        settings.target_lang = targetLang.toUpperCase();\n        if (config.canimprove) {\n            settingsRephrase.target_lang = settings.target_lang;\n            settingsRephrase.toneorstyle = document.querySelector(Selectors.deepl.toneorstyle).value ?? 'default';\n        }\n    };\n    /**\n     * Check if the item is translatable.\n     * @todo MDL-0000 implement in v1.4.0 (return based on local source)\n     * @param {string} sourceLang\n     */\n    const isTranslatable = (sourceLang = '') =>{\n         Log.info(targetLang, sourceLang, targetLang === (sourceLang === '' ? mainSourceLang : sourceLang));\n        // Return targetLang !== (sourceLang === '' ? mainSourceLang : sourceLang);\n        return targetLang !== '';\n    };\n        const translated = (key)=>{\n            return tempTranslations[key]?.translation?.length > 0;\n        };\n        const init = (cfg) => {\n            Api.APP_VERSION = cfg.version;\n            courseid = cfg.courseid;\n            userid = cfg.userid;\n            setMainLangs(cfg);\n        };\n        return {\n            init: init,\n            callTranslations: callTranslations,\n            saveTranslations: saveTranslations,\n            initTempForKey: initTempForKey,\n            initTemp: initTemp,\n            ON_ITEM_TRANSLATED: ON_ITEM_TRANSLATED,\n            ON_DB_FAILED: ON_DB_FAILED,\n            ON_ITEM_SAVED: ON_ITEM_SAVED,\n            ON_ITEM_NOT_SAVED: ON_ITEM_NOT_SAVED,\n            ON_TRANSLATION_FAILED: ON_TRANSLATION_FAILED,\n            ON_REPHRASE_FAILED: ON_REPHRASE_FAILED,\n            ON_DB_SAVE_SUCCESS: ON_DB_SAVE_SUCCESS,\n            setMainLangs: setMainLangs,\n            isTranslatable: isTranslatable,\n            translated: translated\n    };\n});\n"],"names":["define","Log","Api","Utils","Selectors","Tokeniser","Events","tempTranslations","escapePatterns","mainSourceLang","deeplSourceLang","targetLang","courseid","userid","settings","settingsRephrase","rephrasesymbol","setMainLangs","config","debug","currentlang","targetlang","toLowerCase","deeplsourcelang","onTrDbSuccess","data","info","length","emit","errors","filter","item","error","forEach","keyid","fieldText","text","onTrDbFailed","status","trace","prepareDbUpdateItem","maineditorIsTextArea","key","textTosave","getupdatedtext","id","tid","field","table","cmid","sourceItemLang","sourceLang","replace","translation","getEditorText","editor","source","getSourceText","isFirstTranslation","indexOf","isSourceOther","selectedTarget","document","querySelector","actions","targetCompatibleSwitcher","value","selectedTargetLangRoot","substring","tagPatterns","langsItems","other","target","additionalUpdate","manipulatedText","fullContent","targetReg","RegExp","match","escapeReplacementString","lastMlangClosingTagEnd","lastIndexOf","slice","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","innerHTML","decodeHTML","sourceTokenised","postprocess","tokens","onTranslateSuccess","response","tr","translated_text","onRephraseSuccess","rephrase","onTranslateFailed","onRephaseFailed","prepareAdvancedSettings","LATEX","escapeLatex","checked","PRETAG","escapePre","tag_handling","deepl","tagHandling","context","split_sentences","splitSentences","preserve_formatting","preserveFormatting","formality","glossary_id","glossaryId","setCookie","COOKIE_PREFIX","outline_detection","outlineDetection","non_splitting_tags","toJsonArray","nonSplittingTags","splitting_tags","splittingTags","ignore_tags","ignoreTags","model_type","modelType","show_billed_characters","target_lang","toUpperCase","canimprove","toneorstyle","init","cfg","APP_VERSION","version","callTranslations","keys","translations","rephrases","t","source_lang","prepareTranslation","includes","push","on","DEEPL_SUCCESS","DEEPL_FAILED","translate","DEEPL_RF_SUCCESS","DEEPL_RF_FAILED","saveTranslations","items","map","userPrefs","TR_DB_SUCCESS","TR_DB_FAILED","updateTranslationsInDb","initTempForKey","editorSettings","sourceTextEncoded","multilangRawTextEncoded","sourceText","fromBase64","tokenised","preprocess","editorType","tokenizedText","statuses","wait","expressions","initTemp","ON_ITEM_TRANSLATED","ON_DB_FAILED","ON_ITEM_SAVED","ON_ITEM_NOT_SAVED","ON_TRANSLATION_FAILED","ON_REPHRASE_FAILED","ON_DB_SAVE_SUCCESS","isTranslatable","translated"],"mappings":"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"}