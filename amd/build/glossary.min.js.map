{"version":3,"file":"glossary.min.js","sources":["../src/glossary.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *  description here.\n *\n * @module     'local_deepler'; // Full name of the plugin (used for diagnostics)./glossary\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['./local/selectors', './local/api', './local/customevents', 'core/modal', 'core/log'],\n    function(Selectors, Api, Events, Modal, Log) {\n    let version = '';\n    const initCode = (cfg)=> {\n        version = cfg;\n        window.console.log(version);\n        const fileInput = document.getElementById('fileElem');\n        const fileNameDisplay = document.getElementById('filename-display');\n\n        fileInput.addEventListener('change', function() {\n            if (fileInput.files.length > 0) {\n                fileNameDisplay.textContent = `Selected file: ${fileInput.files[0].name}`;\n            } else {\n                fileNameDisplay.textContent = '';\n            }\n        });\n    };\n    const registerEventListeners = ()=>{\n        const allVisibilitySelect = document.querySelectorAll(Selectors.glossary.visibilityDropdown);\n        allVisibilitySelect.forEach((e)=>{\n        e.addEventListener('change',\n                (evt)=>{\n                    Log.info(evt.target.dataset.glossary, evt.target.value);\n                    Api.updateGlossariesVisibility(evt.target.dataset.glossary, evt.target.value);\n                }\n            );\n        });\n        const allGlossarriesEntry = document.querySelectorAll(Selectors.glossary.entriesviewer);\n        Log.info(allGlossarriesEntry);\n        allGlossarriesEntry.forEach((e)=>{\n            e.addEventListener('click',\n                (e)=>{\n                if (e.target.dataset.length !== 0 && e.target.dataset.glossary !== undefined) {\n                    Log.info(e.target.dataset.glossary);\n                    Api.getGlossariesEntries(\n                        e.target.dataset.glossary,\n                        version\n                    );\n                } else if (e.target.parentNode.dataset && e.target.parentNode.dataset.glossary) {\n                    Log.info(e.target.parentNode.dataset.glossary);\n                    Api.getGlossariesEntries(\n                        e.target.parentNode.dataset.glossary,\n                        version\n                    );\n                } else {\n                  Log.error('Cannot not find glossary ID');\n                }\n            }\n            );\n        });\n        Events.on(Api.GLOSSARY_ENTRIES_SUCCESS, showEntriesModal);\n        Events.on(Api.GLOSSARY_ENTRIES_FAILED, (e)=>{\n         Log.error(Api.GLOSSARY_ENTRIES_FAILED); Log.error(e);\n        });\n    };\n    const showEntriesModal = (ajaxResponse)=>{\n        const glossaryid = ajaxResponse.glossaryid;\n        const entries = JSON.parse(ajaxResponse.entries);\n        const status = ajaxResponse.status;\n        const message = ajaxResponse.message;\n        if (status === 'success') {\n            const table = document.createElement('table');\n            table.className = 'generaltable';\n            // Create the header.\n            const thead = document.createElement('thead');\n            thead.innerHTML = `<tr><th>${ajaxResponse.source.toUpperCase()}</th><th>${ajaxResponse.target.toUpperCase()}</th></tr>`;\n            table.appendChild(thead);\n\n            const tbody = document.createElement('tbody');\n\n            Object.entries(entries).forEach(([key, value]) => {\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${key}</td><td>${value}</td>`;\n                tbody.appendChild(row);\n            });\n\n            table.appendChild(tbody);\n\n            Modal.create({\n                title: 'Entries',\n                body: table,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        } else {\n            Modal.create({\n                title: `Error fetching entries for<br/><em>${glossaryid}</em>`,\n                body: message,\n                type: 'default',\n                show: true,\n                removeOnClose: true,\n            });\n        }\n    };\n\n    return {\n        init: function(cfg) {\n            if (document.readyState !== 'loading') {\n                // DOM is already ready.\n                initCode(cfg);\n                registerEventListeners();\n            } else {\n                // Wait for DOMContentLoaded.\n                document.addEventListener('DOMContentLoaded', initCode);\n            }\n        }\n    };\n});\n"],"names":["define","Selectors","Api","Events","Modal","Log","version","initCode","cfg","window","console","log","fileInput","document","getElementById","fileNameDisplay","addEventListener","files","length","textContent","name","showEntriesModal","ajaxResponse","glossaryid","entries","JSON","parse","status","message","table","createElement","className","thead","innerHTML","source","toUpperCase","target","appendChild","tbody","Object","forEach","_ref","key","value","row","create","title","body","type","show","removeOnClose","init","readyState","registerEventListeners","querySelectorAll","glossary","visibilityDropdown","e","evt","info","dataset","updateGlossariesVisibility","allGlossarriesEntry","entriesviewer","undefined","getGlossariesEntries","parentNode","error","on","GLOSSARY_ENTRIES_SUCCESS","GLOSSARY_ENTRIES_FAILED"],"mappings":";;;;;;;AAsBAA,OAAM,yBAAC,CAAC,oBAAqB,cAAe,uBAAwB,aAAc,YAC9E,SAASC,UAAWC,IAAKC,OAAQC,MAAOC,KACxC,IAAIC,QAAU,GACd,MAAMC,SAAYC,MACdF,QAAUE,IACVC,OAAOC,QAAQC,IAAIL,SACnB,MAAMM,UAAYC,SAASC,eAAe,YACpCC,gBAAkBF,SAASC,eAAe,oBAEhDF,UAAUI,iBAAiB,SAAU,WAC7BJ,UAAUK,MAAMC,OAAS,EACzBH,gBAAgBI,YAAc,kBAAkBP,UAAUK,MAAM,GAAGG,OAEnEL,gBAAgBI,YAAc,EAEtC,IAwCEE,iBAAoBC,eACtB,MAAMC,WAAaD,aAAaC,WAC1BC,QAAUC,KAAKC,MAAMJ,aAAaE,SAClCG,OAASL,aAAaK,OACtBC,QAAUN,aAAaM,QAC7B,GAAe,YAAXD,OAAsB,CACtB,MAAME,MAAQhB,SAASiB,cAAc,SACrCD,MAAME,UAAY,eAElB,MAAMC,MAAQnB,SAASiB,cAAc,SACrCE,MAAMC,UAAY,WAAWX,aAAaY,OAAOC,yBAAyBb,aAAac,OAAOD,0BAC9FN,MAAMQ,YAAYL,OAElB,MAAMM,MAAQzB,SAASiB,cAAc,SAErCS,OAAOf,QAAQA,SAASgB,QAAQC,OAAkB,IAAhBC,IAAKC,OAAMF,KACzC,MAAMG,IAAM/B,SAASiB,cAAc,MACnCc,IAAIX,UAAY,OAAOS,eAAeC,aACtCL,MAAMD,YAAYO,OAGtBf,MAAMQ,YAAYC,OAElBlC,MAAMyC,OAAO,CACTC,MAAO,UACPC,KAAMlB,MACNmB,KAAM,UACNC,MAAM,EACNC,eAAe,GAEvB,MACI9C,MAAMyC,OAAO,CACTC,MAAO,sCAAsCvB,kBAC7CwB,KAAMnB,QACNoB,KAAM,UACNC,MAAM,EACNC,eAAe,KAK3B,MAAO,CACHC,KAAM,SAAS3C,KACiB,YAAxBK,SAASuC,YAET7C,SAASC,KAnFU6C,MACCxC,SAASyC,iBAAiBrD,UAAUsD,SAASC,oBACrDhB,QAASiB,IAC7BA,EAAEzC,iBAAiB,SACV0C,MACGrD,IAAIsD,KAAKD,IAAItB,OAAOwB,QAAQL,SAAUG,IAAItB,OAAOO,OACjDzC,IAAI2D,2BAA2BH,IAAItB,OAAOwB,QAAQL,SAAUG,IAAItB,OAAOO,WAInF,MAAMmB,oBAAsBjD,SAASyC,iBAAiBrD,UAAUsD,SAASQ,eACzE1D,IAAIsD,KAAKG,qBACTA,oBAAoBtB,QAASiB,IACzBA,EAAEzC,iBAAiB,QACdyC,IAC+B,IAA5BA,EAAErB,OAAOwB,QAAQ1C,aAA8C8C,IAA9BP,EAAErB,OAAOwB,QAAQL,UAClDlD,IAAIsD,KAAKF,EAAErB,OAAOwB,QAAQL,UAC1BrD,IAAI+D,qBACAR,EAAErB,OAAOwB,QAAQL,SACjBjD,UAEGmD,EAAErB,OAAO8B,WAAWN,SAAWH,EAAErB,OAAO8B,WAAWN,QAAQL,UAClElD,IAAIsD,KAAKF,EAAErB,OAAO8B,WAAWN,QAAQL,UACrCrD,IAAI+D,qBACAR,EAAErB,OAAO8B,WAAWN,QAAQL,SAC5BjD,UAGND,IAAI8D,MAAM,mCAKpBhE,OAAOiE,GAAGlE,IAAImE,yBAA0BhD,kBACxClB,OAAOiE,GAAGlE,IAAIoE,wBAA0Bb,IACvCpD,IAAI8D,MAAMjE,IAAIoE,yBAA0BjE,IAAI8D,MAAMV,MAiD3CJ,IAGAxC,SAASG,iBAAiB,mBAAoBT,SAEtD,EAER"}