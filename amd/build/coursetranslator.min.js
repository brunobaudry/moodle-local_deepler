define("local_coursetranslator/coursetranslator",["exports","core/ajax","./selectors","core/modal"],(function(_exports,_ajax,_selectors,_modal){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/*
   * @module     local_deepler/deepler
   * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>
   * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_ajax=_interopRequireDefault(_ajax),_selectors=_interopRequireDefault(_selectors),_modal=_interopRequireDefault(_modal);let tempTranslations={},mainEditorType="",config={},autotranslateButton={},checkboxes=[],sourceLang="",targetLang="",saveAllBtn={},usage={},format=new Intl.NumberFormat;_exports.init=cfg=>{config=cfg,config.debug=0,usage=config.usage,config.debug>0&&(window.console.info("debugging deepler"),window.console.info(config),window.console.info(usage)),mainEditorType=config.userPrefs,(()=>{try{saveAllBtn=document.querySelector(_selectors.default.actions.saveAll),sourceLang=document.querySelector(_selectors.default.actions.sourceSwitcher).value,targetLang=document.querySelector(_selectors.default.actions.targetSwitcher).value,autotranslateButton=document.querySelector(_selectors.default.actions.autoTranslateBtn),checkboxes=document.querySelectorAll(_selectors.default.actions.checkBoxes),checkboxes.forEach((node=>tempTranslations[node.dataset.key]={}))}catch(e){config.debug&&window.console.error(e.message)}})(),document.addEventListener("change",(e=>{window.console.info("change"),e.target.closest(_selectors.default.actions.targetSwitcher)&&switchTarget(e),e.target.closest(_selectors.default.actions.sourceSwitcher)&&switchSource(e),e.target.closest(_selectors.default.actions.showUpdated)&&showRows(_selectors.default.statuses.updated,e.target.checked),e.target.closest(_selectors.default.actions.showNeedUpdate)&&showRows(_selectors.default.statuses.needsupdate,e.target.checked),(e.target.closest(_selectors.default.actions.checkBoxes)||e.target.closest(_selectors.default.actions.sourceselect))&&onItemChecked(e)})),document.addEventListener("click",(e=>{e.target.closest(_selectors.default.actions.toggleMultilang)&&onToggleMultilang(e.target.closest(_selectors.default.actions.toggleMultilang)),e.target.closest(_selectors.default.actions.autoTranslateBtn)&&(config.currentlang===config.lang||void 0===config.lang?_modal.default.create({title:"Cannot call deepl",body:"<p>Both languges are the same {$config.lang}</p>",show:!0,removeOnClose:!0}):doAutotranslate()),e.target.closest(_selectors.default.actions.selectAllBtn)&&toggleAllCheckboxes(e),e.target.closest(_selectors.default.actions.saveAll)&&document.querySelectorAll(_selectors.default.statuses.checkedCheckBoxes).forEach((e=>{const key=e.dataset.key;""!==tempTranslations[key].translation?saveTranslation(key):window.console.warn("not translated "+key)}))})),toggleAutotranslateButton();document.querySelector(_selectors.default.actions.selectAllBtn).disabled=sourceLang===targetLang;document.querySelectorAll(_selectors.default.actions.validatorsBtns).forEach((item=>{item.addEventListener("click",(e=>{let key=e.target.closest(_selectors.default.actions.validatorsBtns).dataset.keyValidator;null===tempTranslations[key]||void 0===tempTranslations[key]?window.console.warn('Transaltion key "'.concat(key,'" is undefined ')):saveTranslation(key)}))})),checkboxes.forEach((e=>{e.disabled=sourceLang===targetLang,e.addEventListener("click",(()=>{toggleAutotranslateButton()}))})),showRows(_selectors.default.statuses.updated,document.querySelector(_selectors.default.actions.showUpdated).checked),showRows(_selectors.default.statuses.needsupdate,document.querySelector(_selectors.default.actions.showNeedUpdate).checked)};const showErrorMessageForEditor=(key,message)=>{let parent=document.querySelector(_selectors.default.editors.multiples.editorsWithKey.replace("<KEY>",key));const errorMsg=document.createElement("div");errorMsg.classList=["alert alert-danger"],errorMsg.innerHTML=message,parent.appendChild(errorMsg)},saveTranslation=key=>{let editor=tempTranslations[key].editor,text=editor.innerHTML,sourceText=tempTranslations[key].source,element=document.querySelector(_selectors.default.editors.multiples.editorsWithKey.replace("<KEY>",key)),id=element.getAttribute("data-id"),tid=element.getAttribute("data-tid"),table=element.getAttribute("data-table"),field=element.getAttribute("data-field"),fielddata={};fielddata.courseid=config.courseid,fielddata.id=parseInt(id),fielddata.table=table,fielddata.field=field,config.debug>0&&window.console.info(fielddata),_ajax.default.call([{methodname:"local_deepler_get_field",args:{data:[fielddata]},done:data=>{let fieldtext=data[0].text;if(data.length>0){let textarea=document.querySelector(_selectors.default.editors.multiples.textAreas.replace("<KEY>",key)),updatedtext=getupdatedtext(fieldtext,text,sourceText,tempTranslations[key].sourceLang),tdata={};tdata.courseid=config.courseid,tdata.id=parseInt(id),tdata.tid=tid,tdata.table=table,tdata.field=field,tdata.text=updatedtext,config.debug>0&&(window.console.info(updatedtext),window.console.info(tdata));const successMessage=()=>{element.classList.add("local_deepler__success"),setIconStatus(key,_selectors.default.statuses.success),setTimeout((()=>{let multilangPill=document.querySelector(replaceKey(_selectors.default.statuses.multilang,key));document.querySelector(replaceKey(_selectors.default.statuses.prevTransStatus,key)).classList="badge badge-pill badge-success",multilangPill.classList.contains("invisible")&&multilangPill.classList.remove("invisible"),setIconStatus(key,_selectors.default.statuses.saved)}))},errorMessage=error=>{editor.classList.add("local_deepler__error"),setIconStatus(key,_selectors.default.statuses.failed);const setIndex=-1===error.debuginfo.indexOf("SET")?15:error.debuginfo.indexOf("SET");let message=error.message+"<br/>"+error.debuginfo.slice(0,setIndex)+"...";config.debug>0&&(message=error.debuginfo),showErrorMessageForEditor(key,message)};_ajax.default.call([{methodname:"local_deepler_update_translation",args:{data:[tdata]},done:data=>{config.debug>0&&window.console.info("ws: ",key,data),data.length>0?(successMessage(),textarea.innerHTML=data[0].text,config.currentlang===config.lang&&(document.querySelector(_selectors.default.sourcetexts.keys.replace("<KEY>",key)).innerHTML=text)):errorMessage()},fail:error=>{errorMessage(error)}}])}else window.console.warn(data)},fail:error=>{window.console.warn(error)}}])},getupdatedtext=(fieldtext,translation,source,sourceItemLang)=>{const isFirstTranslation=-1===fieldtext.indexOf("{mlang"),isSourceOther=sourceItemLang===sourceLang,tagPatterns={other:"({mlang other)(.*?){mlang}",target:"({mlang ".concat(targetLang,"}(.*?){mlang})"),source:"({mlang ".concat(sourceItemLang,"}(.*?){mlang})")},langsItems={fullContent:fieldtext,other:"{mlang other}".concat(source,"{mlang}"),target:"{mlang ".concat(targetLang,"}").concat(translation,"{mlang}"),source:"{mlang ".concat(sourceItemLang,"}").concat(source,"{mlang}")};return isFirstTranslation?isSourceOther?langsItems.other+langsItems.target:langsItems.other+langsItems.source+langsItems.target:additionalUpdate(isSourceOther,tagPatterns,langsItems)},additionalUpdate=(isSourceOther,tagPatterns,langsItems)=>{let manipulatedText=langsItems.fullContent;const targetReg=new RegExp(tagPatterns.target,"sg");if(manipulatedText.match(targetReg))manipulatedText=manipulatedText.replace(targetReg,langsItems.target);else{const lastMlangClosingTagEnd=manipulatedText.lastIndexOf("{mlang}")+"{mlang}".length;manipulatedText=[manipulatedText.slice(0,lastMlangClosingTagEnd),langsItems.target,manipulatedText.slice(lastMlangClosingTagEnd)].join("")}const otherReg=new RegExp(tagPatterns.other,"sg"),hasTagOther=manipulatedText.match(otherReg),sourceReg=new RegExp(tagPatterns.other,"sg"),hasTagSource=manipulatedText.match(sourceReg);if(isSourceOther)manipulatedText=manipulatedText.replace(otherReg,langsItems.other),hasTagSource&&manipulatedText.replace(sourceReg,"");else{if(!hasTagOther){const firstMlangClosingTagEnd=manipulatedText.indexOf("{mlang");manipulatedText=[manipulatedText.slice(0,firstMlangClosingTagEnd),langsItems.other,manipulatedText.slice(firstMlangClosingTagEnd)].join("")}hasTagSource||manipulatedText.replace(sourceReg,langsItems.source)}return manipulatedText},onItemChecked=e=>{config.debug>0&&window.console.info("SELECTION",e.target.getAttribute("data-key"),e.target.getAttribute("data-action"));const key=e.target.getAttribute("data-key");"local_deepler/checkbox"===e.target.getAttribute("data-action")?(toggleStatus(key,e.target.checked),countWordAndChar()):initTempForKey(key,!1)},initTempForKey=(key,blank)=>{const sourceText=document.querySelector(_selectors.default.sourcetexts.keys.replace("<KEY>",key)).getAttribute("data-sourcetext-raw"),editorSettings=findEditor(key),sourceLang=document.querySelector(_selectors.default.sourcetexts.sourcelangs.replace("<KEY>",key)).value;tempTranslations[key]={editorType:null,editor:null,source:sourceText,sourceLang:sourceLang,status:_selectors.default.statuses.wait,translation:""},blank||(null===editorSettings||null===editorSettings.editor?(setIconStatus(key,_selectors.default.statuses.failed),showErrorMessageForEditor(key,"Original editor not found...")):tempTranslations[key]={editorType:editorSettings.editorType,editor:editorSettings.editor,source:sourceText,sourceLang:sourceLang,status:_selectors.default.statuses.wait,translation:""})},toggleStatus=(key,checked)=>{var _tempTranslations$key,_tempTranslations$key2;switch(document.querySelector(replaceKey(_selectors.default.actions.validatorBtn,key)).dataset.status){case _selectors.default.statuses.wait:checked?(setIconStatus(key,_selectors.default.statuses.totranslate),initTempForKey(key,!1)):initTempForKey(key,!0);break;case _selectors.default.statuses.totranslate:checked&&(null===(_tempTranslations$key=tempTranslations[key])||void 0===_tempTranslations$key||null===(_tempTranslations$key2=_tempTranslations$key.translation)||void 0===_tempTranslations$key2?void 0:_tempTranslations$key2.length)>0?setIconStatus(key,_selectors.default.statuses.tosave,!0):setIconStatus(key,_selectors.default.statuses.wait);break;case _selectors.default.statuses.tosave:checked||setIconStatus(key,_selectors.default.statuses.totranslate);case _selectors.default.statuses.failed:case _selectors.default.statuses.success:case _selectors.default.statuses.saved:}},setIconStatus=function(key){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_selectors.default.statuses.wait,isBtn=arguments.length>2&&void 0!==arguments[2]&&arguments[2],icon=document.querySelector(replaceKey(_selectors.default.actions.validatorBtn,key));isBtn?(icon.classList.contains("btn")||(icon.classList.add("btn"),icon.classList.add("btn-outline-secondary")),icon.classList.contains("disable")&&icon.classList.remove("disable")):(icon.classList.contains("disable")||icon.classList.add("disable"),icon.classList.contains("btn")&&(icon.classList.remove("btn"),icon.classList.remove("btn-outline-secondary"))),icon.setAttribute("role",isBtn?"button":"status"),icon.setAttribute("data-status",s)},showRows=(selector,selected)=>{const items=document.querySelectorAll(selector),allSelected=document.querySelector(_selectors.default.actions.selectAllBtn).checked;items.forEach((item=>{let k=item.getAttribute("data-row-id");toggleRowVisibility(item,selected),item.querySelector(replaceKey(_selectors.default.editors.multiples.checkBoxesWithKey,k)).checked=allSelected&&selected,toggleStatus(k,!1)})),toggleAutotranslateButton(),countWordAndChar()},toggleRowVisibility=(row,checked)=>{checked?row.classList.remove("d-none"):row.classList.add("d-none")},switchTarget=e=>{let url=new URL(window.location.href);url.searchParams.set("target_lang",e.target.value),window.location=url.toString()},switchSource=e=>{let url=new URL(window.location.href);url.searchParams.set("lang",e.target.value),window.location=url.toString()},doAutotranslate=()=>{saveAllBtn.hidden=saveAllBtn.disabled=!1,document.querySelectorAll(_selectors.default.statuses.checkedCheckBoxes).forEach((ckBox=>{let key=ckBox.getAttribute("data-key");null!==tempTranslations[key].editor&&getTranslation(key)}))},getTranslation=key=>{var _document$querySelect;tempTranslations[key].staus=_selectors.default.statuses.wait;let formData=new FormData;formData.append("text",tempTranslations[key].source),formData.append("source_lang",tempTranslations[key].sourceLang),formData.append("target_lang",targetLang.toUpperCase()),formData.append("auth_key",config.apikey),formData.append("tag_handling",document.querySelector(_selectors.default.deepl.tagHandling).checked?"html":"xml"),formData.append("context",null!==(_document$querySelect=document.querySelector(_selectors.default.deepl.context).value)&&void 0!==_document$querySelect?_document$querySelect:null),formData.append("split_sentences",document.querySelector(_selectors.default.deepl.splitSentences).value),formData.append("preserve_formatting",document.querySelector(_selectors.default.deepl.preserveFormatting).checked),formData.append("formality",document.querySelector('[name="local_deepler/formality"]:checked').value),formData.append("glossary_id",document.querySelector(_selectors.default.deepl.glossaryId).value),formData.append("outline_detection",document.querySelector(_selectors.default.deepl.outlineDetection).checked),formData.append("non_splitting_tags",toJsonArray(document.querySelector(_selectors.default.deepl.nonSplittingTags).value)),formData.append("splitting_tags",toJsonArray(document.querySelector(_selectors.default.deepl.splittingTags).value)),formData.append("ignore_tags",toJsonArray(document.querySelector(_selectors.default.deepl.ignoreTags).value)),config.debug&&window.console.info("Send deepl:",formData);let xhr=new XMLHttpRequest;xhr.onreadystatechange=()=>{if(xhr.readyState===XMLHttpRequest.DONE){const status=xhr.status;if(0===status||status>=200&&status<400){let data=JSON.parse(xhr.responseText);tempTranslations[key].editor.innerHTML=data.translations[0].text,tempTranslations[key].translation=data.translations[0].text,setIconStatus(key,_selectors.default.statuses.tosave,!0),injectImageCss(tempTranslations[key].editorType,tempTranslations[key].editor)}else setIconStatus(key,_selectors.default.statuses.failed,!1)}},xhr.open("POST",config.deeplurl),xhr.send(formData)},injectImageCss=(editorType,editor)=>{const css=document.createElement("style");if(css.textContent="img{background-color:yellow !important;font-style: italic;}","iframe"===editorType){let editorschildrens=Array.from(editor.parentElement.children),found=!1;for(let j in editorschildrens){if(editorschildrens[j].innerText===css.innerText){found=!0;break}}found||editor.parentElement.appendChild(css)}},findEditor=key=>{let e=document.querySelector(_selectors.default.editors.types.basic.replace("<KEY>",key));if(null===e){let r=null;if(-1===["atto","tiny","marklar","textarea"].indexOf(mainEditorType))window.console.warn("Unsupported editor "+mainEditorType);else try{r=findEditorByType(key,mainEditorType)}catch(e){window.console.warn("Editor not found: "+mainEditorType)}return r}return{editor:e,editorType:"basic"}},findEditorByType=(key,editorType)=>{let et="basic",ed=null;switch(editorType){case"atto":et="iframe",ed=document.querySelector(_selectors.default.editors.types.atto.replaceAll("<KEY>",key));break;case"tiny":et="iframe",ed=document.querySelector(_selectors.default.editors.types.tiny.replaceAll("<KEY>",key)).contentWindow.tinymce;break;case"marklar":case"textarea":ed=document.querySelector(_selectors.default.editors.types.other.replaceAll("<KEY>",key))}return{editor:ed,editorType:et}},toggleAllCheckboxes=e=>{e.target.checked?checkboxes.forEach((i=>{i.checked=!getParentRow(i).classList.contains("d-none"),toggleStatus(i.getAttribute("data-key"),i.checked)})):checkboxes.forEach((i=>{i.checked=!1,toggleStatus(i.getAttribute("data-key"),!1)})),toggleAutotranslateButton(),countWordAndChar()},getParentRow=node=>node.closest(replaceKey(_selectors.default.sourcetexts.parentrow,node.getAttribute("data-key"))),toggleAutotranslateButton=()=>{autotranslateButton.disabled=!0;for(let i in checkboxes){if(checkboxes[i].checked){autotranslateButton.disabled=!1;break}}},onToggleMultilang=e=>{e.classList.toggle("showing");let keyid=e.getAttribute("aria-controls"),key=keyidToKey(keyid),source=document.querySelector(replaceKey(_selectors.default.sourcetexts.keys,key)),multilang=document.querySelector(replaceKey(_selectors.default.sourcetexts.multilangs,keyid));source.classList.toggle("show"),multilang.classList.toggle("show")},toJsonArray=function(s){let sep=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return JSON.stringify(s.split(sep))},replaceKey=(s,k)=>s.replace("<KEY>",k),keyidToKey=k=>{let m=k.match(/^(.+)-(.+)-(.+)$/i);return"".concat(m[1],"[").concat(m[2],"][").concat(m[3],"]")},countWordAndChar=()=>{let wrdsc=0,cws=0,cwos=0;document.querySelectorAll(_selectors.default.statuses.checkedCheckBoxes).forEach((ckBox=>{let key=ckBox.getAttribute("data-key"),results=getCount(key);wrdsc+=results.wordCount,cwos+=results.charNumWithOutSpace,cws+=results.charNumWithSpace}));const wordCount=document.querySelector(_selectors.default.statuses.wordcount),charWithSpace=document.querySelector(_selectors.default.statuses.charNumWithSpace),charWOSpace=document.querySelector(_selectors.default.statuses.charNumWithOutSpace),deeplUseSpan=document.querySelector(_selectors.default.statuses.deeplUsage),deeplMaxSpan=document.querySelector(_selectors.default.statuses.deeplMax),parent=document.querySelector(_selectors.default.statuses.deeplStatusContainer);let current=cwos+usage.character.count;wordCount.innerText=wrdsc,charWithSpace.innerText=cws,charWOSpace.innerText=cwos,deeplUseSpan.innerText=format.format(current),deeplMaxSpan.innerText=null===usage.character.limit?"∞":format.format(usage.character.limit),current>=usage.character.limit?(parent.classList.remove("alert-success"),parent.classList.add("alert-danger")):(parent.classList.add("alert-success"),parent.classList.remove("alert-danger"))},getCount=key=>{let sourceText=document.querySelector(_selectors.default.sourcetexts.keys.replace("<KEY>",key)).getAttribute("data-sourcetext-raw");return countChars(sourceText)},countChars=val=>{const withSpace=val.length,withOutSpace=val.replace(/\s+/g,"").length;return{wordCount:val.match(/\S+/g).length,charNumWithSpace:withSpace,charNumWithOutSpace:withOutSpace}}}));

//# sourceMappingURL=coursetranslator.min.js.map