{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\n\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\nlet usage = {};\nlet format = new Intl.NumberFormat();\n\nconst registerEventListeners = () => {\n\n    document.addEventListener('change', e => {\n        window.console.info('change');\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            selected.forEach((e) => {\n                const key = e.dataset.key;\n                if (tempTranslations[key].translation !== \"\") {\n                    saveTranslation(key);\n                } else {\n                    window.console.warn(\"not translated \" + key);\n                }\n            });\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => (tempTranslations[node.dataset.key] = {}));\n    } catch (e) {\n        if (config.debug) {\n            window.console.error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    config = cfg;\n    config.debug = 0;\n    usage = config.usage;\n    if (config.debug > 0) {\n        window.console.info(\"debugging deepler\");\n        window.console.info(config);\n        window.console.info(usage);\n    }\n    mainEditorType = config.userPrefs;\n    // Setup\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            let key = _this.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                window.console.warn(`Transaltion key \"${key}\" is undefined `,);\n            } else {\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n    showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n    showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n};\nconst showErrorMessageForEditor = (key, message) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    const errorMsg = document.createElement('div');\n    errorMsg.classList = ['alert alert-danger'];\n    errorMsg.innerHTML = message;\n    parent.appendChild(errorMsg);\n};\n\n/**\n * Save Translation to Moodle\n * @param  {String} key Data Key\n */\nconst saveTranslation = (key) => {\n    // Get processing vars.\n    let editor = tempTranslations[key].editor;\n    let text = editor.innerHTML; // We keep the editors text in case translation is edited\n    let sourceText = tempTranslations[key].source;\n    let element = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n    if (config.debug > 0) {\n        window.console.info(fielddata);\n    }\n    // Get the latest data to parse text against.\n    ajax.call([\n        {\n            methodname: \"local_deepler_get_field\",\n            args: {\n                data: [fielddata],\n            },\n            done: (data) => {\n                // The latests field text so multiple translators can work at the same time\n                let fieldtext = data[0].text;\n\n                // Field text exists\n                if (data.length > 0) {\n                    // Updated hidden textarea with updatedtext\n                    let textarea = document.querySelector(\n                        Selectors.editors.multiples.textAreas\n                            .replace(\"<KEY>\", key));\n                    // Get the updated text\n                    let updatedtext = getupdatedtext(fieldtext, text, sourceText, tempTranslations[key].sourceLang);\n\n                    // Build the data object\n                    let tdata = {};\n                    tdata.courseid = config.courseid;\n                    tdata.id = parseInt(id);\n                    tdata.tid = tid;\n                    tdata.table = table;\n                    tdata.field = field;\n                    tdata.text = updatedtext;\n                    if (config.debug > 0) {\n                        window.console.info(updatedtext);\n                        window.console.info(tdata);\n                    }\n                    // Success Message\n                    const successMessage = () => {\n                        element.classList.add(\"local_deepler__success\");\n                        // Add saved indicator\n                        setIconStatus(key, Selectors.statuses.success);\n                        // Remove success message after a few seconds\n                        setTimeout(() => {\n                            let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                            let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                            prevTransStatus.classList = \"badge badge-pill badge-success\";\n                            if (multilangPill.classList.contains(\"invisible\")) {\n                                multilangPill.classList.remove('invisible');\n                            }\n                            setIconStatus(key, Selectors.statuses.saved);\n                        });\n                    };\n                    // Error Mesage\n                    const errorMessage = (error) => {\n                        editor.classList.add(\"local_deepler__error\");\n                        setIconStatus(key, Selectors.statuses.failed);\n                        const setIndex = error.debuginfo.indexOf(\"SET\") === -1 ? 15 : error.debuginfo.indexOf(\"SET\");\n                        let message = error.message + '<br/>' + error.debuginfo.slice(0, setIndex) + '...';\n                        if (config.debug > 0) {\n                            message = error.debuginfo;\n                        }\n                        showErrorMessageForEditor(key, message);\n                    };\n                    // Submit the request\n                    ajax.call([\n                        {\n                            methodname: \"local_deepler_update_translation\",\n                            args: {\n                                data: [tdata],\n                            },\n                            done: (data) => {\n                                // Print response to console log\n                                if (config.debug > 0) {\n                                    window.console.info(\"ws: \", key, data);\n                                }\n\n                                // Display success message\n                                if (data.length > 0) {\n                                    successMessage();\n                                    textarea.innerHTML = data[0].text;\n\n                                    // Update source lang if necessary\n                                    if (config.currentlang === config.lang) {\n                                        document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                            .innerHTML = text;\n                                    }\n                                } else {\n                                    // Something went wrong with the data\n                                    errorMessage();\n                                }\n                            },\n                            fail: (error) => {\n                                // An error occurred\n                                errorMessage(error);\n                            },\n                        },\n                    ]);\n                } else {\n                    // Something went wrong with field retrieval\n                    window.console.warn(data);\n                }\n            },\n            fail: (error) => {\n                // An error occurred\n                window.console.warn(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database including all mlang tag if any.\n * @param {string} translation Translated Text to update.\n * @param {string} source Original text translated from.\n * @param {string} sourceItemLang The source language code\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, translation, source, sourceItemLang) => {\n    const isFirstTranslation = fieldtext.indexOf(\"{mlang\") === -1;\n    const isSourceOther = sourceItemLang === sourceLang;\n    const tagPatterns = {\n        \"other\": \"({mlang other)(.*?){mlang}\",\n        \"target\": `({mlang ${targetLang}}(.*?){mlang})`,\n        \"source\": `({mlang ${sourceItemLang}}(.*?){mlang})`\n    };\n    const langsItems = {\n        \"fullContent\": fieldtext,\n        \"other\": `{mlang other}${source}{mlang}`,\n        \"target\": `{mlang ${targetLang}}${translation}{mlang}`,\n        \"source\": `{mlang ${sourceItemLang}}${source}{mlang}`\n    };\n    if (isFirstTranslation) {\n        // No mlang tag : easy.\n        if (isSourceOther) {\n            return langsItems.other + langsItems.target;\n        } else {\n            return langsItems.other + langsItems.source + langsItems.target;\n        }\n    }\n    // Alreaddy malang tag-s.\n    return additionalUpdate(isSourceOther, tagPatterns, langsItems);\n};\n\n/**\n * Update Textarea when there was mlang tags.\n * Main regex '({mlang ([a-z]{2,5})}(.*?){mlang})'.\n * @param {boolean} isSourceOther\n * @param {string} tagPatterns\n * @param {string} langsItems\n * @returns {string} {string}\n */\nconst additionalUpdate = (isSourceOther, tagPatterns, langsItems) => {\n    let manipulatedText = langsItems.fullContent;\n    // Do we have a TARGET tag already ?\n    const targetReg = new RegExp(tagPatterns.target, \"sg\");\n    const hasTagTarget = manipulatedText.match(targetReg);\n    if (hasTagTarget) {\n        // Yes replace it.\n        manipulatedText = manipulatedText.replace(targetReg, langsItems.target);\n    } else {\n        // No, add it at the end.\n        const lastMlangClosingTagEnd = manipulatedText.lastIndexOf(\"{mlang}\") + \"{mlang}\".length;\n        manipulatedText = [manipulatedText.slice(0, lastMlangClosingTagEnd),\n            langsItems.target,\n            manipulatedText.slice(lastMlangClosingTagEnd)\n        ].join('');\n    }\n    // Do we have a OTHER tag already ?\n    const otherReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagOther = manipulatedText.match(otherReg);\n    // Do we have a SOURCE tag already ?\n    const sourceReg = new RegExp(tagPatterns.other, \"sg\");\n    const hasTagSource = manipulatedText.match(sourceReg);\n    if (isSourceOther) {\n        // Whatever was the {mlang other} tag language we need to replace it by this source.\n        manipulatedText = manipulatedText.replace(otherReg, langsItems.other);\n        if (hasTagSource) {\n            // And remove the {mlang source} tag if found.\n            manipulatedText.replace(sourceReg, \"\");\n        }\n    } else {\n        if (!hasTagOther) {\n            // We still add this source as otherTag of the so that it can be replaced further.\n            const firstMlangClosingTagEnd = manipulatedText.indexOf(\"{mlang\");\n            manipulatedText = [manipulatedText.slice(0, firstMlangClosingTagEnd),\n                langsItems.other,\n                manipulatedText.slice(firstMlangClosingTagEnd)\n            ].join('');\n        }\n        if (!hasTagSource) {\n            // Add the {mlang source} tag if not found.\n            manipulatedText.replace(sourceReg, langsItems.source);\n        }\n    }\n    return manipulatedText;\n};\nconst onItemChecked = (e) => {\n    if (config.debug > 0) {\n        window.console.info(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n    }\n    const key = e.target.getAttribute('data-key');\n    if (e.target.getAttribute('data-action') === \"local_deepler/checkbox\") {\n        toggleStatus(key, e.target.checked);\n        countWordAndChar();\n    } else {\n        initTempForKey(key, false);\n    }\n};\nconst initTempForKey = (key, blank) => {\n    // Get the source text\n    const sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    const editorSettings = findEditor(key);\n    const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n    tempTranslations[key] = {\n        'editorType': null,\n        'editor': null,\n        'source': sourceText,\n        'sourceLang': sourceLang,\n        'status': Selectors.statuses.wait,\n        'translation': ''\n    };\n    if (!blank) {\n        if (editorSettings === null || editorSettings.editor === null) {\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, 'Original editor not found...');\n        } else {\n            // Initialize status for the source content.\n            tempTranslations[key] = {\n                'editorType': editorSettings.editorType,\n                'editor': editorSettings.editor,\n                'source': sourceText,\n                'sourceLang': sourceLang,\n                'status': Selectors.statuses.wait,\n                'translation': ''\n            };\n        }\n    }\n};\nconst toggleStatus = (key, checked) => {\n    const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n                initTempForKey(key, false);\n            } else {\n                initTempForKey(key, true);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(key, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(key, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\nconst setIconStatus = (key, s = Selectors.statuses.wait, isBtn = false) => {\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n            icon.classList.add('btn-outline-secondary');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n            icon.classList.remove('btn-outline-secondary');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', s);\n};\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    const items = document.querySelectorAll(selector);\n    const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = allSelected && selected;\n        toggleStatus(k, false);\n    });\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    saveAllBtn.hidden = saveAllBtn.disabled = false;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            if (tempTranslations[key].editor !== null) {\n                getTranslation(key);\n            }\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key].staus = Selectors.statuses.wait;\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", tempTranslations[key].source);\n    formData.append(\"source_lang\", tempTranslations[key].sourceLang);\n    formData.append(\"target_lang\", targetLang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local_deepler/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    if (config.debug) {\n        window.console.info(\"Send deepl:\", formData);\n    }\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                // Display translation\n                tempTranslations[key].editor.innerHTML = data.translations[0].text;\n                // Store the translation in the global object\n                tempTranslations[key].translation = data.translations[0].text;\n                setIconStatus(key, Selectors.statuses.tosave, true);\n                injectImageCss(\n                    tempTranslations[key].editorType,\n                    tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n            } else {\n                // Oh no! There has been an error with the request!\n                setIconStatus(key, Selectors.statuses.failed, false);\n            }\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n *\n * @param {Integer} editorSettings\n * */\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {string} editorType\n * @param {object} editor\n */\nconst injectImageCss = (editorType, editor) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorType === \"iframe\") {\n        let editorschildrens = Array.from(editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * @todo get the editor from moodle db in the php.\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        let r = null;\n        let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n        if (editorTab.indexOf(mainEditorType) === -1) {\n            window.console.warn('Unsupported editor ' + mainEditorType);\n        } else {\n            // First let's try the current editor.\n            try {\n                r = findEditorByType(key, mainEditorType);\n            } catch (e) {\n                // Content was edited by another editor.\n                window.console.warn('Editor not found: ' + mainEditorType);\n            }\n        }\n        return r;\n    } else {\n        return {editor: e, editorType: et};\n    }\n};\n/**\n * @param {string} key\n * @param {object} editorType\n * @returns {{editor: object, editorType: string}}\n */\nconst findEditorByType = (key, editorType) => {\n    let et = 'basic';\n    let ed = null;\n    switch (editorType) {\n        case \"atto\" :\n            et = 'iframe';\n            ed = document.querySelector(\n                Selectors.editors.types.atto\n                    .replaceAll(\"<KEY>\", key));\n            break;\n        case \"tiny\":\n            et = 'iframe';\n            ed = document.querySelector(Selectors.editors.types.tiny\n                .replaceAll(\"<KEY>\", key))\n                .contentWindow.tinymce;\n            break;\n        case 'marklar':\n        case \"textarea\" :\n            ed = document.querySelector(Selectors.editors.types.other\n                .replaceAll(\"<KEY>\", key));\n            break;\n    }\n    return {editor: ed, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    e.classList.toggle(\"showing\");\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * Launch countWordAndChar\n */\nconst countWordAndChar = () => {\n    let wrdsc = 0;\n    let cws = 0;\n    let cwos = 0;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n    const wordCount = document.querySelector(Selectors.statuses.wordcount);\n    const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n    const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n    const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n    const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n    const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n    let current = cwos + usage.character.count;\n    wordCount.innerText = wrdsc;\n    charWithSpace.innerText = cws;\n    charWOSpace.innerText = cwos;\n    deeplUseSpan.innerText = format.format(current);\n    deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n    if (current >= usage.character.limit) {\n        parent.classList.remove('alert-success');\n        parent.classList.add('alert-danger');\n    } else {\n        parent.classList.add('alert-success');\n        parent.classList.remove('alert-danger');\n    }\n};\n/**\n * @param {string} key\n * @return {object}\n */\nconst getCount = (key) => {\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    return countChars(sourceText);\n};\n/**\n *\n * @param {String} val\n * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n */\nconst countChars = (val) => {\n    const withSpace = val.length;\n    // Using Regex\n    const withOutSpace = val.replace(/\\s+/g, '').length;\n    const wordsCount = val.match(/\\S+/g).length;\n    return {\n        \"wordCount\": wordsCount,\n        \"charNumWithSpace\": withSpace,\n        \"charNumWithOutSpace\": withOutSpace\n    };\n};\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","cfg","debug","window","console","info","userPrefs","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","error","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","sourceselect","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","checkedCheckBoxes","translation","saveTranslation","warn","toggleAutotranslateButton","disabled","validatorsBtns","item","keyValidator","showErrorMessageForEditor","parent","editors","multiples","editorsWithKey","replace","errorMsg","createElement","classList","innerHTML","appendChild","editor","text","sourceText","source","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","add","setIconStatus","success","setTimeout","multilangPill","replaceKey","multilang","prevTransStatus","contains","remove","saved","errorMessage","failed","setIndex","debuginfo","indexOf","slice","sourcetexts","keys","fail","sourceItemLang","isFirstTranslation","isSourceOther","tagPatterns","langsItems","other","additionalUpdate","manipulatedText","fullContent","targetReg","RegExp","match","lastMlangClosingTagEnd","lastIndexOf","join","otherReg","hasTagOther","sourceReg","hasTagSource","firstMlangClosingTagEnd","toggleStatus","countWordAndChar","initTempForKey","blank","editorSettings","findEditor","sourcelangs","wait","editorType","validatorBtn","status","totranslate","tosave","s","isBtn","icon","setAttribute","selector","selected","items","allSelected","k","toggleRowVisibility","checkBoxesWithKey","row","url","URL","location","href","searchParams","set","toString","hidden","ckBox","getTranslation","staus","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","Array","from","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","i","getParentRow","parentrow","toggle","keyid","keyidToKey","multilangs","sep","stringify","split","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","countChars","val","withSpace","withOutSpace"],"mappings":";;;;;;8MA2BIA,iBAAmB,GACnBC,eAAiB,GACjBC,OAAS,GACTC,oBAAsB,GACtBC,WAAa,GACbC,WAAa,GACbC,WAAa,GACbC,WAAa,GACbC,MAAQ,GACRC,OAAS,IAAIC,KAAKC,2BA0EDC,MACjBV,OAASU,IACTV,OAAOW,MAAQ,EACfL,MAAQN,OAAOM,MACXN,OAAOW,MAAQ,IACfC,OAAOC,QAAQC,KAAK,qBACpBF,OAAOC,QAAQC,KAAKd,QACpBY,OAAOC,QAAQC,KAAKR,QAExBP,eAAiBC,OAAOe,UA5BT,UAEXV,WAAaW,SAASC,cAAcC,mBAAUC,QAAQC,SACtDjB,WAAaa,SAASC,cAAcC,mBAAUC,QAAQE,gBAAgBC,MACtElB,WAAaY,SAASC,cAAcC,mBAAUC,QAAQI,gBAAgBD,MACtErB,oBAAsBe,SAASC,cAAcC,mBAAUC,QAAQK,kBAC/DtB,WAAac,SAASS,iBAAiBP,mBAAUC,QAAQO,YAEzDxB,WAAWyB,SAASC,MAAU9B,iBAAiB8B,KAAKC,QAAQC,KAAO,KACrE,MAAOC,GACD/B,OAAOW,OACPC,OAAOC,QAAQmB,MAAMD,EAAEE,WAmB/BC,GAjFAlB,SAASmB,iBAAiB,UAAUJ,IAChCnB,OAAOC,QAAQC,KAAK,UAChBiB,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQI,iBACnCe,aAAaP,GAEbA,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQE,iBACnCkB,aAAaR,GAEbA,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQqB,cACnCC,SAASvB,mBAAUwB,SAASC,QAASZ,EAAEK,OAAOQ,SAE9Cb,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQ0B,iBACnCJ,SAASvB,mBAAUwB,SAASI,YAAaf,EAAEK,OAAOQ,UAElDb,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQO,aAAeK,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQ4B,gBACrFC,cAAcjB,MAGtBf,SAASmB,iBAAiB,SAASJ,IAC3BA,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQ8B,kBACnCC,kBAAkBnB,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQ8B,kBAErDlB,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQK,oBAC/BxB,OAAOmD,cAAgBnD,OAAOoD,WAAwBC,IAAhBrD,OAAOoD,oBACvCE,OAAO,CACTC,MAAO,oBACPC,wDACAC,MAAM,EACNC,eAAe,IAGnBC,mBAGJ5B,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQyC,eACnCC,oBAAoB9B,GAEpBA,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQC,UAClBJ,SAASS,iBAAiBP,mBAAUwB,SAASoB,mBACrDnC,SAASI,UACRD,IAAMC,EAAEF,QAAQC,IACoB,KAAtChC,iBAAiBgC,KAAKiC,YACtBC,gBAAgBlC,KAEhBlB,OAAOC,QAAQoD,KAAK,kBAAoBnC,WAuCxDoC,4BACqBlD,SAASC,cAAcC,mBAAUC,QAAQyC,cACjDO,SAAWhE,aAAeC,WAIpBY,SAASS,iBAAiBP,mBAAUC,QAAQiD,gBACpDzC,SAAS0C,OAEhBA,KAAKlC,iBAAiB,SAAUJ,QAExBD,IADUC,EAAEK,OAAOC,QAAQnB,mBAAUC,QAAQiD,gBACjCvC,QAAQyC,aACM,OAA1BxE,iBAAiBgC,WAA2CuB,IAA1BvD,iBAAiBgC,KAInDlB,OAAOC,QAAQoD,gCAAyBnC,wBAExCkC,gBAAgBlC,WAO5B5B,WAAWyB,SAASI,IAChBA,EAAEoC,SAAWhE,aAAeC,WAC5B2B,EAAEI,iBAAiB,SAAS,KACxB+B,kCAGRzB,SAASvB,mBAAUwB,SAASC,QAAS3B,SAASC,cAAcC,mBAAUC,QAAQqB,aAAaI,SAC3FH,SAASvB,mBAAUwB,SAASI,YAAa9B,SAASC,cAAcC,mBAAUC,QAAQ0B,gBAAgBD,gBAEhG2B,0BAA4B,CAACzC,IAAKG,eAChCuC,OAASxD,SAASC,cAAcC,mBAAUuD,QAAQC,UAAUC,eAAeC,QAAQ,QAAS9C,YAC1F+C,SAAW7D,SAAS8D,cAAc,OACxCD,SAASE,UAAY,CAAC,sBACtBF,SAASG,UAAY/C,QACrBuC,OAAOS,YAAYJ,WAOjBb,gBAAmBlC,UAEjBoD,OAASpF,iBAAiBgC,KAAKoD,OAC/BC,KAAOD,OAAOF,UACdI,WAAatF,iBAAiBgC,KAAKuD,OACnCC,QAAUtE,SAASC,cAAcC,mBAAUuD,QAAQC,UAAUC,eAAeC,QAAQ,QAAS9C,MAC7FyD,GAAKD,QAAQE,aAAa,WAC1BC,IAAMH,QAAQE,aAAa,YAC3BE,MAAQJ,QAAQE,aAAa,cAC7BG,MAAQL,QAAQE,aAAa,cAG7BI,UAAY,GAChBA,UAAUC,SAAW7F,OAAO6F,SAC5BD,UAAUL,GAAKO,SAASP,IACxBK,UAAUF,MAAQA,MAClBE,UAAUD,MAAQA,MACd3F,OAAOW,MAAQ,GACfC,OAAOC,QAAQC,KAAK8E,yBAGnBG,KAAK,CACN,CACIC,WAAY,0BACZC,KAAM,CACFC,KAAM,CAACN,YAEXO,KAAOD,WAECE,UAAYF,KAAK,GAAGf,QAGpBe,KAAKG,OAAS,EAAG,KAEbC,SAAWtF,SAASC,cACpBC,mBAAUuD,QAAQC,UAAU6B,UACvB3B,QAAQ,QAAS9C,MAEtB0E,YAAcC,eAAeL,UAAWjB,KAAMC,WAAYtF,iBAAiBgC,KAAK3B,YAGhFuG,MAAQ,GACZA,MAAMb,SAAW7F,OAAO6F,SACxBa,MAAMnB,GAAKO,SAASP,IACpBmB,MAAMjB,IAAMA,IACZiB,MAAMhB,MAAQA,MACdgB,MAAMf,MAAQA,MACde,MAAMvB,KAAOqB,YACTxG,OAAOW,MAAQ,IACfC,OAAOC,QAAQC,KAAK0F,aACpB5F,OAAOC,QAAQC,KAAK4F,cAGlBC,eAAiB,KACnBrB,QAAQP,UAAU6B,IAAI,0BAEtBC,cAAc/E,IAAKZ,mBAAUwB,SAASoE,SAEtCC,YAAW,SACHC,cAAgBhG,SAASC,cAAcgG,WAAW/F,mBAAUwB,SAASwE,UAAWpF,MAC9Dd,SAASC,cAAcgG,WAAW/F,mBAAUwB,SAASyE,gBAAiBrF,MAC5EiD,UAAY,iCACxBiC,cAAcjC,UAAUqC,SAAS,cACjCJ,cAAcjC,UAAUsC,OAAO,aAEnCR,cAAc/E,IAAKZ,mBAAUwB,SAAS4E,WAIxCC,aAAgBvF,QAClBkD,OAAOH,UAAU6B,IAAI,wBACrBC,cAAc/E,IAAKZ,mBAAUwB,SAAS8E,cAChCC,UAA+C,IAApCzF,MAAM0F,UAAUC,QAAQ,OAAgB,GAAK3F,MAAM0F,UAAUC,QAAQ,WAClF1F,QAAUD,MAAMC,QAAU,QAAUD,MAAM0F,UAAUE,MAAM,EAAGH,UAAY,MACzEzH,OAAOW,MAAQ,IACfsB,QAAUD,MAAM0F,WAEpBnD,0BAA0BzC,IAAKG,wBAG9B8D,KAAK,CACN,CACIC,WAAY,mCACZC,KAAM,CACFC,KAAM,CAACQ,QAEXP,KAAOD,OAEClG,OAAOW,MAAQ,GACfC,OAAOC,QAAQC,KAAK,OAAQgB,IAAKoE,MAIjCA,KAAKG,OAAS,GACdM,iBACAL,SAAStB,UAAYkB,KAAK,GAAGf,KAGzBnF,OAAOmD,cAAgBnD,OAAOoD,OAC9BpC,SAASC,cAAcC,mBAAU2G,YAAYC,KAAKlD,QAAQ,QAAS9C,MAC9DkD,UAAYG,OAIrBoC,gBAGRQ,KAAO/F,QAEHuF,aAAavF,gBAMzBpB,OAAOC,QAAQoD,KAAKiC,OAG5B6B,KAAO/F,QAEHpB,OAAOC,QAAQoD,KAAKjC,YAc9ByE,eAAiB,CAACL,UAAWrC,YAAasB,OAAQ2C,wBAC9CC,oBAAsD,IAAjC7B,UAAUuB,QAAQ,UACvCO,cAAgBF,iBAAmB7H,WACnCgI,YAAc,OACP,sDACY/H,sDACA4H,kCAEnBI,WAAa,aACAhC,uCACUf,0CACLjF,uBAAc2D,+CACdiE,2BAAkB3C,0BAEtC4C,mBAEIC,cACOE,WAAWC,MAAQD,WAAWhG,OAE9BgG,WAAWC,MAAQD,WAAW/C,OAAS+C,WAAWhG,OAI1DkG,iBAAiBJ,cAAeC,YAAaC,aAWlDE,iBAAmB,CAACJ,cAAeC,YAAaC,kBAC9CG,gBAAkBH,WAAWI,kBAE3BC,UAAY,IAAIC,OAAOP,YAAY/F,OAAQ,SAC5BmG,gBAAgBI,MAAMF,WAGvCF,gBAAkBA,gBAAgB3D,QAAQ6D,UAAWL,WAAWhG,YAC7D,OAEGwG,uBAAyBL,gBAAgBM,YAAY,WAAa,UAAUxC,OAClFkC,gBAAkB,CAACA,gBAAgBX,MAAM,EAAGgB,wBACxCR,WAAWhG,OACXmG,gBAAgBX,MAAMgB,yBACxBE,KAAK,UAGLC,SAAW,IAAIL,OAAOP,YAAYE,MAAO,MACzCW,YAAcT,gBAAgBI,MAAMI,UAEpCE,UAAY,IAAIP,OAAOP,YAAYE,MAAO,MAC1Ca,aAAeX,gBAAgBI,MAAMM,cACvCf,cAEAK,gBAAkBA,gBAAgB3D,QAAQmE,SAAUX,WAAWC,OAC3Da,cAEAX,gBAAgB3D,QAAQqE,UAAW,QAEpC,KACED,YAAa,OAERG,wBAA0BZ,gBAAgBZ,QAAQ,UACxDY,gBAAkB,CAACA,gBAAgBX,MAAM,EAAGuB,yBACxCf,WAAWC,MACXE,gBAAgBX,MAAMuB,0BACxBL,KAAK,IAENI,cAEDX,gBAAgB3D,QAAQqE,UAAWb,WAAW/C,eAG/CkD,iBAELvF,cAAiBjB,IACf/B,OAAOW,MAAQ,GACfC,OAAOC,QAAQC,KAAK,YAAaiB,EAAEK,OAAOoD,aAAa,YAAazD,EAAEK,OAAOoD,aAAa,sBAExF1D,IAAMC,EAAEK,OAAOoD,aAAa,YACW,2BAAzCzD,EAAEK,OAAOoD,aAAa,gBACtB4D,aAAatH,IAAKC,EAAEK,OAAOQ,SAC3ByG,oBAEAC,eAAexH,KAAK,IAGtBwH,eAAiB,CAACxH,IAAKyH,eAEnBnE,WAAapE,SAASC,cAAcC,mBAAU2G,YAAYC,KAAKlD,QAAQ,QAAS9C,MAAM0D,aAAa,uBACnGgE,eAAiBC,WAAW3H,KAC5B3B,WAAaa,SAASC,cAAcC,mBAAU2G,YAAY6B,YAAY9E,QAAQ,QAAS9C,MAAMR,MACnGxB,iBAAiBgC,KAAO,YACN,YACJ,YACAsD,sBACIjF,kBACJe,mBAAUwB,SAASiH,iBACd,IAEdJ,QACsB,OAAnBC,gBAAqD,OAA1BA,eAAetE,QAC1C2B,cAAc/E,IAAKZ,mBAAUwB,SAAS8E,QACtCjD,0BAA0BzC,IAAK,iCAG/BhC,iBAAiBgC,KAAO,YACN0H,eAAeI,kBACnBJ,eAAetE,cACfE,sBACIjF,kBACJe,mBAAUwB,SAASiH,iBACd,MAKzBP,aAAe,CAACtH,IAAKc,mEACR5B,SAASC,cAAcgG,WAAW/F,mBAAUC,QAAQ0I,aAAc/H,MAAMD,QAAQiI,aAEtF5I,mBAAUwB,SAASiH,KAChB/G,SACAiE,cAAc/E,IAAKZ,mBAAUwB,SAASqH,aACtCT,eAAexH,KAAK,IAEpBwH,eAAexH,KAAK,cAGvBZ,mBAAUwB,SAASqH,YAChBnH,wCAAW9C,iBAAiBgC,4FAAMiC,4EAAasC,QAAS,EACxDQ,cAAc/E,IAAKZ,mBAAUwB,SAASsH,QAAQ,GAE9CnD,cAAc/E,IAAKZ,mBAAUwB,SAASiH,iBAGzCzI,mBAAUwB,SAASsH,OACfpH,SACDiE,cAAc/E,IAAKZ,mBAAUwB,SAASqH,kBAGzC7I,mBAAUwB,SAAS8E,YAEnBtG,mBAAUwB,SAASoE,aAEnB5F,mBAAUwB,SAAS4E,SAI1BT,cAAgB,SAAC/E,SAAKmI,yDAAI/I,mBAAUwB,SAASiH,KAAMO,8DACjDC,KAAOnJ,SAASC,cAAcgG,WAAW/F,mBAAUC,QAAQ0I,aAAc/H,MACzEoI,OACKC,KAAKpF,UAAUqC,SAAS,SACzB+C,KAAKpF,UAAU6B,IAAI,OACnBuD,KAAKpF,UAAU6B,IAAI,0BAEnBuD,KAAKpF,UAAUqC,SAAS,YACxB+C,KAAKpF,UAAUsC,OAAO,aAGrB8C,KAAKpF,UAAUqC,SAAS,YACzB+C,KAAKpF,UAAU6B,IAAI,WAEnBuD,KAAKpF,UAAUqC,SAAS,SACxB+C,KAAKpF,UAAUsC,OAAO,OACtB8C,KAAKpF,UAAUsC,OAAO,2BAG9B8C,KAAKC,aAAa,OAAQF,MAAQ,SAAW,UAC7CC,KAAKC,aAAa,cAAeH,IAO/BxH,SAAW,CAAC4H,SAAUC,kBAClBC,MAAQvJ,SAASS,iBAAiB4I,UAClCG,YAAcxJ,SAASC,cAAcC,mBAAUC,QAAQyC,cAAchB,QAC3E2H,MAAM5I,SAAS0C,WACPoG,EAAIpG,KAAKmB,aAAa,eAC1BkF,oBAAoBrG,KAAMiG,UAE1BjG,KAAKpD,cAAcgG,WAAW/F,mBAAUuD,QAAQC,UAAUiG,kBAAmBF,IAAI7H,QAAU4H,aAAeF,SAC1GlB,aAAaqB,GAAG,MAEpBvG,4BACAmF,oBAEEqB,oBAAsB,CAACE,IAAKhI,WAC1BA,QACAgI,IAAI7F,UAAUsC,OAAO,UAErBuD,IAAI7F,UAAU6B,IAAI,WAOpBtE,aAAgBP,QACd8I,IAAM,IAAIC,IAAIlK,OAAOmK,SAASC,MACfH,IAAII,aACVC,IAAI,cAAenJ,EAAEK,OAAOd,OACzCV,OAAOmK,SAAWF,IAAIM,YAOpB5I,aAAgBR,QACd8I,IAAM,IAAIC,IAAIlK,OAAOmK,SAASC,MACfH,IAAII,aACVC,IAAI,OAAQnJ,EAAEK,OAAOd,OAClCV,OAAOmK,SAAWF,IAAIM,YAKpBxH,gBAAkB,KACpBtD,WAAW+K,OAAS/K,WAAW8D,UAAW,EAC1CnD,SACKS,iBAAiBP,mBAAUwB,SAASoB,mBACpCnC,SAAS0J,YACFvJ,IAAMuJ,MAAM7F,aAAa,YACQ,OAAjC1F,iBAAiBgC,KAAKoD,QACtBoG,eAAexJ,SASzBwJ,eAAkBxJ,gCAEpBhC,iBAAiBgC,KAAKyJ,MAAQrK,mBAAUwB,SAASiH,SAE7C6B,SAAW,IAAIC,SACnBD,SAASE,OAAO,OAAQ5L,iBAAiBgC,KAAKuD,QAC9CmG,SAASE,OAAO,cAAe5L,iBAAiBgC,KAAK3B,YACrDqL,SAASE,OAAO,cAAetL,WAAWuL,eAC1CH,SAASE,OAAO,WAAY1L,OAAO4L,QACnCJ,SAASE,OAAO,eAAgB1K,SAASC,cAAcC,mBAAU2K,MAAMC,aAAalJ,QAAU,OAAS,OACvG4I,SAASE,OAAO,wCAAW1K,SAASC,cAAcC,mBAAU2K,MAAME,SAASzK,6DAAS,MACpFkK,SAASE,OAAO,kBAAmB1K,SAASC,cAAcC,mBAAU2K,MAAMG,gBAAgB1K,OAC1FkK,SAASE,OAAO,sBAAuB1K,SAASC,cAAcC,mBAAU2K,MAAMI,oBAAoBrJ,SAClG4I,SAASE,OAAO,YAAa1K,SAASC,cAAc,4CAA4CK,OAChGkK,SAASE,OAAO,cAAe1K,SAASC,cAAcC,mBAAU2K,MAAMK,YAAY5K,OAClFkK,SAASE,OAAO,oBAAqB1K,SAASC,cAAcC,mBAAU2K,MAAMM,kBAAkBvJ,SAC9F4I,SAASE,OAAO,qBAAsBU,YAAYpL,SAASC,cAAcC,mBAAU2K,MAAMQ,kBAAkB/K,QAC3GkK,SAASE,OAAO,iBAAkBU,YAAYpL,SAASC,cAAcC,mBAAU2K,MAAMS,eAAehL,QACpGkK,SAASE,OAAO,cAAeU,YAAYpL,SAASC,cAAcC,mBAAU2K,MAAMU,YAAYjL,QAC1FtB,OAAOW,OACPC,OAAOC,QAAQC,KAAK,cAAe0K,cAGnCgB,IAAM,IAAIC,eACdD,IAAIE,mBAAqB,QACjBF,IAAIG,aAAeF,eAAeG,KAAM,OAClC9C,OAAS0C,IAAI1C,UACJ,IAAXA,QAAiBA,QAAU,KAAOA,OAAS,IAAM,KAE7C5D,KAAO2G,KAAKC,MAAMN,IAAIO,cAE1BjN,iBAAiBgC,KAAKoD,OAAOF,UAAYkB,KAAK8G,aAAa,GAAG7H,KAE9DrF,iBAAiBgC,KAAKiC,YAAcmC,KAAK8G,aAAa,GAAG7H,KACzD0B,cAAc/E,IAAKZ,mBAAUwB,SAASsH,QAAQ,GAC9CiD,eACInN,iBAAiBgC,KAAK8H,WACtB9J,iBAAiBgC,KAAKoD,aAG1B2B,cAAc/E,IAAKZ,mBAAUwB,SAAS8E,QAAQ,KAI1DgF,IAAIU,KAAK,OAAQlN,OAAOmN,UACxBX,IAAIY,KAAK5B,WAWPyB,eAAiB,CAACrD,WAAY1E,gBAE1BmI,IAAMrM,SAAS8D,cAAc,YACnCuI,IAAIC,YAAc,8DACC,WAAf1D,WAAyB,KACrB2D,iBAAmBC,MAAMC,KAAKvI,OAAOwI,cAAcC,UACnDC,OAAQ,MACP,IAAIC,KAAKN,iBAAkB,IACpBA,iBAAiBM,GACnBC,YAAcT,IAAIS,UAAW,CAC/BF,OAAQ,SAIXA,OACD1I,OAAOwI,cAAczI,YAAYoI,OAUvC5D,WAAc3H,UACZC,EAAIf,SAASC,cAAcC,mBAAUuD,QAAQsJ,MAAMC,MAClDpJ,QAAQ,QAAS9C,SAEZ,OAANC,EAAY,KACRkM,EAAI,SAEmC,IAD3B,CAAC,OAAQ,OAAQ,UAAW,YAC9BtG,QAAQ5H,gBAClBa,OAAOC,QAAQoD,KAAK,sBAAwBlE,yBAIxCkO,EAAIC,iBAAiBpM,IAAK/B,gBAC5B,MAAOgC,GAELnB,OAAOC,QAAQoD,KAAK,qBAAuBlE,uBAG5CkO,QAEA,CAAC/I,OAAQnD,EAAG6H,WAjBd,UAyBPsE,iBAAmB,CAACpM,IAAK8H,kBACvBuE,GAAK,QACLC,GAAK,YACDxE,gBACC,OACDuE,GAAK,SACLC,GAAKpN,SAASC,cACVC,mBAAUuD,QAAQsJ,MAAMM,KACnBC,WAAW,QAASxM,gBAE5B,OACDqM,GAAK,SACLC,GAAKpN,SAASC,cAAcC,mBAAUuD,QAAQsJ,MAAMQ,KAC/CD,WAAW,QAASxM,MACpB0M,cAAcC,kBAElB,cACA,WACDL,GAAKpN,SAASC,cAAcC,mBAAUuD,QAAQsJ,MAAM1F,MAC/CiG,WAAW,QAASxM,YAG1B,CAACoD,OAAQkJ,GAAIxE,WAAYuE,KAM9BtK,oBAAuB9B,IAErBA,EAAEK,OAAOQ,QACT1C,WAAWyB,SAAS+M,IAEhBA,EAAE9L,SAAW+L,aAAaD,GAAG3J,UAAUqC,SAAS,UAChDgC,aAAasF,EAAElJ,aAAa,YAAakJ,EAAE9L,YAG/C1C,WAAWyB,SAAS+M,IAChBA,EAAE9L,SAAU,EACZwG,aAAasF,EAAElJ,aAAa,aAAa,MAGjDtB,4BACAmF,oBAEEsF,aAAgB/M,MACXA,KAAKS,QAAQ4E,WAAW/F,mBAAU2G,YAAY+G,UAAWhN,KAAK4D,aAAa,cAKhFtB,0BAA4B,KAC9BjE,oBAAoBkE,UAAW,MAC1B,IAAIuK,KAAKxO,WAAY,IACdA,WAAWwO,GACb9L,QAAS,CACX3C,oBAAoBkE,UAAW,WASrCjB,kBAAqBnB,IACvBA,EAAEgD,UAAU8J,OAAO,eACfC,MAAQ/M,EAAEyD,aAAa,iBACvB1D,IAAMiN,WAAWD,OACjBzJ,OAASrE,SAASC,cAAcgG,WAAW/F,mBAAU2G,YAAYC,KAAMhG,MACvEoF,UAAYlG,SAASC,cAAcgG,WAAW/F,mBAAU2G,YAAYmH,WAAYF,QACpFzJ,OAAON,UAAU8J,OAAO,QACxB3H,UAAUnC,UAAU8J,OAAO,SAQzBzC,YAAc,SAACnC,OAAGgF,2DAAM,WACnBpC,KAAKqC,UAAUjF,EAAEkF,MAAMF,OAQ5BhI,WAAa,CAACgD,EAAGQ,IACZR,EAAErF,QAAQ,QAAS6F,GAOxBsE,WAActE,QACZ2E,EAAI3E,EAAE9B,MAAM,qCACNyG,EAAE,eAAMA,EAAE,gBAAOA,EAAE,SAK3B/F,iBAAmB,SACjBgG,MAAQ,EACRC,IAAM,EACNC,KAAO,EACXvO,SACKS,iBAAiBP,mBAAUwB,SAASoB,mBACpCnC,SAAS0J,YACFvJ,IAAMuJ,MAAM7F,aAAa,YACzBgK,QAAUC,SAAS3N,KACvBuN,OAASG,QAAQE,UACjBH,MAAQC,QAAQG,oBAChBL,KAAOE,QAAQI,0BAEjBF,UAAY1O,SAASC,cAAcC,mBAAUwB,SAASmN,WACtDC,cAAgB9O,SAASC,cAAcC,mBAAUwB,SAASkN,kBAC1DG,YAAc/O,SAASC,cAAcC,mBAAUwB,SAASiN,qBACxDK,aAAehP,SAASC,cAAcC,mBAAUwB,SAASuN,YACzDC,aAAelP,SAASC,cAAcC,mBAAUwB,SAASyN,UACzD3L,OAASxD,SAASC,cAAcC,mBAAUwB,SAAS0N,0BACrDC,QAAUd,KAAOjP,MAAMgQ,UAAUC,MACrCb,UAAU5B,UAAYuB,MACtBS,cAAchC,UAAYwB,IAC1BS,YAAYjC,UAAYyB,KACxBS,aAAalC,UAAYvN,OAAOA,OAAO8P,SACvCH,aAAapC,UAAsC,OAA1BxN,MAAMgQ,UAAUE,MAAiB,IAAMjQ,OAAOA,OAAOD,MAAMgQ,UAAUE,OAC1FH,SAAW/P,MAAMgQ,UAAUE,OAC3BhM,OAAOO,UAAUsC,OAAO,iBACxB7C,OAAOO,UAAU6B,IAAI,kBAErBpC,OAAOO,UAAU6B,IAAI,iBACrBpC,OAAOO,UAAUsC,OAAO,kBAO1BoI,SAAY3N,UACVsD,WAAapE,SAASC,cAAcC,mBAAU2G,YAAYC,KAAKlD,QAAQ,QAAS9C,MAAM0D,aAAa,8BAChGiL,WAAWrL,aAOhBqL,WAAcC,YACVC,UAAYD,IAAIrK,OAEhBuK,aAAeF,IAAI9L,QAAQ,OAAQ,IAAIyB,aAEtC,WADYqK,IAAI/H,MAAM,QAAQtC,wBAGbsK,8BACGC"}