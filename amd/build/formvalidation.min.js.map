{"version":3,"file":"formvalidation.min.js","sources":["../src/formvalidation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *  description here.\n *\n * @module     'local_deepler'; // Full name of the plugin (used for diagnostics)./admin/formvalidation\n * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([], function() {\n    const initCode = ()=> {\n        const form = document.querySelector('form.mform');\n        if (!form) {\n return;\n}\n\n        const attribute = document.getElementById('deepler-attribute');\n        const valuefilter = document.getElementById('deepler-valuefilter');\n        const token = document.getElementById('deepler-token');\n        let errorDiv = document.getElementById('deepler-form-errors');\n\n        // If error div doesn't exist, create it at the top of the form.\n        if (!errorDiv) {\n            errorDiv = document.createElement('div');\n            errorDiv.id = 'deepler-form-errors';\n            form.prepend(errorDiv);\n        }\n\n        form.addEventListener('submit', function(e) {\n            let errors = [];\n\n            // Attribute dropdown must be selected.\n            if (!attribute.value) {\n                errors.push('Please select an attribute.');\n            }\n\n            // Filter value must not be empty.\n            if (!valuefilter.value.trim()) {\n                errors.push('Filter value cannot be empty.');\n            }\n\n            // Token must be a valid UUID v4.\n            const uuid = token.value.trim();\n            const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n            if (!uuidRegex.test(uuid)) {\n                errors.push('API token must be a valid UUID.');\n            }\n\n            if (errors.length > 0) {\n                e.preventDefault();\n                errorDiv.innerHTML = '<div class=\"alert alert-danger\">' + errors.join('<br>') + '</div>';\n            } else {\n                errorDiv.innerHTML = '';\n            }\n        });\n    };\n    return {\n        init: function() {\n            if (document.readyState !== 'loading') {\n                // DOM is already ready.\n                initCode();\n            } else {\n                // Wait for DOMContentLoaded.\n                document.addEventListener('DOMContentLoaded', initCode);\n            }\n        }\n    };\n\n});\n"],"names":["define","initCode","form","document","querySelector","attribute","getElementById","valuefilter","token","errorDiv","createElement","id","prepend","addEventListener","e","errors","value","push","trim","uuid","test","length","preventDefault","innerHTML","join","init","readyState"],"mappings":";;;;;;;AAsBAA,sCAAO,IAAI,iBACDC,SAAW,WACPC,KAAOC,SAASC,cAAc,kBAC/BF,kBAICG,UAAYF,SAASG,eAAe,qBACpCC,YAAcJ,SAASG,eAAe,uBACtCE,MAAQL,SAASG,eAAe,qBAClCG,SAAWN,SAASG,eAAe,uBAGlCG,WACDA,SAAWN,SAASO,cAAc,OAClCD,SAASE,GAAK,sBACdT,KAAKU,QAAQH,WAGjBP,KAAKW,iBAAiB,UAAU,SAASC,OACjCC,OAAS,GAGRV,UAAUW,OACXD,OAAOE,KAAK,+BAIXV,YAAYS,MAAME,QACnBH,OAAOE,KAAK,uCAIVE,KAAOX,MAAMQ,MAAME,OACP,6EACHE,KAAKD,OAChBJ,OAAOE,KAAK,mCAGZF,OAAOM,OAAS,GAChBP,EAAEQ,iBACFb,SAASc,UAAY,mCAAqCR,OAAOS,KAAK,QAAU,UAEhFf,SAASc,UAAY,aAI1B,CACHE,KAAM,WAC0B,YAAxBtB,SAASuB,WAETzB,WAGAE,SAASU,iBAAiB,mBAAoBZ"}