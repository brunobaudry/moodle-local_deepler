/**
 *  description here.
 *
 * @module     'local_deepler'; // Full name of the plugin (used for diagnostics)./glossary
 * @copyright  2025 Bruno Baudry <bruno.baudry@bfh.ch>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_deepler/glossary",["./local/selectors","./local/api","./local/customevents","core/modal","core/log"],(function(Selectors,Api,Events,Modal,Log){const initCode=()=>{const fileInput=document.getElementById("fileElem"),fileNameDisplay=document.getElementById("filename-display");fileInput.addEventListener("change",(function(){fileInput.files.length>0?fileNameDisplay.textContent="Selected file: ".concat(fileInput.files[0].name):fileNameDisplay.textContent=""}))},showEntriesModal=ajaxResponse=>{const glossaryid=ajaxResponse.glossaryid,entries=JSON.parse(ajaxResponse.entries),status=ajaxResponse.status,message=ajaxResponse.message;if("success"===status){const table=document.createElement("table");table.className="generaltable";const thead=document.createElement("thead");thead.innerHTML="<tr><th>".concat(ajaxResponse.source.toUpperCase(),"</th><th>").concat(ajaxResponse.target.toUpperCase(),"</th></tr>"),table.appendChild(thead);const tbody=document.createElement("tbody");Object.entries(entries).forEach((_ref=>{let[key,value]=_ref;const row=document.createElement("tr");row.innerHTML="<td>".concat(key,"</td><td>").concat(value,"</td>"),tbody.appendChild(row)})),table.appendChild(tbody),Modal.create({title:"Entries",body:table,type:"default",show:!0,removeOnClose:!0})}else Modal.create({title:"Error fetching entries for<br/><em>".concat(glossaryid,"</em>"),body:message,type:"default",show:!0,removeOnClose:!0})};return{init:function(){"loading"!==document.readyState?(initCode(),(()=>{document.querySelectorAll(Selectors.glossary.visibilityDropdown).forEach((e=>{e.addEventListener("change",(evt=>{Log.info(evt.target.dataset.glossary,evt.target.value),Api.updateGlossariesVisibility(evt.target.dataset.glossary,evt.target.value)}))}));const allGlossarriesEntry=document.querySelectorAll(Selectors.glossary.entriesviewer);Log.info(allGlossarriesEntry),allGlossarriesEntry.forEach((e=>{e.addEventListener("click",(e=>{0!==e.target.dataset.length&&void 0!==e.target.dataset.glossary?(Log.info(e.target.dataset.glossary),Api.getGlossariesEntries(e.target.dataset.glossary,e.target.dataset.source,e.target.dataset.target)):e.target.parentNode.dataset&&e.target.parentNode.dataset.glossary?(Log.info(e.target.parentNode.dataset.glossary),Api.getGlossariesEntries(e.target.parentNode.dataset.glossary,e.target.parentNode.dataset.source,e.target.parentNode.dataset.target)):Log.error("Cannot not find glossary ID")}))})),Events.on(Api.GLOSSARY_ENTRIES_SUCCESS,showEntriesModal),Events.on(Api.GLOSSARY_ENTRIES_FAILED,(e=>{Log.error(Api.GLOSSARY_ENTRIES_FAILED),Log.error(e)}))})()):document.addEventListener("DOMContentLoaded",initCode)}}}));

//# sourceMappingURL=glossary.min.js.map