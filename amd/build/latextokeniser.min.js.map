{"version":3,"file":"latextokeniser.min.js","sources":["../src/latextokeniser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Function to replace LaTeX math with tokens\n * @param {String} text\n * @returns {Object} {{latexExpressions: *[], tokenizedText}}\n */\nexport function preprocess(text) {\n    const latexExpressions = [];\n    let tokenizedText = text;\n\n    // Patterns for different LaTeX math environments\n    const patterns = [\n        {regex: /\\$\\$.*?\\$\\$/g, type: 'display'} // Display math\n    ];\n\n    // Replace each LaTeX math expression with a token\n    patterns.forEach(pattern => {\n        tokenizedText = tokenizedText.replace(pattern.regex, match => {\n            const token = `__LATEX_${latexExpressions.length}__`;\n            latexExpressions.push(match);\n            return token;\n        });\n    });\n\n    return {tokenizedText, latexExpressions: latexExpressions};\n}\n\n/**\n * Function to replace tokens with original LaTeX math\n * @param {String} text\n * @param {Array} latexExpressions\n * @returns {String}\n */\nexport function postprocess(text, latexExpressions) {\n    latexExpressions.forEach((expr, i) => {\n        const token = new RegExp(`__LATEX_${i}__`, 'g');\n        text = text.replace(token, escapeReplacementString(expr));\n    });\n    return text;\n}\n\n/**\n * Escape LaTeX tags\n * @param {String} str\n * @returns {String}\n */\nexport function escapeReplacementString(str) {\n    return str.replace(/\\$/g, '$$$$');\n}\n"],"names":["escapeReplacementString","str","replace","text","latexExpressions","forEach","expr","i","token","RegExp","tokenizedText","regex","type","pattern","match","length","push"],"mappings":"+EAkEgBA,wBAAwBC,YAC7BA,IAAIC,QAAQ,MAAO,uJAdFC,KAAMC,yBAC9BA,iBAAiBC,SAAQ,CAACC,KAAMC,WACtBC,MAAQ,IAAIC,OAAQ,WAAUF,MAAO,KAC3CJ,KAAOA,KAAKD,QAAQM,MAAOR,wBAAwBM,UAEhDH;;;;;;SAhCgBA,YACjBC,iBAAmB,OACrBM,cAAgBP,WAGH,CACb,CAACQ,MAAO,eAAgBC,KAAM,YAIzBP,SAAQQ,UACbH,cAAgBA,cAAcR,QAAQW,QAAQF,OAAOG,cAC3CN,MAAS,WAAUJ,iBAAiBW,kBAC1CX,iBAAiBY,KAAKF,OACfN,YAIR,CAACE,cAAAA,cAAeN,iBAAkBA"}