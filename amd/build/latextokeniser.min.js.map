{"version":3,"file":"latextokeniser.min.js","sources":["../src/latextokeniser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_deepler/deepler\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/**\n *\n * @type {[{regex: RegExp, type: string},{regex: RegExp, type: string}]}\n */\nconst patterns = [\n    {regex: /<pre\\b[^>]*>(.*?)<\\/pre>/gs, type: 'PRETAG'}, // pre HTML\n    {regex: /\\$\\$.*?\\$\\$/g, type: 'LATEX'} // Display math\n];\n\n/**\n * Function to replace expressions with tokens\n * @param {String} text\n * @returns {Object} {{expressions: *[], tokenizedText}}\n */\nexport function preprocess(text) {\n    const expressions = [];\n    let tokenizedText = text;\n\n    // Patterns for different environments\n    // Replace each expression with a token\n    patterns.forEach(pattern => {\n        tokenizedText = tokenizedText.replace(pattern.regex, match => {\n            const token = `__${pattern.type}_${expressions.length}__`;\n            expressions.push(match);\n            return token;\n        });\n    });\n\n    return {tokenizedText, expressions: expressions};\n}\n\n/**\n * Function to replace tokens with original LaTeX math\n * @param {String} text\n * @param {Array} expressions\n * @returns {String}\n */\nexport function postprocess(text, expressions) {\n    expressions.forEach((expr, i) => {\n        patterns.forEach((p) => {\n            const token = new RegExp(`__${p.type}_${i}__`, 'g');\n            text = text.replace(token, escapeReplacementString(expr));\n        });\n    });\n    return text;\n}\n\n/**\n * Escape LaTeX tags\n * @param {String} str\n * @returns {String}\n */\nexport function escapeReplacementString(str) {\n    return str.replace(/\\$/g, '$$$$');\n}\n"],"names":["text","expressions","forEach","expr","i","patterns","p","token","RegExp","type","replace","escapeReplacementString","tokenizedText","pattern","regex","match","length","push","str"],"mappings":"qNAyD4BA,KAAMC,oBAC9BA,YAAYC,SAAQ,CAACC,KAAMC,KACvBC,SAASH,SAASI,UACRC,MAAQ,IAAIC,OAAQ,KAAIF,EAAEG,QAAQL,MAAO,KAC/CJ,KAAOA,KAAKU,QAAQH,MAAOI,wBAAwBR,aAGpDH,mCA9BgBA,YACjBC,YAAc,OAChBW,cAAgBZ,YAIpBK,SAASH,SAAQW,UACbD,cAAgBA,cAAcF,QAAQG,QAAQC,OAAOC,cAC3CR,MAAS,KAAIM,QAAQJ,QAAQR,YAAYe,kBAC/Cf,YAAYgB,KAAKF,OACVR,YAIR,CAACK,cAAAA,cAAeX,YAAaA;;;;;;MAxBlCI,SAAW,CACb,CAACS,MAAO,6BAA8BL,KAAM,UAC5C,CAACK,MAAO,eAAgBL,KAAM,mBA8ClBE,wBAAwBO,YAC7BA,IAAIR,QAAQ,MAAO"}